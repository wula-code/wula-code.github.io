<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>vim语法</title>
    <url>/2022/06/02/Vim/</url>
    <content><![CDATA[<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><ul>
<li><p>末行模式</p>
<ul>
<li><code>set nu</code> - 显示行号</li>
<li><code>set ts=4</code> - 设置制表键的空格数</li>
<li><code>set expandtab </code>- 将制表键扩展为空格</li>
<li><code> set autoindent</code> - 自动缩进</li>
<li><code>set ruler</code>：显示光标位置</li>
<li><code>syntax on / off</code>：打开 / 关闭语法高亮</li>
</ul>
</li>
<li><p>命令模式</p>
<ol>
<li><p><code>ZZ</code> - 保存退出</p>
</li>
<li><p><code>i / I / a / A/ o / O</code> - 进入编辑模式</p>
</li>
<li><p>移动光标</p>
<ol>
<li><code>h j k l </code> ： 左  /  下  /   上  /  右</li>
<li><code>gg / G / 100G </code>：开始 / 结尾</li>
<li><code>0 /$：</code>语句前 / 后</li>
<li><code>w / e</code>：单词的开始 / 结尾</li>
<li><code>ctrl + f / b / e / y</code>：向后一页 / 向前一页  / 向后一行 / 向前一行</li>
</ol>
</li>
<li><p>内容编辑</p>
<ol>
<li>删除 ： <ol>
<li><code>dd </code>：删除整行</li>
<li><code>d$</code>：从光标位置到行尾</li>
<li><code>d0</code>：从光标位置到行首</li>
<li><code>dw</code>：删除光标所在的单词</li>
<li><code>%d</code>：删除所有内容</li>
</ol>
</li>
<li>撤销：<code>u</code></li>
<li>恢复：<code>ctrl + r</code></li>
<li>执行上一次命令：<code>.</code></li>
<li>复制粘贴：<ol>
<li><code>yy  /  p</code></li>
<li><code>v -- Visual -- 移动光标选中内容 -- y -- p</code>： 进入可视模式，选中复制内容，粘贴</li>
</ol>
</li>
</ol>
</li>
<li><p>文件权限</p>
<ol>
<li>r ：读权限</li>
<li>w ：写权限</li>
<li>x ：执行权限</li>
<li>修改文件权限： <ol>
<li><code>chmod u + / -x 文件 </code>：给文件所有者添加/删除执行权限</li>
<li><code>chmod g + / - x 文件</code>：给同组用户添加/删除执行权限</li>
<li><code>chmod o + / - r文件</code>：给其他用户添加/删除执行权限</li>
</ol>
</li>
</ol>
<blockquote>
<p><code>rw-               r--            r--</code></p>
<p>文件所有者               同组用户                 其他用户</p>
</blockquote>
</li>
</ol>
</li>
</ul>
<p>​				</p>
<h2 id="vim配置文件"><a href="#vim配置文件" class="headerlink" title="vim配置文件"></a>vim配置文件</h2><p>切换至用户主目录下：4‘</p>
<ul>
<li><code>vim .vimrc</code> ： 编辑配置文件</li>
<li>添加配置设置：<ul>
<li><code>set nu</code> - 显示行号</li>
<li><code>set ts=4</code> - 设置制表键的空格数</li>
<li><code>set expandtab </code>- 将制表键扩展为空格</li>
<li><code> set autoindent</code> - 自动缩进</li>
<li><code>set ruler</code>：显示光标位置</li>
<li><code>syntax on / off</code>：打开 / 关闭语法高亮</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础语法</title>
    <url>/2022/06/02/linux%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="linux基础"><a href="#linux基础" class="headerlink" title="linux基础"></a>linux基础</h2><p>命令格式：<code>命令 [-命令参数] [-命令对象]</code></p>
<h4 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h4><p>​	<code>ctrl + c</code>: 终止进程（结束命令的执行）</p>
<p>​	<code>ctrl + w</code>: 删除光标所在的位置的单词</p>
<p>​	<code>ctrl + a</code>: 光标移动到文本开头</p>
<p>​	<code>	ctrl + e</code>: 光标移动到文本末尾</p>
<p>​	<code>	ctrl + u</code>: 删除光标之前的内容直至行首</p>
<p>​	<code>ctrl + k</code>: 删除光标之后的内容直至行尾</p>
<p>​	<code>ctrl + d</code>: 输入结束</p>
<p>​	</p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>ls [选项] [目录名] / dir</code></td>
<td>查看目录下的文件和文件夹</td>
<td><code>-a / -l</code></td>
<td>查看所有/查看长格式</td>
</tr>
<tr>
<td><code>pwd [选项]</code></td>
<td>打印当前工作目录</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>history </code></td>
<td>查看历史命令 /  清空历史记录</td>
<td><code>-c</code></td>
<td>清空历史记录</td>
</tr>
<tr>
<td><code>reboot / shutdown</code></td>
<td>重启/关闭服务器</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>clear</code></td>
<td>清空控制台上的输出</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>who / w</code></td>
<td>查看连接用户的基本信息</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>who am  i</code></td>
<td>查看自己</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>last</code></td>
<td>最近登录</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>lastb</code></td>
<td>最近登录且失败</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>date</code></td>
<td>查看当前日期时间</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>man</code></td>
<td>查看命令的i详细手册</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>cd ...</code></td>
<td>切换路径</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>file</code></td>
<td>查看文件属性</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><table>
<thead>
<tr>
<th>命令</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>mkdir [-p]</code></td>
<td>创建文件夹 /  创建父文件夹</td>
<td><code>-p</code></td>
<td>父文件夹</td>
</tr>
<tr>
<td><code>rmdir</code></td>
<td>删除空文件夹</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>touch</code></td>
<td>创建空文件或修改文件的最后访问时间</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>rm</code></td>
<td>删除文件或文件夹</td>
<td><code>-i/-r/-f</code></td>
<td>交互式删除/递归式删除/强行删除</td>
</tr>
<tr>
<td><code>cp</code></td>
<td>拷贝文件或文件夹</td>
<td><code>-r</code></td>
<td>递归式拷贝</td>
</tr>
<tr>
<td><code>mv</code></td>
<td>移动文件或文件夹 / 文件重命名</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>cat / tec / rev</code></td>
<td>查看文件</td>
<td><code>-n</code></td>
<td>查看行号</td>
</tr>
<tr>
<td><code>head</code></td>
<td>查看文件的头部 （默认10行）</td>
<td><code>-x</code></td>
<td>指定X行</td>
</tr>
<tr>
<td><code>tail</code></td>
<td>查看文件的尾部（默认10行）</td>
<td><code>-x</code></td>
<td>指定X行</td>
</tr>
<tr>
<td><code>gzip</code></td>
<td>压缩文件</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>gunzip</code></td>
<td>解压缩文件</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>tar</code></td>
<td>归档 / 解归档</td>
<td><code>-cvf [文件名]  [归档文件名]</code></td>
<td>创建归档：多个文件放到一个文件中</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>-xvf [文件名]</code></td>
<td>解归档：从文件中抽取出归档文件</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>-zxf [文件名]</code></td>
<td>一步到位：解压缩和解归档 适合<code>tgz</code>文件</td>
</tr>
<tr>
<td><code>less / more</code></td>
<td>逐行/页的查看文件</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>xz</code></td>
<td>[解]压缩文件（有）较好的压缩比</td>
<td><code>-d / -z</code></td>
<td>解压缩 / 压缩</td>
</tr>
<tr>
<td><code>wc</code></td>
<td>统计文件的字符数、单词数、行数</td>
<td><code>-l / -w</code></td>
<td>只看行数 / 单词数</td>
</tr>
<tr>
<td><code>grep [内容] [文件]</code></td>
<td>搜索文件内容</td>
<td><code>-E [正则表达式]</code></td>
<td>正则匹配</td>
</tr>
<tr>
<td><code>find [路径] [模式] [模式参数]</code></td>
<td>查找文件</td>
<td><code>-name / -size / -ctime / -mtime / -atime</code></td>
<td>名字 / 大小 / 创建时间 / 修改时间 / 访问时间</td>
</tr>
<tr>
<td><code>&gt; 文件</code></td>
<td>输出重定向</td>
<td></td>
<td>将输出放到指定文件</td>
</tr>
<tr>
<td><code>&gt;&gt; 文件</code></td>
<td>追加输出重定向</td>
<td></td>
<td>在文件后追加内容</td>
</tr>
<tr>
<td>2&gt; 文件</td>
<td>错误输出重定向</td>
<td></td>
<td>将错误输出到指定文件</td>
</tr>
<tr>
<td><code>xargs</code></td>
<td>将一列内容转换为命令的参数</td>
<td></td>
<td>一般配合管道使用</td>
</tr>
</tbody></table>
<h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><blockquote>
<p>利用 <code>|</code>将多个命令连接起来，组成一个强大的命令，前一个命令的输出是后一个命令的输入</p>
</blockquote>
<p><code>-----------------------------------------------------------------------------------------------------------------------</code></p>
<h4 id="安装管理软件（服务）"><a href="#安装管理软件（服务）" class="headerlink" title="安装管理软件（服务）"></a>安装管理软件（服务）</h4><ol>
<li><p>使用包管理工具</p>
<ol>
<li><code>yum </code> —–&gt; <code>apt(ubuntu)</code><ol>
<li>搜索：<code>yum search ... </code></li>
<li>安装：<code> yum install ...</code></li>
<li>卸载：<code>yum remove...  /  yum erase ... </code></li>
<li>更新：<code>yum update ...</code></li>
<li>信息：<code>yum info ...</code></li>
<li>查看已安装：<code>yum list installed</code></li>
</ol>
</li>
<li><code>rpm </code><ol>
<li>安装： <code>rpm -ivh 包名</code></li>
<li>查看：<code>rpm -qa  | grep “[包名(部分)]”</code></li>
<li>删除：<code>rpm -e "[包名]"</code></li>
</ol>
</li>
</ol>
</li>
<li><p>基于源代码构建安装 ： python3.8 / 3.9</p>
<ol>
<li>移除自带的python3： <code>yum erase python3</code></li>
<li>补充底层依赖：<code>yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel libdb4-devel libpcap-devel xz-devel libffi-devel libxml2</code></li>
<li>下载python源代码：<code>wget https://www.python.org/ftp/python/3.9.11/Python-3.9.11.tgz</code></li>
<li>解压解归档：<code>tar -zxf Python-3.9.11.tgz</code></li>
<li>进入文件夹：<code>cd Python-3.9.11</code></li>
<li>执行安装前的配置：<code>./configure --prefix=/usr/local/python39 </code>     &lt;安装python3.9&gt;</li>
<li>构建和安装：<code>make &amp;&amp; make install</code></li>
<li>配置环境变量：<ol>
<li><code>export PATH=$PATH:/usr/local/python39/bin</code>  &lt;临时配置&gt;</li>
<li>用户环境变量：<ol>
<li>切换到用户目录下：<code>cd ~</code></li>
<li>将python路径写入<code>.bash_profile</code>的最后一行：<code>echo "export PATH=$PATH:/usr/local/python39/bin" &gt;&gt; .bash_profile</code></li>
</ol>
</li>
<li>系统环境变量的位置：<code>/etc/profile</code></li>
</ol>
</li>
<li>创建软链接&lt;快捷方式&gt;：<code>ln -s /usr/local/python39 </code></li>
</ol>
<blockquote>
<p>如果系统没有C语言环境：<code>yum install -y gcc</code></p>
</blockquote>
</li>
<li><p>直接下载和系统匹配的二进制程序</p>
<ol>
<li>直接下载和系统匹配的二进制程序</li>
<li>将可执行文件目录添加进环境变量</li>
</ol>
</li>
</ol>
<p><code>-----------------------------------------------------------------------------------------------------------------------</code></p>
<h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4><ul>
<li><p>启动服务</p>
<ul>
<li><code>systemctl start server</code></li>
</ul>
</li>
<li><p>停止服务</p>
<ul>
<li><code>systemctl stop server</code></li>
</ul>
</li>
<li><p>重启服务</p>
<ul>
<li><code>systrmctl restart server</code></li>
</ul>
</li>
<li><p>查看服务状态</p>
<ul>
<li><code>systemctl status server</code></li>
</ul>
</li>
<li><p>开启开机自启</p>
<ul>
<li><code>systemctl enable  server  </code></li>
</ul>
</li>
<li><p>关闭开机自启</p>
<ul>
<li><code>systemctl disable server</code></li>
</ul>
</li>
</ul>
<p><code>-----------------------------------------------------------------------------------------------------------------------</code></p>
<h4 id="CentOS安装Mysql5-7"><a href="#CentOS安装Mysql5-7" class="headerlink" title="CentOS安装Mysql5.7"></a>CentOS安装Mysql5.7</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.38-1.el7.x86_64.rpm-bundle.tar<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看mariodb</span><br>rpm -qa | grep mariadb / yum list installed | grep "mariadb"<br><span class="hljs-meta prompt_"># </span><span class="language-bash">移除mariodb</span><br>yum remove -y mariadb-libs<br>rpm -ivh mysql-community-common-5.7.38-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-libs-5.7.38-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-libs-compat-5.7.38-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-devel-5.7.38-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-client-5.7.38-1.el7.x86_64.rpm<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装libaio libaio-devel依赖</span><br>yum install -y libaio libaio-devel<br>rpm -ivh mysql-community-server-5.7.38-1.el7.x86_64.rpm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动MySQL</span><br>systemctl start mysqld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看初始随机密码</span><br>cat /var/log/mysqld.log | grep "password"<br></code></pre></td></tr></tbody></table></figure>

<p><code>-----------------------------------------------------------------------------------------------------------------------</code></p>
<h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4><ol>
<li>创建用户：<code>useradd </code></li>
<li>删除用户：<code>userdel</code></li>
<li>修改密码：<code>passwd</code></li>
<li>设置密码过期：<code>chage</code></li>
<li>切换用户： <code>su</code></li>
<li>添加组：<code>groupadd</code></li>
<li>修改组：<code>chgrp</code></li>
<li>修改文件所有 者：<code>chown</code></li>
</ol>
<p><code>-----------------------------------------------------------------------------------------------------------------------</code></p>
<h4 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h4><ul>
<li><code>netstat</code>：查看网络（端口）使用情况</li>
<li><code> scp</code>：跨主机安全拷贝文件<ul>
<li><code>scp &lt; 文件名 &gt;  username@host :  &lt; 路径 &gt;</code></li>
</ul>
</li>
<li><code>ssh</code>：安全远程连接</li>
<li><code>ssh &lt;username&gt;@&lt;ip地址&gt; -t &lt;命令&gt;</code>：远程执行命令</li>
<li><code>ssh -J &lt;跳板机信息1&gt;，&lt;跳板机信息2&gt;，&lt;....&gt;  &lt;内网地址&gt;</code> ：通过跳板机连接其他主机</li>
<li><code>ping</code> ： 检查可达性</li>
<li><code>ifcpnfig  / ip </code>：网络接口/网卡信息</li>
<li><code>sftp</code>：安全文件传输<ul>
<li><code>put</code>：上传文件</li>
<li><code>get</code>：下载文件</li>
<li><code>quit</code>：退出</li>
<li><code>help</code>：查看帮助</li>
</ul>
</li>
</ul>
<p><code>-----------------------------------------------------------------------------------------------------------------------</code></p>
<h4 id="消息机制"><a href="#消息机制" class="headerlink" title="消息机制"></a>消息机制</h4><ol>
<li>给指定用户发消息：<code>write 指定用户 xxxx  </code></li>
<li>广播：<code>wall xxxx</code></li>
</ol>
<p><code>-----------------------------------------------------------------------------------------------------------------------</code></p>
<h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><ul>
<li><p>用户环境变量：<code>/.bash_profile</code></p>
<ul>
<li>修改后，只对修改用户生效</li>
</ul>
</li>
<li><p>系统环境变量：<code>/etc/profile</code></p>
<ul>
<li>修改后，对所有使用系统的人生效</li>
</ul>
</li>
</ul>
<p><code>-----------------------------------------------------------------------------------------------------------------------</code></p>
<h4 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h4><ul>
<li>例如：<code>alias 'cls=clear'</code></li>
<li>查看所有别名：<code>alias</code></li>
</ul>
<p><code>-----------------------------------------------------------------------------------------------------------------------</code></p>
<h4 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h4><ul>
<li><p>查看启用的进程：<code>ps</code></p>
<ul>
<li>查看所有进程（包括后台进程）<ul>
<li><code>ps -ef</code></li>
<li><code>pf -aux</code></li>
</ul>
</li>
<li>结束进程：<code>kill [端口号（PID）]</code><ul>
<li><code>kill -9 进程号</code></li>
<li><code>kill KILL 进程号</code></li>
</ul>
</li>
</ul>
</li>
<li><p>根据进程的名字搜索进程：<code>pgrep</code></p>
</li>
<li><p>根据敏子结束进程： <code>pkill [进程名]</code></p>
</li>
<li><p>任务管理器：<code>top</code></p>
</li>
<li><p>进程树：<code>pstree</code></p>
</li>
<li><p>查看后台任务：<code>jobs</code></p>
</li>
<li><p>将后台进程调到前台：<code>fg  %[进程号]</code></p>
</li>
<li><p>在后台启动停止进程：<code>dg %[进程号]</code></p>
</li>
<li><p>监听状态下的TCP协议的服务：<code>netstart -ntlp</code></p>
<ul>
<li><code>-n</code>： 显示IP地址</li>
<li><code>-t</code>： TCP协议</li>
<li><code>-l</code>： 监听状态</li>
</ul>
</li>
<li><p>挂起进程：<code>命令后加 &amp;</code></p>
</li>
</ul>
<h4 id="定时任务和shell脚本"><a href="#定时任务和shell脚本" class="headerlink" title="定时任务和shell脚本"></a>定时任务和shell脚本</h4><p>x: true</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>逻辑斯蒂回归参数</title>
    <url>/2021/02/06/%E9%80%BB%E8%BE%91%E6%96%AF%E8%92%82%E5%9B%9E%E5%BD%92%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<ul>
<li><p><strong>penalty：</strong>惩罚项，<strong>str类型</strong>，可选参数为<code>l1和l2</code>，默认为<strong>l2</strong>。用于指定惩罚项中使用的规范。<code>newton-cg</code>、<code>sag</code>和<code>lbfgs</code>求解算法只支持L2规范。<code>L1G</code>规范假设的是模型的参数满足拉普拉斯分布，L2假设的模型参数满足高斯分布，所谓的范式就是加上对参数的约束，使得模型更不会过拟合(overfit)，但是如果要说是不是加了约束就会好，这个没有人能回答，只能说，加约束的情况下，理论上应该可以获得泛化能力更强的结果。</p>
</li>
<li><p><strong>dual：</strong>对偶或原始方法，bool类型，默认为False。对偶方法只用在求解线性多核(<code>liblinear</code>)的L2惩罚项上。当样本数量&gt;样本特征的时候，dual通常设置为False。</p>
</li>
<li><p><strong>tol：</strong>停止求解的标准，float类型，默认为1e-4。就是求解到多少的时候，停止，认为已经求出最优解。</p>
</li>
<li><p><strong>c：</strong>正则化系数λ的倒数，float类型，默认为1.0。必须是正浮点型数。像SVM一样，越小的数值表示越强的正则化。</p>
</li>
<li><p><strong>fit_intercept：</strong>是否存在截距或偏差，bool类型，默认为True。</p>
</li>
<li><p><strong>intercept_scaling：</strong>仅在正则化项为”<code>liblinear</code>“，且<code>fit_intercept</code>设置为<code>True</code>时有用。float类型，默认为1。</p>
</li>
<li><p>class_weight：</p>
<p>用于标示分类模型中各种类型的权重，可以是一个字典或者’balanced’字符串，默认为不输入，也就是不考虑权重，即为None。如果选择输入的话，可以选择balanced让类库自己计算类型权重，或者自己输入各个类型的权重。举个例子，比如对于0,1的二元模型，我们可以定义class_weight={0:0.9,1:0.1}，这样类型0的权重为90%，而类型1的权重为10%。如果class_weight选择balanced，那么类库会根据训练样本量来计算权重。某种类型样本量越多，则权重越低，样本量越少，则权重越高。当class_weight为balanced时，类权重计算方法如下：n_samples / (n_classes * np.bincount(y))。n_samples为样本数，n_classes为类别数量，np.bincount(y)会输出每个类的样本数，例如y=[1,0,0,1,1],则np.bincount(y)=[2,3]。</p>
<ul>
<li>那么class_weight有什么作用呢？<ul>
<li>在分类模型中，我们经常会遇到两类问题：</li>
<li>1.第一种是误分类的代价很高。比如对合法用户和非法用户进行分类，将非法用户分类为合法用户的代价很高，我们宁愿将合法用户分类为非法用户，这时可以人工再甄别，但是却不愿将非法用户分类为合法用户。这时，我们可以适当提高非法用户的权重。</li>
<li>\2. 第二种是样本是高度失衡的，比如我们有合法用户和非法用户的二元样本数据10000条，里面合法用户有9995条，非法用户只有5条，如果我们不考虑权重，则我们可以将所有的测试集都预测为合法用户，这样预测准确率理论上有99.95%，但是却没有任何意义。这时，我们可以选择balanced，让类库自动提高非法用户样本的权重。提高了某种分类的权重，相比不考虑权重，会有更多的样本分类划分到高权重的类别，从而可以解决上面两类问题。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>random_state：</strong>随机数种子，int类型，可选参数，默认为无，仅在正则化优化算法为sag,liblinear时有用。</p>
</li>
<li><p>solver：</p>
<p>优化算法选择参数，只有五个可选参数，即newton-cg,lbfgs,liblinear,sag,saga。默认为liblinear。solver参数决定了我们对逻辑回归损失函数的优化方法，有四种算法可以选择，分别是：</p>
<ul>
<li><strong>liblinear：</strong>使用了开源的liblinear库实现，内部使用了坐标轴下降法来迭代优化损失函数。</li>
<li><strong>lbfgs：</strong>拟牛顿法的一种，利用损失函数二阶导数矩阵即海森矩阵来迭代优化损失函数。</li>
<li><strong>newton-cg：</strong>也是牛顿法家族的一种，利用损失函数二阶导数矩阵即海森矩阵来迭代优化损失函数。</li>
<li><strong>sag：</strong>即随机平均梯度下降，是梯度下降法的变种，和普通梯度下降法的区别是每次迭代仅仅用一部分的样本来计算梯度，适合于样本数据多的时候。</li>
<li><strong>saga：</strong>线性收敛的随机优化算法的的变重。</li>
<li>总结：<ul>
<li>liblinear适用于小数据集，而sag和saga适用于大数据集因为速度更快。</li>
<li>对于多分类问题，只有newton-cg,sag,saga和lbfgs能够处理多项损失，而liblinear受限于一对剩余(OvR)。啥意思，就是用liblinear的时候，如果是多分类问题，得先把一种类别作为一个类别，剩余的所有类别作为另外一个类别。一次类推，遍历所有类别，进行分类。</li>
<li>newton-cg,sag和lbfgs这三种优化算法时都需要损失函数的一阶或者二阶连续导数，因此不能用于没有连续导数的L1正则化，只能用于L2正则化。而liblinear和saga通吃L1正则化和L2正则化。</li>
<li>同时，sag每次仅仅使用了部分样本进行梯度迭代，所以当样本量少的时候不要选择它，而如果样本量非常大，比如大于10万，sag是第一选择。但是sag不能用于L1正则化，所以当你有大量的样本，又需要L1正则化的话就要自己做取舍了。要么通过对样本采样来降低样本量，要么回到L2正则化。</li>
<li>从上面的描述，大家可能觉得，既然newton-cg, lbfgs和sag这么多限制，如果不是大样本，我们选择liblinear不就行了嘛！错，因为liblinear也有自己的弱点！我们知道，逻辑回归有二元逻辑回归和多元逻辑回归。对于多元逻辑回归常见的有one-vs-rest(OvR)和many-vs-many(MvM)两种。而MvM一般比OvR分类相对准确一些。郁闷的是liblinear只支持OvR，不支持MvM，这样如果我们需要相对精确的多元逻辑回归时，就不能选择liblinear了。也意味着如果我们需要相对精确的多元逻辑回归不能使用L1正则化了。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>max_iter：</strong>算法收敛最大迭代次数，int类型，默认为10。仅在正则化优化算法为newton-cg, sag和lbfgs才有用，算法收敛的最大迭代次数。</p>
</li>
<li><p>multi_class：</p>
<p>分类方式选择参数，str类型，可选参数为ovr和multinomial，默认为ovr。ovr即前面提到的one-vs-rest(OvR)，而multinomial即前面提到的many-vs-many(MvM)。如果是二元逻辑回归，ovr和multinomial并没有任何区别，区别主要在多元逻辑回归上。</p>
<ul>
<li>OvR和MvM有什么不同？<ul>
<li>OvR的思想很简单，无论你是多少元逻辑回归，我们都可以看做二元逻辑回归。具体做法是，对于第K类的分类决策，我们把所有第K类的样本作为正例，除了第K类样本以外的所有样本都作为负例，然后在上面做二元逻辑回归，得到第K类的分类模型。其他类的分类模型获得以此类推。</li>
<li>而MvM则相对复杂，这里举MvM的特例one-vs-one(OvO)作讲解。如果模型有T类，我们每次在所有的T类样本里面选择两类样本出来，不妨记为T1类和T2类，把所有的输出为T1和T2的样本放在一起，把T1作为正例，T2作为负例，进行二元逻辑回归，得到模型参数。我们一共需要T(T-1)/2次分类。</li>
<li>可以看出OvR相对简单，但分类效果相对略差（这里指大多数样本分布情况，某些样本分布下OvR可能更好）。而MvM分类相对精确，但是分类速度没有OvR快。如果选择了ovr，则4种损失函数的优化方法liblinear，newton-cg,lbfgs和sag都可以选择。但是如果选择了multinomial,则只能选择newton-cg, lbfgs和sag了。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>verbose：</strong>日志冗长度，int类型。默认为0。就是不输出训练过程，1的时候偶尔输出结果，大于1，对于每个子模型都输出。</p>
</li>
<li><p><strong>warm_start：</strong>热启动参数，bool类型。默认为False。如果为True，则下一次训练是以追加树的形式进行（重新使用上一次的调用作为初始化）。</p>
</li>
<li><p><strong>n_jobs：</strong>并行数。int类型，默认为1。1的时候，用CPU的一个内核运行程序，2的时候，用CPU的2个内核运行程序。为-1的时候，用所有CPU的内核运行程序。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>LogisticRegression</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2022/06/02/GIT/</url>
    <content><![CDATA[<h1 id="Git的奇技淫巧-see-no-evil"><a href="#Git的奇技淫巧-see-no-evil" class="headerlink" title="Git的奇技淫巧:see_no_evil:"></a>Git的奇技淫巧<span class="github-emoji"><span>🙈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f648.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><blockquote>
<p>Git常用命令集合，Fork于<a href="https://github.com/git-tips/tips">tips</a>项目</p>
</blockquote>
<p>Git是一个 “分布式版本管理工具”，简单的理解版本管理工具：大家在写东西的时候都用过 “回撤” 这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用 “回撤” 是找不回来的。而 “版本管理工具” 能记录每次的修改，只要提交到版本仓库，你就可以找到之前任何时刻的状态（文本状态）。</p>
<p>下面的内容就是列举了常用的 Git 命令和一些小技巧，可以通过 “页面内查找” 的方式进行快速查询：<code>Ctrl/Command+f</code>。</p>
<h2 id="开卷必读"><a href="#开卷必读" class="headerlink" title="开卷必读"></a>开卷必读</h2><p><em>如果之前未使用过 Git，可以学习 <a href="http://rogerdudler.github.io/git-guide/index.zh.html">Git 小白教程</a>入门</em></p>
<ol>
<li><strong>一定要先测试命令的效果后</strong>，再用于工作环境中，以防造成不能弥补的后果！<strong>到时候别拿着砍刀来找我</strong></li>
<li>所有的命令都在<code>git version 2.7.4 (Apple Git-66)</code>下测试通过</li>
<li>统一概念：<ul>
<li>工作区：改动（增删文件和内容）</li>
<li>暂存区：输入命令：<code>git add 改动的文件名</code>，此次改动就放到了 ‘暂存区’</li>
<li>本地仓库(简称：本地)：输入命令：<code>git commit 此次修改的描述</code>，此次改动就放到了 ’本地仓库’，每个 commit，我叫它为一个 ‘版本’。</li>
<li>远程仓库(简称：远程)：输入命令：<code>git push 远程仓库</code>，此次改动就放到了 ‘远程仓库’（GitHub 等)</li>
<li>commit-id：输出命令：<code>git log</code>，最上面那行 <code>commit xxxxxx</code>，后面的字符串就是 commit-id</li>
</ul>
</li>
<li>如果喜欢这个项目，欢迎 Star、提交 Pr、<a href="https://github.com/521xueweihan/git-tips/issues">反馈问题</a>😊</li>
</ol>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#%E5%B1%95%E7%A4%BA%E5%B8%AE%E5%8A%A9%E4%BF%A1%E6%81%AF">展示帮助信息</a></li>
<li><a href="#%E5%9B%9E%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E7%8A%B6%E6%80%81">回到远程仓库的状态</a></li>
<li><a href="#%E9%87%8D%E8%AE%BE%E7%AC%AC%E4%B8%80%E4%B8%AA-commit">重设第一个commit</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E4%B8%8D%E5%90%8C">展示工作区和暂存区的不同</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%9A%82%E5%AD%98%E5%8C%BA%E5%92%8C%E6%9C%80%E8%BF%91%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%8D%E5%90%8C">展示暂存区和最近版本的不同</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%9A%82%E5%AD%98%E5%8C%BA%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9C%80%E8%BF%91%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%8D%E5%90%8C">展示暂存区、工作区和最近版本的不同</a></li>
<li><a href="#%E5%BF%AB%E9%80%9F%E5%88%87%E6%8D%A2%E5%88%B0%E4%B8%8A%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF">快速切换到上一个分支</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E5%B7%B2%E7%BB%8F%E5%90%88%E5%B9%B6%E5%88%B0-master-%E7%9A%84%E5%88%86%E6%94%AF">删除已经合并到 master 的分支</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E6%83%85%E5%86%B5">展示本地分支关联远程仓库的情况</a></li>
<li><a href="#%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">关联远程分支</a></li>
<li><a href="#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">列出所有远程分支</a></li>
<li><a href="#%E5%88%97%E5%87%BA%E6%9C%AC%E5%9C%B0%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">列出本地和远程分支</a></li>
<li><a href="#%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">创建并切换到本地分支</a></li>
<li><a href="#%E4%BB%8E%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">从远程分支中创建并切换到本地分支</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">删除本地分支</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">删除远程分支</a></li>
<li><a href="#%E9%87%8D%E5%91%BD%E5%90%8D%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">重命名本地分支</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B%E6%A0%87%E7%AD%BE">查看标签</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B%E6%A0%87%E7%AD%BE%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF">查看标签详细信息</a></li>
<li><a href="#%E6%9C%AC%E5%9C%B0%E5%88%9B%E5%BB%BA%E6%A0%87%E7%AD%BE">本地创建标签</a></li>
<li><a href="#%E6%8E%A8%E9%80%81%E6%A0%87%E7%AD%BE%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">推送标签到远程仓库</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E6%A0%87%E7%AD%BE">删除本地标签</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E6%A0%87%E7%AD%BE">删除远程标签</a></li>
<li><a href="#%E5%88%87%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AA%E6%A0%87%E7%AD%BE">切回到某个标签</a></li>
<li><a href="#%E6%94%BE%E5%BC%83%E5%B7%A5%E4%BD%9C%E5%8C%BA%E7%9A%84%E4%BF%AE%E6%94%B9">放弃工作区的修改</a></li>
<li><a href="#%E6%81%A2%E5%A4%8D%E5%88%A0%E9%99%A4%E7%9A%84%E6%96%87%E4%BB%B6">恢复删除的文件</a></li>
<li><a href="#%E4%BB%A5%E6%96%B0%E5%A2%9E%E4%B8%80%E4%B8%AA-commit-%E7%9A%84%E6%96%B9%E5%BC%8F%E8%BF%98%E5%8E%9F%E6%9F%90%E4%B8%80%E4%B8%AA-commit-%E7%9A%84%E4%BF%AE%E6%94%B9">以新增一个 commit 的方式还原某一个 commit 的修改</a></li>
<li><a href="#%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AA-commit-%E7%9A%84%E7%8A%B6%E6%80%81%E5%B9%B6%E5%88%A0%E9%99%A4%E5%90%8E%E9%9D%A2%E7%9A%84-commit">回到某个 commit 的状态，并删除后面的 commit</a></li>
<li><a href="#%E4%BF%AE%E6%94%B9%E4%B8%8A%E4%B8%80%E4%B8%AA-commit-%E7%9A%84%E6%8F%8F%E8%BF%B0">修改上一个 commit 的描述</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B-commit-%E5%8E%86%E5%8F%B2">查看 commit 历史</a></li>
<li><a href="#%E6%98%BE%E7%A4%BA%E6%9C%AC%E5%9C%B0%E6%9B%B4%E6%96%B0%E8%BF%87-head-%E7%9A%84-git-%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95">显示本地更新过 HEAD 的 git 命令记录</a></li>
<li><a href="#%E4%BF%AE%E6%94%B9%E4%BD%9C%E8%80%85%E5%90%8D">修改作者名</a></li>
<li><a href="#%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84-url">修改远程仓库的 url</a></li>
<li><a href="#%E5%A2%9E%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">增加远程仓库</a></li>
<li><a href="#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">列出所有远程仓库</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B%E4%B8%A4%E4%B8%AA%E6%98%9F%E6%9C%9F%E5%86%85%E7%9A%84%E6%94%B9%E5%8A%A8">查看两个星期内的改动</a></li>
<li><a href="#%E6%8A%8A-A-%E5%88%86%E6%94%AF%E7%9A%84%E6%9F%90%E4%B8%80%E4%B8%AA-commit-%E6%94%BE%E5%88%B0-B-%E5%88%86%E6%94%AF%E4%B8%8A">把 A 分支的某一个 commit，放到 B 分支上</a></li>
<li><a href="#%E7%BB%99-git-%E5%91%BD%E4%BB%A4%E8%B5%B7%E5%88%AB%E5%90%8D">给 git 命令起别名</a></li>
<li><a href="#%E5%AD%98%E5%82%A8%E5%BD%93%E5%89%8D%E7%9A%84%E4%BF%AE%E6%94%B9%E4%BD%86%E4%B8%8D%E7%94%A8%E6%8F%90%E4%BA%A4-commit">存储当前的修改，但不用提交 commit</a></li>
<li><a href="#%E4%BF%9D%E5%AD%98%E5%BD%93%E5%89%8D%E7%8A%B6%E6%80%81%E5%8C%85%E6%8B%AC-untracked-%E7%9A%84%E6%96%87%E4%BB%B6">保存当前状态，包括 untracked 的文件</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-stashes">展示所有 stashes</a></li>
<li><a href="#%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AA-stash-%E7%9A%84%E7%8A%B6%E6%80%81">回到某个 stash 的状态</a></li>
<li><a href="#%E5%9B%9E%E5%88%B0%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA-stash-%E7%9A%84%E7%8A%B6%E6%80%81%E5%B9%B6%E5%88%A0%E9%99%A4%E8%BF%99%E4%B8%AA-stash">回到最后一个 stash 的状态，并删除这个 stash</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E7%9A%84-stash">删除所有的 stash</a></li>
<li><a href="#%E4%BB%8E-stash-%E4%B8%AD%E6%8B%BF%E5%87%BA%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E4%BF%AE%E6%94%B9">从 stash 中拿出某个文件的修改</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-tracked-%E7%9A%84%E6%96%87%E4%BB%B6">展示所有 tracked 的文件</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-untracked-%E7%9A%84%E6%96%87%E4%BB%B6">展示所有 untracked 的文件</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6">展示所有忽略的文件</a></li>
<li><a href="#%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4-untracked-%E7%9A%84%E6%96%87%E4%BB%B6">强制删除 untracked 的文件</a></li>
<li><a href="#%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4-untracked-%E7%9A%84%E7%9B%AE%E5%BD%95">强制删除 untracked 的目录</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E7%AE%80%E5%8C%96%E7%9A%84-commit-%E5%8E%86%E5%8F%B2">展示简化的 commit 历史</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B%E6%9F%90%E6%AE%B5%E4%BB%A3%E7%A0%81%E6%98%AF%E8%B0%81%E5%86%99%E7%9A%84">查看某段代码是谁写的</a></li>
<li><a href="#%E6%8A%8A%E6%9F%90%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%E5%88%B0%E5%AF%BC%E5%87%BA%E6%88%90%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6">把某一个分支到导出成一个文件</a></li>
<li><a href="#%E4%BB%8E%E5%8C%85%E4%B8%AD%E5%AF%BC%E5%85%A5%E5%88%86%E6%94%AF">从包中导入分支</a></li>
<li><a href="#%E6%89%A7%E8%A1%8C-rebase-%E4%B9%8B%E5%89%8D%E8%87%AA%E5%8A%A8-stash">执行 rebase 之前自动 stash</a></li>
<li><a href="#%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%A0%B9%E6%8D%AE-ID-%E6%8B%89%E4%B8%8B%E6%9F%90%E4%B8%80%E7%8A%B6%E6%80%81-%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">从远程仓库根据 ID，拉下某一状态，到本地分支</a></li>
<li><a href="#%E8%AF%A6%E7%BB%86%E5%B1%95%E7%A4%BA%E4%B8%80%E8%A1%8C%E4%B8%AD%E7%9A%84%E4%BF%AE%E6%94%B9">详细展示一行中的修改</a></li>
<li><a href="#%E6%B8%85%E9%99%A4-gitignore-%E6%96%87%E4%BB%B6%E4%B8%AD%E8%AE%B0%E5%BD%95%E7%9A%84%E6%96%87%E4%BB%B6">清除 <code>.gitignore</code> 文件中记录的文件</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-alias-%E5%92%8C-configs">展示所有 alias 和 configs</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6">展示忽略的文件</a></li>
<li><a href="#commit-%E5%8E%86%E5%8F%B2%E4%B8%AD%E6%98%BE%E7%A4%BA-Branch1-%E6%9C%89%E7%9A%84%E4%BD%86%E6%98%AF-Branch2-%E6%B2%A1%E6%9C%89-commit">commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</a></li>
<li><a href="#%E5%9C%A8-commit-log-%E4%B8%AD%E6%98%BE%E7%A4%BA-GPG-%E7%AD%BE%E5%90%8D">在 commit log 中显示 GPG 签名</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE">删除全局设置</a></li>
<li><a href="#%E6%96%B0%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E6%96%B0%E5%88%86%E6%94%AF%E4%B8%8A%E5%90%8C%E6%97%B6%E8%BF%99%E4%B8%AA%E5%88%86%E6%94%AF%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95-commit">新建并切换到新分支上，同时这个分支没有任何 commit</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E4%BB%BB%E6%84%8F%E5%88%86%E6%94%AF%E6%9F%90%E4%B8%80%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9">展示任意分支某一文件的内容</a></li>
<li><a href="#clone-%E4%B8%8B%E6%9D%A5%E6%8C%87%E5%AE%9A%E7%9A%84%E5%8D%95%E4%B8%80%E5%88%86%E6%94%AF">clone 下来指定的单一分支</a></li>
<li><a href="#%E5%BF%BD%E7%95%A5%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E6%94%B9%E5%8A%A8">忽略某个文件的改动</a></li>
<li><a href="#%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E7%9A%84%E6%9D%83%E9%99%90%E5%8F%98%E5%8C%96">忽略文件的权限变化</a></li>
<li><a href="#%E4%BB%A5%E6%9C%80%E5%90%8E%E6%8F%90%E4%BA%A4%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89-Git-%E5%88%86%E6%94%AF">以最后提交的顺序列出所有 Git 分支</a></li>
<li><a href="#%E5%9C%A8-commit-log-%E4%B8%AD%E6%9F%A5%E6%89%BE%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9">在 commit log 中查找相关内容</a></li>
<li><a href="#%E6%8A%8A%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E6%8C%87%E5%AE%9A-file-%E6%94%BE%E5%88%B0%E5%B7%A5%E4%BD%9C%E5%8C%BA%E4%B8%AD">把暂存区的指定 file 放到工作区中</a></li>
<li><a href="#%E5%BC%BA%E5%88%B6%E6%8E%A8%E9%80%81">强制推送</a></li>
<li><a href="#%E4%B8%80%E5%9B%BE%E8%AF%A6%E8%A7%A3">一图详解</a></li>
<li><a href="#%E4%BC%98%E9%9B%85%E7%9A%84%E6%8F%90%E4%BA%A4Commit%E4%BF%A1%E6%81%AF">优雅的提交Commit信息</a></li>
<li><a href="#%E8%81%94%E7%B3%BB%E6%88%91">联系我</a></li>
</ul>
<h2 id="展示帮助信息"><a href="#展示帮助信息" class="headerlink" title="展示帮助信息"></a>展示帮助信息</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">help</span> -g<br></code></pre></td></tr></tbody></table></figure>

<p>The command output as below:</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">The common Git guides are:<br>   attributes          Defining attributes per path<br>   cli                 Git command-line interface and conventions<br>   core-tutorial       A Git core tutorial <span class="hljs-keyword">for</span> developers<br>   cvs-migration       Git <span class="hljs-keyword">for</span> CVS <span class="hljs-built_in">users</span><br>   diffcore            Tweaking diff output<br>   everyday            A useful minimum <span class="hljs-built_in">set</span> of commands <span class="hljs-keyword">for</span> Everyday Git<br>   glossary            A Git Glossary<br>   hooks               Hooks used by Git<br>   ignore              Specifies intentionally untracked files to ignore<br>   modules             Defining submodule properties<br>   namespaces          Git namespaces<br>   repository-layout    Git Repository Layout<br>   revisions           Specifying revisions and ranges <span class="hljs-keyword">for</span> Git<br>   tutorial            A tutorial introduction to Git<br>   tutorial-2          A tutorial introduction to Git: part two<br>   workflows           An overview of recommended workflows with Git<br><br><span class="hljs-string">'git help -a'</span> and <span class="hljs-string">'git help -g'</span> list available subcommands and some concept guides. See <span class="hljs-string">'git help &lt;command&gt;'</span> or <span class="hljs-string">'git help &lt;concept&gt;'</span> to <span class="hljs-built_in">read</span> about a specific subcommand or concept.<br></code></pre></td></tr></tbody></table></figure>

<h2 id="回到远程仓库的状态"><a href="#回到远程仓库的状态" class="headerlink" title="回到远程仓库的状态"></a>回到远程仓库的状态</h2><p>抛弃本地所有的修改，回到远程仓库的状态。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git fetch --all &amp;&amp; git reset --hard origin/master<br></code></pre></td></tr></tbody></table></figure>

<h2 id="重设第一个-commit"><a href="#重设第一个-commit" class="headerlink" title="重设第一个 commit"></a>重设第一个 commit</h2><p>也就是把所有的改动都重新放回工作区，并<strong>清空所有的 commit</strong>，这样就可以重新提交第一个 commit 了</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git update-ref -d HEAD<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示工作区和暂存区的不同"><a href="#展示工作区和暂存区的不同" class="headerlink" title="展示工作区和暂存区的不同"></a>展示工作区和暂存区的不同</h2><p>输出<strong>工作区</strong>和<strong>暂存区</strong>的 different (不同)。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git diff<br></code></pre></td></tr></tbody></table></figure>

<p>还可以展示本地仓库中任意两个 commit 之间的文件变动：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git diff &lt;commit-id&gt; &lt;commit-id&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示暂存区和最近版本的不同"><a href="#展示暂存区和最近版本的不同" class="headerlink" title="展示暂存区和最近版本的不同"></a>展示暂存区和最近版本的不同</h2><p>输出<strong>暂存区</strong>和本地最近的版本 (commit) 的 different (不同)。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git diff --cached<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示暂存区、工作区和最近版本的不同"><a href="#展示暂存区、工作区和最近版本的不同" class="headerlink" title="展示暂存区、工作区和最近版本的不同"></a>展示暂存区、工作区和最近版本的不同</h2><p>输出<strong>工作区</strong>、<strong>暂存区</strong> 和本地最近的版本 (commit) 的 different (不同)。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git diff HEAD<br></code></pre></td></tr></tbody></table></figure>

<h2 id="快速切换到上一个分支"><a href="#快速切换到上一个分支" class="headerlink" title="快速切换到上一个分支"></a>快速切换到上一个分支</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git checkout -<br></code></pre></td></tr></tbody></table></figure>

<h2 id="删除已经合并到-master-的分支"><a href="#删除已经合并到-master-的分支" class="headerlink" title="删除已经合并到 master 的分支"></a>删除已经合并到 master 的分支</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git branch --merged master | grep -v <span class="hljs-string">'^\*\|  master'</span> | xargs -n 1 git branch -d<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示本地分支关联远程仓库的情况"><a href="#展示本地分支关联远程仓库的情况" class="headerlink" title="展示本地分支关联远程仓库的情况"></a>展示本地分支关联远程仓库的情况</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git branch -vv<br></code></pre></td></tr></tbody></table></figure>

<h2 id="关联远程分支"><a href="#关联远程分支" class="headerlink" title="关联远程分支"></a>关联远程分支</h2><p>关联之后，<code>git branch -vv</code> 就可以展示关联的远程分支名了，同时推送到远程仓库直接：<code>git push</code>，不需要指定远程仓库了。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git branch -u origin/mybranch<br></code></pre></td></tr></tbody></table></figure>

<p>或者在 push 时加上 <code>-u</code> 参数</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git push origin/mybranch -u<br></code></pre></td></tr></tbody></table></figure>

<h2 id="列出所有远程分支"><a href="#列出所有远程分支" class="headerlink" title="列出所有远程分支"></a>列出所有远程分支</h2><p>-r 参数相当于：remote</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git branch -r<br></code></pre></td></tr></tbody></table></figure>

<h2 id="列出本地和远程分支"><a href="#列出本地和远程分支" class="headerlink" title="列出本地和远程分支"></a>列出本地和远程分支</h2><p>-a 参数相当于：all</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git branch -a<br></code></pre></td></tr></tbody></table></figure>

<h2 id="创建并切换到本地分支"><a href="#创建并切换到本地分支" class="headerlink" title="创建并切换到本地分支"></a>创建并切换到本地分支</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git checkout -b &lt;branch-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="从远程分支中创建并切换到本地分支"><a href="#从远程分支中创建并切换到本地分支" class="headerlink" title="从远程分支中创建并切换到本地分支"></a>从远程分支中创建并切换到本地分支</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git branch -d &lt;local-branchname&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git push origin --delete &lt;remote-branchname&gt;<br></code></pre></td></tr></tbody></table></figure>

<p>或者</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git push origin :&lt;remote-branchname&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="重命名本地分支"><a href="#重命名本地分支" class="headerlink" title="重命名本地分支"></a>重命名本地分支</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git branch -m &lt;new-branch-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git tag<br></code></pre></td></tr></tbody></table></figure>

<p>展示当前分支的最近的 tag</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git describe --tags --abbrev=0<br></code></pre></td></tr></tbody></table></figure>

<h2 id="查看标签详细信息"><a href="#查看标签详细信息" class="headerlink" title="查看标签详细信息"></a>查看标签详细信息</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git tag -<span class="hljs-built_in">ln</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="本地创建标签"><a href="#本地创建标签" class="headerlink" title="本地创建标签"></a>本地创建标签</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git tag &lt;version-number&gt;<br></code></pre></td></tr></tbody></table></figure>

<p>默认 tag 是打在最近的一次 commit 上，如果需要指定 commit 打 tag：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">$ git tag -a &lt;version-number&gt; -m <span class="hljs-string">"v1.0 发布(描述)"</span> &lt;commit-id&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="推送标签到远程仓库"><a href="#推送标签到远程仓库" class="headerlink" title="推送标签到远程仓库"></a>推送标签到远程仓库</h2><p>首先要保证本地创建好了标签才可以推送标签到远程仓库：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git push origin &lt;local-version-number&gt;<br></code></pre></td></tr></tbody></table></figure>

<p>一次性推送所有标签，同步到远程仓库：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git push origin --tags<br></code></pre></td></tr></tbody></table></figure>

<h2 id="删除本地标签"><a href="#删除本地标签" class="headerlink" title="删除本地标签"></a>删除本地标签</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git tag -d &lt;tag-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h2><p>删除远程标签需要<strong>先删除本地标签</strong>，再执行下面的命令：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git push origin :refs/tags/&lt;tag-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="切回到某个标签"><a href="#切回到某个标签" class="headerlink" title="切回到某个标签"></a>切回到某个标签</h2><p>一般上线之前都会打 tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回到某一标签下的状态：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git checkout -b branch_name tag_name<br></code></pre></td></tr></tbody></table></figure>

<h2 id="放弃工作区的修改"><a href="#放弃工作区的修改" class="headerlink" title="放弃工作区的修改"></a>放弃工作区的修改</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git checkout &lt;file-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<p>放弃所有修改：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git checkout .<br></code></pre></td></tr></tbody></table></figure>

<h2 id="恢复删除的文件"><a href="#恢复删除的文件" class="headerlink" title="恢复删除的文件"></a>恢复删除的文件</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git rev-list -n 1 HEAD -- &lt;file_path&gt; <span class="hljs-comment">#得到 deleting_commit</span><br><br>git checkout &lt;deleting_commit&gt;^ -- &lt;file_path&gt; <span class="hljs-comment">#回到删除文件 deleting_commit 之前的状态</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="以新增一个-commit-的方式还原某一个-commit-的修改"><a href="#以新增一个-commit-的方式还原某一个-commit-的修改" class="headerlink" title="以新增一个 commit 的方式还原某一个 commit 的修改"></a>以新增一个 commit 的方式还原某一个 commit 的修改</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git revert &lt;commit-id&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="回到某个-commit-的状态，并删除后面的-commit"><a href="#回到某个-commit-的状态，并删除后面的-commit" class="headerlink" title="回到某个 commit 的状态，并删除后面的 commit"></a>回到某个 commit 的状态，并删除后面的 commit</h2><p>和 revert 的区别：reset 命令会抹去某个 commit id 之后的所有 commit</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git reset &lt;commit-id&gt;  <span class="hljs-comment">#默认就是-mixed参数。</span><br><br>git reset –mixed HEAD^  <span class="hljs-comment">#回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。</span><br><br>git reset –soft HEAD~3  <span class="hljs-comment">#回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可 &nbsp;</span><br><br>git reset –hard &lt;commit-id&gt;  <span class="hljs-comment">#彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="修改上一个-commit-的描述"><a href="#修改上一个-commit-的描述" class="headerlink" title="修改上一个 commit 的描述"></a>修改上一个 commit 的描述</h2><p>如果暂存区有改动，同时也会将暂存区的改动提交到上一个 commit</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git commit --amend<br></code></pre></td></tr></tbody></table></figure>

<h2 id="查看-commit-历史"><a href="#查看-commit-历史" class="headerlink" title="查看 commit 历史"></a>查看 commit 历史</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="查看某段代码是谁写的"><a href="#查看某段代码是谁写的" class="headerlink" title="查看某段代码是谁写的"></a>查看某段代码是谁写的</h2><p>blame 的意思为‘责怪’，你懂的。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git blame &lt;file-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="显示本地更新过-HEAD-的-git-命令记录"><a href="#显示本地更新过-HEAD-的-git-命令记录" class="headerlink" title="显示本地更新过 HEAD 的 git 命令记录"></a>显示本地更新过 HEAD 的 git 命令记录</h2><p>每次更新了 HEAD 的 git 命令比如 commint、amend、cherry-pick、reset、revert 等都会被记录下来（不限分支），就像 shell 的 history 一样。<br>这样你可以 reset 到任何一次更新了 HEAD 的操作之后，而不仅仅是回到当前分支下的某个 commit 之后的状态。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git reflog<br></code></pre></td></tr></tbody></table></figure>

<h2 id="修改作者名"><a href="#修改作者名" class="headerlink" title="修改作者名"></a>修改作者名</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git commit --amend --author=<span class="hljs-string">'Author Name &lt;email@address.com&gt;'</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="修改远程仓库的-url"><a href="#修改远程仓库的-url" class="headerlink" title="修改远程仓库的 url"></a>修改远程仓库的 url</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git remote set-url origin &lt;URL&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="增加远程仓库"><a href="#增加远程仓库" class="headerlink" title="增加远程仓库"></a>增加远程仓库</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git remote add origin &lt;remote-url&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="列出所有远程仓库"><a href="#列出所有远程仓库" class="headerlink" title="列出所有远程仓库"></a>列出所有远程仓库</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git remote<br></code></pre></td></tr></tbody></table></figure>

<h2 id="查看两个星期内的改动"><a href="#查看两个星期内的改动" class="headerlink" title="查看两个星期内的改动"></a>查看两个星期内的改动</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git whatchanged --since=<span class="hljs-string">'2 weeks ago'</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="把-A-分支的某一个-commit，放到-B-分支上"><a href="#把-A-分支的某一个-commit，放到-B-分支上" class="headerlink" title="把 A 分支的某一个 commit，放到 B 分支上"></a>把 A 分支的某一个 commit，放到 B 分支上</h2><p>这个过程需要 <code>cherry-pick</code> 命令，<a href="http://sg552.iteye.com/blog/1300713#bc2367928">参考</a></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git checkout &lt;branch-name&gt; &amp;&amp; git cherry-pick &lt;commit-id&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="给-git-命令起别名"><a href="#给-git-命令起别名" class="headerlink" title="给 git 命令起别名"></a>给 git 命令起别名</h2><p>简化命令</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git config --global <span class="hljs-built_in">alias</span>.&lt;handle&gt; &lt;<span class="hljs-built_in">command</span>&gt;<br><br>比如：git status 改成 git st，这样可以简化命令<br><br>git config --global alias.st status<br></code></pre></td></tr></tbody></table></figure>

<h2 id="存储当前的修改，但不用提交-commit"><a href="#存储当前的修改，但不用提交-commit" class="headerlink" title="存储当前的修改，但不用提交 commit"></a>存储当前的修改，但不用提交 commit</h2><p>详解可以参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000">廖雪峰老师的 git 教程</a></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git stash<br></code></pre></td></tr></tbody></table></figure>

<h2 id="保存当前状态，包括-untracked-的文件"><a href="#保存当前状态，包括-untracked-的文件" class="headerlink" title="保存当前状态，包括 untracked 的文件"></a>保存当前状态，包括 untracked 的文件</h2><p>untracked 文件：新建的文件</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git stash -u<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示所有-stashes"><a href="#展示所有-stashes" class="headerlink" title="展示所有 stashes"></a>展示所有 stashes</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git stash list<br></code></pre></td></tr></tbody></table></figure>

<h2 id="回到某个-stash-的状态"><a href="#回到某个-stash-的状态" class="headerlink" title="回到某个 stash 的状态"></a>回到某个 stash 的状态</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git stash apply &lt;stash@{n}&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="回到最后一个-stash-的状态，并删除这个-stash"><a href="#回到最后一个-stash-的状态，并删除这个-stash" class="headerlink" title="回到最后一个 stash 的状态，并删除这个 stash"></a>回到最后一个 stash 的状态，并删除这个 stash</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git stash pop<br></code></pre></td></tr></tbody></table></figure>

<h2 id="删除所有的-stash"><a href="#删除所有的-stash" class="headerlink" title="删除所有的 stash"></a>删除所有的 stash</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git stash clear<br></code></pre></td></tr></tbody></table></figure>

<h2 id="从-stash-中拿出某个文件的修改"><a href="#从-stash-中拿出某个文件的修改" class="headerlink" title="从 stash 中拿出某个文件的修改"></a>从 stash 中拿出某个文件的修改</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git checkout &lt;stash@{n}&gt; -- &lt;file-path&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示所有-tracked-的文件"><a href="#展示所有-tracked-的文件" class="headerlink" title="展示所有 tracked 的文件"></a>展示所有 tracked 的文件</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git ls-files -t<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示所有-untracked-的文件"><a href="#展示所有-untracked-的文件" class="headerlink" title="展示所有 untracked 的文件"></a>展示所有 untracked 的文件</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git ls-files --others<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示所有忽略的文件"><a href="#展示所有忽略的文件" class="headerlink" title="展示所有忽略的文件"></a>展示所有忽略的文件</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git ls-files --others -i --exclude-standard<br></code></pre></td></tr></tbody></table></figure>

<h2 id="强制删除-untracked-的文件"><a href="#强制删除-untracked-的文件" class="headerlink" title="强制删除 untracked 的文件"></a>强制删除 untracked 的文件</h2><p>可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的 untracked 文件。<code>clean</code> 命令，<strong>注意两点</strong>：</p>
<ol>
<li>clean 后，删除的文件无法找回</li>
<li>不会影响 tracked 的文件的改动，只会删除 untracked 的文件</li>
</ol>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git clean &lt;file-name&gt; -f<br></code></pre></td></tr></tbody></table></figure>

<h2 id="强制删除-untracked-的目录"><a href="#强制删除-untracked-的目录" class="headerlink" title="强制删除 untracked 的目录"></a>强制删除 untracked 的目录</h2><p>可以用来删除新建的目录，<strong>注意</strong>:这个命令也可以用来删除 untracked 的文件。详情见上一条</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git clean &lt;directory-name&gt; -<span class="hljs-built_in">df</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示简化的-commit-历史"><a href="#展示简化的-commit-历史" class="headerlink" title="展示简化的 commit 历史"></a>展示简化的 commit 历史</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">log</span> --pretty=oneline --graph --decorate --all<br></code></pre></td></tr></tbody></table></figure>

<h2 id="把某一个分支到导出成一个文件"><a href="#把某一个分支到导出成一个文件" class="headerlink" title="把某一个分支到导出成一个文件"></a>把某一个分支到导出成一个文件</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git bundle create &lt;file&gt; &lt;branch-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="从包中导入分支"><a href="#从包中导入分支" class="headerlink" title="从包中导入分支"></a>从包中导入分支</h2><p>新建一个分支，分支内容就是上面 <code>git bundle create</code> 命令导出的内容</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> repo.bundle &lt;repo-dir&gt; -b &lt;branch-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="执行-rebase-之前自动-stash"><a href="#执行-rebase-之前自动-stash" class="headerlink" title="执行 rebase 之前自动 stash"></a>执行 rebase 之前自动 stash</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git rebase --autostash<br></code></pre></td></tr></tbody></table></figure>

<h2 id="从远程仓库根据-ID，拉下某一状态，到本地分支"><a href="#从远程仓库根据-ID，拉下某一状态，到本地分支" class="headerlink" title="从远程仓库根据 ID，拉下某一状态，到本地分支"></a>从远程仓库根据 ID，拉下某一状态，到本地分支</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git fetch origin pull/&lt;<span class="hljs-built_in">id</span>&gt;/head:&lt;branch-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="详细展示一行中的修改"><a href="#详细展示一行中的修改" class="headerlink" title="详细展示一行中的修改"></a>详细展示一行中的修改</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git diff --word-diff<br></code></pre></td></tr></tbody></table></figure>

<h2 id="清除-gitignore-文件中记录的文件"><a href="#清除-gitignore-文件中记录的文件" class="headerlink" title="清除 gitignore 文件中记录的文件"></a>清除 gitignore 文件中记录的文件</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git clean -X -f<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示所有-alias-和-configs"><a href="#展示所有-alias-和-configs" class="headerlink" title="展示所有 alias 和 configs"></a>展示所有 alias 和 configs</h2><p><strong>注意：</strong> config 分为：当前目录（local）和全局（golbal）的 config，默认为当前目录的 config</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git config --<span class="hljs-built_in">local</span> --list (当前目录)<br>git config --global --list (全局)<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示忽略的文件"><a href="#展示忽略的文件" class="headerlink" title="展示忽略的文件"></a>展示忽略的文件</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git status --ignored<br></code></pre></td></tr></tbody></table></figure>

<h2 id="commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit"><a href="#commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit" class="headerlink" title="commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit"></a>commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">log</span> Branch1 ^Branch2<br></code></pre></td></tr></tbody></table></figure>

<h2 id="在-commit-log-中显示-GPG-签名"><a href="#在-commit-log-中显示-GPG-签名" class="headerlink" title="在 commit log 中显示 GPG 签名"></a>在 commit log 中显示 GPG 签名</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">log</span> --show-signature<br></code></pre></td></tr></tbody></table></figure>

<h2 id="删除全局设置"><a href="#删除全局设置" class="headerlink" title="删除全局设置"></a>删除全局设置</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git config --global --<span class="hljs-built_in">unset</span> &lt;entry-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="新建并切换到新分支上，同时这个分支没有任何-commit"><a href="#新建并切换到新分支上，同时这个分支没有任何-commit" class="headerlink" title="新建并切换到新分支上，同时这个分支没有任何 commit"></a>新建并切换到新分支上，同时这个分支没有任何 commit</h2><p>相当于保存修改，但是重写 commit 历史</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git checkout --orphan &lt;branch-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示任意分支某一文件的内容"><a href="#展示任意分支某一文件的内容" class="headerlink" title="展示任意分支某一文件的内容"></a>展示任意分支某一文件的内容</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git show &lt;branch-name&gt;:&lt;file-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="clone-下来指定的单一分支"><a href="#clone-下来指定的单一分支" class="headerlink" title="clone 下来指定的单一分支"></a>clone 下来指定的单一分支</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> -b &lt;branch-name&gt; --single-branch https://github.com/user/repo.git<br></code></pre></td></tr></tbody></table></figure>

<h2 id="忽略某个文件的改动"><a href="#忽略某个文件的改动" class="headerlink" title="忽略某个文件的改动"></a>忽略某个文件的改动</h2><p>关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git update-index --assume-unchanged path/to/file<br></code></pre></td></tr></tbody></table></figure>

<p>恢复 track 指定文件的改动</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git update-index --no-assume-unchanged path/to/file<br></code></pre></td></tr></tbody></table></figure>

<h2 id="忽略文件的权限变化"><a href="#忽略文件的权限变化" class="headerlink" title="忽略文件的权限变化"></a>忽略文件的权限变化</h2><p>不再将文件的权限变化视作改动</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git config core.fileMode <span class="hljs-literal">false</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="以最后提交的顺序列出所有-Git-分支"><a href="#以最后提交的顺序列出所有-Git-分支" class="headerlink" title="以最后提交的顺序列出所有 Git 分支"></a>以最后提交的顺序列出所有 Git 分支</h2><p>最新的放在最上面</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git for-each-ref --<span class="hljs-built_in">sort</span>=-committerdate --format=<span class="hljs-string">'%(refname:short)'</span> refs/heads/<br></code></pre></td></tr></tbody></table></figure>

<h2 id="在-commit-log-中查找相关内容"><a href="#在-commit-log-中查找相关内容" class="headerlink" title="在 commit log 中查找相关内容"></a>在 commit log 中查找相关内容</h2><p>通过 grep 查找，given-text：所需要查找的字段</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">log</span> --all --grep=<span class="hljs-string">'&lt;given-text&gt;'</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="把暂存区的指定-file-放到工作区中"><a href="#把暂存区的指定-file-放到工作区中" class="headerlink" title="把暂存区的指定 file 放到工作区中"></a>把暂存区的指定 file 放到工作区中</h2><p>不添加参数，默认是 <code>-mixed</code></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git reset &lt;file-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="强制推送"><a href="#强制推送" class="headerlink" title="强制推送"></a>强制推送</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git push -f &lt;remote-name&gt; &lt;branch-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="一图详解"><a href="#一图详解" class="headerlink" title="一图详解"></a>一图详解</h2><p><img src="E:\桌面\数据分析\文档\git-tips-master\assets\git.png"></p>
<h2 id="优雅的提交Commit信息"><a href="#优雅的提交Commit信息" class="headerlink" title="优雅的提交Commit信息"></a>优雅的提交Commit信息</h2><p>使用<a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines">Angular团队提交规范</a></p>
<p>主要有以下组成</p>
<ul>
<li>标题行: 必填, 描述主要修改类型和内容</li>
<li>主题内容: 描述为什么修改, 做了什么样的修改, 以及开发的思路等等</li>
<li>页脚注释: 放 Breaking Changes 或 Closed Issues</li>
</ul>
<p>常用的修改项</p>
<ul>
<li>type: commit 的类型</li>
<li>feat: 新特性</li>
<li>fix: 修改问题</li>
<li>refactor: 代码重构</li>
<li>docs: 文档修改</li>
<li>style: 代码格式修改, 注意不是 css 修改</li>
<li>test: 测试用例修改</li>
<li>chore: 其他修改, 比如构建流程, 依赖管理.</li>
<li>scope: commit 影响的范围, 比如: route, component, utils, build…</li>
<li>subject: commit 的概述</li>
<li>body: commit 具体修改内容, 可以分为多行</li>
<li>footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.</li>
</ul>
<h3 id="使用Commitizen代替-git-commit"><a href="#使用Commitizen代替-git-commit" class="headerlink" title="使用Commitizen代替 git commit"></a>使用<code>Commitizen</code>代替 git commit</h3><p>可以使用<a href="https://github.com/commitizen/cz-cli">cz-cli</a>工具代替 <code>git commit</code></p>
<p>全局安装</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell">npm install -g commitizen cz-conventional-changelog<br><br>echo '{ "path": "cz-conventional-changelog" }' &gt; ~/.czrc<br></code></pre></td></tr></tbody></table></figure>

<p>全局安装后使用 <code>git cz</code> 代替 <code>git commit</code>就可以了,如下图</p>
<p><img src="E:\桌面\数据分析\文档\git-tips-master\assets\gitcz.png"></p>
<h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h2><ul>
<li>博客园：<a href="http://www.cnblogs.com/xueweihan/">削微寒</a></li>
<li>或者直接提 Pr，Issues</li>
</ul>
<p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>算法原理简介</title>
    <url>/2021/02/02/%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="算法原理简介"><a href="#算法原理简介" class="headerlink" title="算法原理简介"></a>算法原理简介</h1><h2 id="1-KNN"><a href="#1-KNN" class="headerlink" title="1. KNN"></a>1. <strong>KNN</strong></h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier<br><br><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsRegressor<br></code></pre></td></tr></tbody></table></figure>

<p>说明：KNN 算法总体来说比较简单，建议校招的同学写上去。社招同学在被问到还会什么算法的时候才自爆会这些简单算法。总体来说这个算法基本原理需要人人都熟悉。</p>
<p>原理：KNN 是一种既可以用于分类又可用于回归的机器学习算法。对于给定测试样本，基于距离度量找出训练集中与其最靠近的 K 个训练样本，然后基于这 K 个邻居的信息来进行预测。</p>
<h4 id="1-步骤："><a href="#1-步骤：" class="headerlink" title="1. 步骤："></a>1. <strong>步骤：</strong></h4><p>当它使用训练数据训练好模型，而用测试数据进行预测的时候：</p>
<ol>
<li><p>计算测试数据与各个训练数据之间的距离</p>
</li>
<li><p>按照距离远近进行排序</p>
</li>
<li><p>选取距离最小的 K 个点</p>
</li>
<li><p>确定前 K 个点所在类别的出现频率，出现频率最高的类别作为测试数据的预测分类/计算前 K 个点的平均值作为测试数据的预测值 （机制类似 bagging）</p>
</li>
</ol>
<h4 id="2-优点："><a href="#2-优点：" class="headerlink" title="2.优点："></a>2.优点：</h4><ol>
<li><p>简单，易于理解，易于实现</p>
</li>
<li><p>精度高，对异常值不敏感</p>
</li>
<li><p>特别适合于多分类问题</p>
</li>
</ol>
<h4 id="3-缺点："><a href="#3-缺点：" class="headerlink" title="3.缺点："></a>3.缺点：</h4><ol>
<li><p>对测试样本分类时的计算量大，空间开销量大</p>
</li>
<li><p>当样本不平衡时，对稀有类别预测准确率低</p>
</li>
<li><p>可解释性不强</p>
</li>
<li><p>使用消极学习方法，基本上不学习，预测速度较慢</p>
</li>
</ol>
<h2 id="2-逻辑回归"><a href="#2-逻辑回归" class="headerlink" title="2. 逻辑回归"></a>2. <strong>逻辑回归</strong></h2><p>（<code>LogisticRegression</code>，简称 LR）</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<br></code></pre></td></tr></tbody></table></figure>

<p>擅长处理分类问题</p>
<h3 id="1-原理："><a href="#1-原理：" class="headerlink" title="1. 原理："></a>1. 原理：</h3><ul>
<li>在线性回归的基础上加入了<code>sigmoid</code>函数。本质上使用一个线性回归模型的预测结果取逼近真实标记的对数几率。</li>
</ul>
<p>$$<br>y = g(z) = \frac{1}{1+e^{-2}}<br>$$</p>
<h3 id="2-优点：-1"><a href="#2-优点：-1" class="headerlink" title="2. 优点："></a>2. 优点：</h3><blockquote>
<p>分类时相对其他算法计算量很小，速度很快，消耗资源低。</p>
<p>可以便利地观察样本的概率分数。</p>
</blockquote>
<h3 id="3-缺点：-1"><a href="#3-缺点：-1" class="headerlink" title="3. 缺点："></a>3. 缺点：</h3><blockquote>
<p>容易欠拟合，一般的准确度不太高。</p>
<p>当样本的特征空间很大时，逻辑回归的性能不是很好。</p>
</blockquote>
<h3 id="4-应用："><a href="#4-应用：" class="headerlink" title="4. 应用："></a>4. 应用：</h3><blockquote>
<p>常常用于二分类问题上，但同时也可以输出概率的回归数值。</p>
<p>例如：是否为垃圾邮件，是否患病，金融诈骗，虚假账号</p>
</blockquote>
<h3 id="5-参数："><a href="#5-参数：" class="headerlink" title="5 .参数："></a>5 .参数：</h3><blockquote>
<p><code>LogisticRegression</code>默认带了正则化项，<code>penalty</code>参数可选择的值为 l1 和 l2,默认是 l2 正则化</p>
<p>L1 是模型各个参数的绝对值之和，L1 趋向于产生少许的特征，而其余的特征都是 0</p>
<p>L2 是模型各个参数的平方和的绝对值，L2 会选择更多的特征，这些特征都会接近于 0</p>
<p>算法优化参数<code>solver </code>L1:<code>liblinear </code>L2:<code>libnear</code>,<code>lbfgs</code>,<code>newton</code>-cg,sag</p>
<p>梯度下降：<code>max_iter </code>最大迭代次数</p>
</blockquote>
<h2 id="3-朴素贝叶斯算法"><a href="#3-朴素贝叶斯算法" class="headerlink" title="3. 朴素贝叶斯算法"></a>3. 朴素贝叶斯算法</h2><p>(高斯朴素贝叶斯，多项式朴素贝叶斯，伯努利朴素贝叶斯）</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.naive_bayes <span class="hljs-keyword">import</span> GaussianNB<br><br><span class="hljs-keyword">from</span> sklearn.naive_bayes <span class="hljs-keyword">import</span> MultinomialNB<br><br><span class="hljs-keyword">from</span> sklearn.naive_bayes <span class="hljs-keyword">import</span> BernoulliNB<br></code></pre></td></tr></tbody></table></figure>

<h3 id="1-原理：-1"><a href="#1-原理：-1" class="headerlink" title="1.原理："></a>1.原理：</h3><ul>
<li>在假设每个条件都独立的情况下，以贝叶斯定理为基础，利用概率统计对样本数据集进行分类。</li>
</ul>
<h3 id="2-优点：-2"><a href="#2-优点：-2" class="headerlink" title="2. 优点："></a>2. 优点：</h3><ol>
<li><p>简单快速，预测表现良好</p>
</li>
<li><p>直接使用概率预测，通常容易理解</p>
</li>
<li><p>如果变量满足独立条件，相比逻辑回归等其他分类算法，朴素贝叶斯分类器性能更优，只需要少量训练数据</p>
</li>
<li><p>相较于数值变量，朴素贝叶斯分类器在多个分类变量的情况下表现更好。若是数值变量，需要正态分布假设</p>
</li>
</ol>
<h3 id="3-缺点：-2"><a href="#3-缺点：-2" class="headerlink" title="3. 缺点："></a>3. 缺点：</h3><ol>
<li><p>朴素贝叶斯模型对于属性个数较多，属性之间相关性较大时，分类效果不好。</p>
</li>
<li><p>需要知道先验概率，且先验概率很多时候取决于假设，假设的模型可以有很多种，因此在某些时候会由于假设的先验模型的原因导致预测效果不佳。</p>
</li>
<li><p>由于我们是通过先验和数据来决定后验的概率从而决定分类，所以分类决策存在一定错误率。</p>
</li>
<li><p>对输入数据的表达形式很敏感。</p>
</li>
</ol>
<h3 id="4-应用：-1"><a href="#4-应用：-1" class="headerlink" title="4. 应用："></a>4. 应用：</h3><ul>
<li>实时预测，多类预测，文本分类/垃圾邮件/情感分析，推荐系统（过滤用户想看到和不想看到的东西</li>
</ul>
<h2 id="4-决策树"><a href="#4-决策树" class="headerlink" title="4. 决策树"></a>4. <strong>决策树</strong></h2><p>原理：</p>
<p>决策树基于树结构，从顶往下，依次对样本的（一个或多个）属性进行判断，直到决策树的叶节点并导出最终结果。决策树的划分原则就是：将无序的数据变得更加有序。</p>
<table>
<thead>
<tr>
<th>算法</th>
<th>支持模型</th>
<th>树结构</th>
<th>特征选择</th>
<th>连续值处理</th>
<th>缺失值处理</th>
<th>剪枝</th>
</tr>
</thead>
<tbody><tr>
<td>ID3</td>
<td>分类</td>
<td>多叉树</td>
<td>信息增益</td>
<td>不支持</td>
<td>不支持</td>
<td>不支持</td>
</tr>
<tr>
<td>C4.5</td>
<td>分类</td>
<td>多叉树</td>
<td>信息增益比</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>CART</td>
<td>分类、回归</td>
<td>二叉树</td>
<td>基尼系数、均方差</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
</tbody></table>
<p><strong>信息增益</strong>：</p>
<p><code>ID3 </code>在划分数据集之前之后信息发生的变化成为信息增益</p>
<p><code>ID3</code>算法就是在每次需要分裂时，计算每个属性的增益率，然后选择增益率最大的属性进行分裂。</p>
<p><strong>信息增益比</strong>：</p>
<p><code>C4.5 </code>信息增益与训练数据集的经验熵之比</p>
<p><strong><code>CART</code>分类算法</strong>是：</p>
<p>根据基尼（<code>gini</code>）系数来选择测试属性，<code>gini</code>系数的值越小，划分效果越好。</p>
<p><strong>决策树模型参数</strong>：</p>
<p><code>max_features</code>: None(所有） log2，sqrt, N 特征小于 50 的时候一般使用所有的</p>
<p><code>max_depth</code>: 设置决策随机森林中的决策树的最大深度，深度越大，越容易过拟合，推荐树的深度为 5~20 之间</p>
<p><code>min_samples_split</code>:设置结点的最小样本数量，当样本数量可能小于此值时，结点将不会再划分</p>
<p><code>min_samples_leaf</code>:这个值限制了叶子节点最小的样本数，如果某叶子节点数目小于样本数，则会和兄弟节点一起被剪枝</p>
<h3 id="1-优点："><a href="#1-优点：" class="headerlink" title="1.优点："></a>1.优点：</h3><p>决策树有利于理解，可解释性好。</p>
<p>可以进行可视化分析，容易提取出规则。</p>
<p>比较适合处理有缺失属性的样本。</p>
<p>测试数据集时，运行速度较快。</p>
<h3 id="2-缺点："><a href="#2-缺点：" class="headerlink" title="2.缺点："></a>2.缺点：</h3><p>容易发生过拟合。（集成学习模型特别是随机森林可以一定程度上防止过拟合）</p>
<p>容易忽略数据集中属性的相互关联。</p>
<h2 id="5-集成学习"><a href="#5-集成学习" class="headerlink" title="5. 集成学习"></a>5. <strong>集成学习</strong></h2><p>一种思想:组合多个弱监督模型得到一个更好更全面的强监督模型</p>
<p>分为：序列集成方法（<code>Boosting</code>）和并行集成方法（<code>Bagging</code>）</p>
<p><strong>序列集成方法</strong>（<code>Boosting</code>）：<code>boosting</code>方法在弱模型上表现很好（例如浅层决策树）。首先对所有训练集进行学习，然后通过对训练中错误标记的样本赋值较高的权重不断学习，最后通过加法模型将弱分类器进行线性组合，提高整体的预测效果。</p>
<p>代表算法：<code>AdaBoost、GBDT</code></p>
<p><code>AdaBoost</code>参数：</p>
<p><code>base_estimator</code>:基分类器，默认决策树，在该分类器基础上进行<code>boosting</code></p>
<p><code>n_estimators</code>:基分类器提升（循环）次数，默认是 50 次，这个值过大，模型容易过拟合；值过小，模型容易欠拟合</p>
<p><code>learning_rate</code>：学习率，表示梯度收敛速度，默认为 1</p>
<p><code>Adaboost</code>的总结：</p>
<p>在分类错误的部分增加训练权重，而在训练的过程是通过降低偏差来不断提高最终分类器的精度。</p>
<p>弱分类器一般会选择为 CARTRE(也就是分类回归树)。由于上述高偏差和简单的要求每个分类回归树的深度不会很深。最终的总分类器是将每轮训练得到的弱分类最加权求和得到的〈(也就是加法模型)。</p>
<p>具体步骤：</p>
<p>1、首先，初始化训练数据的权值分布</p>
<p>2、进行多轮迭代</p>
<p>a 、使用具有权值分布 Dm 的训练数据集学习，得到基本分类器</p>
<p>b 、计算<code>Gm(x)</code>在训练数据集上的分类误差率</p>
<p>c 、计算<code>Gm(x)</code>的系数，<code>am</code>表示<code>Gm(x)</code>在最终分类器中的重要程度 (目的：得到基本分类器在最终分类器中所占的权重)</p>
<p>d 、更新训练数据集的权值分布（为了得到样本的新的权值分布），用于下一轮迭代</p>
<p>3、组合各个弱分类器，得到最终分类器</p>
<p><strong>并行集成方法</strong>（<code>Bagging</code>）(装袋法)：利用基础学习器之间的独立性，通过平均可以显著降低错误。因为<code>bagging</code>方法可以减小过拟合，所以通常在强分类器和复杂模型上使用时表现得很好（例如完全生长得决策树）</p>
<p><code>Bagging</code>核心为<code>bootstrap</code>(自助采样法），算法过程如下：</p>
<ol>
<li><p>从原始样本集中抽取训练集，每轮从原始样本集中有放回地抽取 n 个训练样本，共进行 k 轮抽取，得到 k 个训练集</p>
</li>
<li><p>每次使用一个训练集得到一个模型，k 个训练集得到 k 个模型</p>
</li>
<li><p>对于分类问题，将上步得到地 k 个模型采用投票方式得到分类结果。对于回归问题，计算模型地均值作为最后结果</p>
</li>
</ol>
<p><code>Bagging</code>参数：</p>
<ul>
<li><p><code>base_estimator</code>基学习器</p>
</li>
<li><p><code>n_estimators</code>基学习器数量</p>
</li>
<li><p><code>max_samples</code>随机样本集的最大个数</p>
</li>
<li><p><code>max_features</code>随机特征子集的最大个数</p>
</li>
<li><p><code>bootstrap</code>控制样本是否有放回取样(bootstrap=True,表示有放回取样)</p>
</li>
<li><p><code>bootstrap_features</code>控制特征是否是有放回取样</p>
</li>
</ul>
<p><strong>bagging</strong>代表算法：</p>
<h6 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h6><p>原理：以树模型为基础学习器的 bagging 算法。（描述决策树的原理 + bagging 的原理）</p>
<p>随机方式：样本随机 特征随机 参数随机 模型随机（ID3,C4.5)</p>
<h4 id="1-优点：-1"><a href="#1-优点：-1" class="headerlink" title="1. 优点："></a>1. 优点：</h4><p>它可以拟合出来很高维度（特征很多）的数据，并且不用降维，无需做特征选择它可以判断特征的重要程度</p>
<p>能一定程度防止过拟合</p>
<p>对于不平衡的数据集来说，它可以平衡误差。</p>
<p>如果有很大一部分的特征遗失，仍可以维持准确度。</p>
<h4 id="2-缺点：-1"><a href="#2-缺点：-1" class="headerlink" title="2. 缺点："></a>2. 缺点：</h4><p>在某些噪音较大的分类或回归问题上会过拟合。</p>
<p>取值划分较多的属性会对随机森林产生更大的影响。</p>
<h4 id="3-Extra-Trees-极限树"><a href="#3-Extra-Trees-极限树" class="headerlink" title="3. Extra Trees 极限树"></a>3. Extra Trees 极限树</h4><p>_原理_：算法与随机森林算法十分相似，都是由许多决策树构成。</p>
<p>_随机方式_：特征随机 参数随机 模型随机<code>（ID3 ,C4.5） </code>分裂随机</p>
<h4 id="4-极限树与随机森林的主要区别："><a href="#4-极限树与随机森林的主要区别：" class="headerlink" title="4. 极限树与随机森林的主要区别："></a>4. 极限树与随机森林的主要区别：</h4><p><code>randomForest</code>应用的是 Bagging 模型，<code>extraTree</code>使用的所有的样本，极限树的分裂是随机选取的，因为分裂是随机的，所以在某种程度上比随机森林得到的结果更加好。</p>
<p>随机森林是在一个随机子集内得到最佳分叉属性，而 ET 是完全随机的得到分叉值，从而实现对决策树进行分叉的。</p>
<h4 id="5-GBDT-简要原理："><a href="#5-GBDT-简要原理：" class="headerlink" title="5. GBDT 简要原理："></a>5. GBDT 简要原理：</h4><p><code>DT</code>是<code>Decision Tree</code>决策树，<code>GB</code>是<code>Gradient Boosting</code>（梯度推进、梯度提升），GBDT 是一种学习策略，<code>GBDT</code>就是用<code>Gradient Boosting</code>的策略训练出来的<code>DT</code>决策树模型。模型的结果是一组回归分类树组合<code>(CART Tree nsemble)T(1)......T(k) </code>。其中<code>T(j)</code> 模型的参数学习的是之前<code>(j-i)</code> 棵树预测结果的残差。</p>
<p><code>GBDT</code>思想：就像准备考试前的复习，先做一遍习题册，然后把做错的题目挑出来，在做一次，然后把做错的题目挑出来在做一次，经过反复多轮训练，取得最好的成绩。</p>
<h4 id="6-GBDT-优缺点："><a href="#6-GBDT-优缺点：" class="headerlink" title="6. GBDT 优缺点："></a>6. GBDT 优缺点：</h4><ol>
<li>GBDT 优点</li>
</ol>
<blockquote>
<p>可以灵活处理各种类型的数据，包括连续值和离散值。</p>
<p>在相对较少的调参时间情况下，预测的准确率也比较高，相对 SVM 而言。</p>
<p>在使用一些健壮的损失函数，对异常值得鲁棒性非常强。比如 Huber 损失函数和 Quantile 损失函数。</p>
</blockquote>
<ol start="2">
<li>GBDT 缺点</li>
</ol>
<blockquote>
<p>由于弱学习器之间存在较强依赖关系，难以并行训练。可以通过自采样的 SGBT 来达到部分并行。</p>
</blockquote>
<p><strong>重点描述：我们后一棵树，拟合（学习）前面的树预测结果的残差。为什么是残差？残差是我定义的损失函数（MSE）的一阶导，损失的一阶导是损失下降的最快的方向。</strong></p>
<blockquote>
<p><code>XGBoost</code>：该算法思想是基于决策树，通过<code>boosting</code>算法的方式，在<code>GBDT</code>基础上的工程实现，它不断地进行特征分裂来生长一棵树，每次添加一个树，其实是学习一个新函数，去拟合上次预测的残差，本质上是对上次预测失败的部分再进行预测并且为继续失败的部分赋予更高的权重的过程。当我们训练完成得到 k 棵树，我们要预测一个样本的分数，其实就是根据这个样本的特征，在每棵树中会落到对应的一个叶子节点，每个叶子节点就对应一个分数，最后只需要将每棵树对应的分数加起来就是该样本的预测值。</p>
</blockquote>
<ol start="3">
<li><code>XGBoost</code>与 GBDT 有什么不同：</li>
</ol>
<p>除了算法上与传统的 GBDT 有一些不同外，<code>XGBoost</code>还在工程实现上做了大量的优化。总的来说，两者之间的区别和联系可以总结成以下几个方面。</p>
<blockquote>
<ol>
<li><p>GBDT 是机器学习算法，<code>XGBoost</code>是该算法的工程实现。</p>
</li>
<li><p>在使用 CART 作为基分类器时，<code>XGBoost</code>显式地加入了正则项来控制模型的复杂度，有利于防止过拟合，从而提高模型的泛化能力。</p>
</li>
<li><p>GBDT 在模型训练时只使用了代价函数的一阶导数信息，<code>XGBoost</code>对代 价函数进行二阶泰勒展开，可以同时使用一阶和二阶导数。</p>
</li>
<li><p>传统的 GBDT 采用 CART 作为基分类器，<code>XGBoost</code>支持多种类型的基分类器，比如线性分类器。</p>
</li>
<li><p>传统的 GBDT 在每轮迭代时使用全部的数据，<code>XGBoost</code>则采用了与随机森林相似的策略，支持对数据进行采样。</p>
</li>
<li><p>传统的 GBDT 没有设计对缺失值进行处理，<code>XGBoost</code>能够自动学习出缺失值的处理策略。</p>
</li>
</ol>
</blockquote>
<p><strong><code>VotingClassifier</code></strong></p>
<p>导入：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.ensemble  <span class="hljs-keyword">import</span> VotingClassifier<br></code></pre></td></tr></tbody></table></figure>

<p>用法：<code>VotingClassifier(estimators)</code> 其中<code>estimators</code>是列表套元组的方式<code>list of [(),(),(),....]：[(str,estimator)]</code></p>
<h4 id="7-决策原理："><a href="#7-决策原理：" class="headerlink" title="7. 决策原理："></a>7. 决策原理：</h4><ol>
<li>Hard 硬方式：<code>voting='hard'</code></li>
</ol>
<p>用多种机器学习方法得到的结果进行投票，少数服从多数得到结果。</p>
<ol>
<li>Soft 软方式：<code>voting='soft'</code></li>
</ol>
<p>将所有模型预测样本为某一类别的概率的平均值作为标准，概率最高的对应的类型为最终结果。</p>
<h2 id="6-K-means-算法——聚类"><a href="#6-K-means-算法——聚类" class="headerlink" title="6. K-means 算法——聚类"></a>6. <strong>K-means 算法——聚类</strong></h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> KMeans<br></code></pre></td></tr></tbody></table></figure>

<h4 id="1-聚类："><a href="#1-聚类：" class="headerlink" title="1. 聚类："></a>1. 聚类：</h4><blockquote>
<p>一种无监督的学习，事先不知道类别，自动将相似的对象归到同一个簇中</p>
</blockquote>
<h4 id="2-算法原理："><a href="#2-算法原理：" class="headerlink" title="2. 算法原理："></a>2. 算法原理：</h4><p>从训练集中随机选取 k 个中心点，通过计算每一个样本与中心之间的距离，将样本点归到最相似的类中，接着重新计算每个类的中心，重复这样的过程，直到中心不再改变，最终确定了每个样本所属的类别以及每个类的中心。</p>
<h4 id="3-算法步骤："><a href="#3-算法步骤：" class="headerlink" title="3. 算法步骤："></a>3. 算法步骤：</h4><ol>
<li><p>从数据中选择 k 个对象作为初始聚类中心；</p>
</li>
<li><p>计算每个聚类对象到聚类中心的距离来划分；</p>
</li>
<li><p>再次计算每个聚类中心；</p>
</li>
<li><p>计算标准测度函数，直到达到最大迭代次数，则停止，否则，继续操作；</p>
</li>
<li><p>确定最优的聚类中心。</p>
</li>
</ol>
<h4 id="4-应用举例"><a href="#4-应用举例" class="headerlink" title="4. 应用举例:"></a>4. 应用举例:</h4><ol>
<li><p>文档分类器</p>
</li>
<li><p>客户分类</p>
</li>
<li><p>保险欺诈检测</p>
</li>
<li><p>乘车数据分析</p>
</li>
</ol>
<h3 id="KMeans-模型评价："><a href="#KMeans-模型评价：" class="headerlink" title="KMeans 模型评价："></a><code>KMeans </code>模型评价：</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> silhouette_score<br><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> silhouette_samples<br></code></pre></td></tr></tbody></table></figure>

<p>其中<code>silhouette_score</code>是返回所有点的平均轮廓系数,<code>silhouette_samples</code>返回每个点的轮廓系数</p>
<p>某个点的轮廓系数定义：</p>
<p>$$<br>S=\frac{disMean_{out} - disMean_{in}}{max(disMean_{out}, disMean_{in})}<br>$$</p>
<p><code>disMean{in}</code>为该点与本类其他点的平均距离</p>
<p><code>disMean{out}</code>为该点与非本类点的平均距离。</p>
<p><code>KMeans</code>模型评价：轮廓系数 s，取值范围[-1,1]，越接近于 1，说明聚类越优秀</p>
<p>聚类的个数应该由业务需求给定，而不是根据轮廓系数来判断，轮廓系数是在已知聚类个数的需求的前提下，针对特征工程处理的优化程度的评价。</p>
<h2 id="7-SVM-支持向量机"><a href="#7-SVM-支持向量机" class="headerlink" title="7. SVM 支持向量机"></a>7. <strong>SVM 支持向量机</strong></h2><p><strong>（有监督模型/无监督模型/半监督模型）</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVC<br><br><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVR<br></code></pre></td></tr></tbody></table></figure>

<h4 id="1-最大边际分类器）"><a href="#1-最大边际分类器）" class="headerlink" title="1. (最大边际分类器）"></a>1. (最大边际分类器）</h4><p>原理：SVM 是通过高维度的方式来解决低维度上的问题，是在线性不可分的情况下解决分类和回归问题的一种强有力的算法。使用不同的核函数可以在各种不同的情况下以各种高维度思路来解决低维度的问题。</p>
<p>SVM 的损失函数最初形态：</p>
<p>$$<br>\underset{\omega,b}{min}\frac{||\omega||^2}{2}<br>\<br>subject , to , y_i(\omega \cdot x + b) \geq 1 , i=1,2,……,N<br>$$</p>
<h4 id="2-核函数："><a href="#2-核函数：" class="headerlink" title="2. 核函数："></a>2. <strong>核函数：</strong></h4><p>核函数，又叫做“核技巧”(Kernel Trick)，是一种能够使用数据原始空间中的向量计算来表示升维后的空间中的点积结果的数学方式。</p>
<p>目的是为了解决以下问题：</p>
<ol>
<li><p>有了核函数之后，我们无需去担心究竟应该是什么样，因为非线性 SVM 中的核函数都是正定核函 数，他们都满足美世定律，确保了高维空间中任意两个向量的点积一定可以被低维空间中的这两个向量的某种计算来表示（多数时候是点积的某种变换）。</p>
</li>
<li><p>使用核函数计算低维度中的向量关系比计算原本的映射函数$\Phi(x_i)\Phi(x_{test})$要简单太多</p>
</li>
</ol>
<p>计算是在原始空间中进行，所以避免了维度诅咒的问题</p>
<p><code>SKlearn </code>中的核函数，用<code>Kernel</code>选择：</p>
<p>| 输入      | 含义       | 解决问题 | 核函数的表达式                        | 参数 gamma | 参数 degree | 参数 coef0 |<br>| ——— | ———- | ——– | ————————————- | ———- | ———– | ———- | ————— | — | — | — |<br>| <code>liner</code>   | 线性核     | 线性     | $ K(x,y)= x^T y = x\cdot y $          | No         | No          | No         |<br>| <code>poly</code>    | 多项式核   | 偏线性   | $ K(x,y)=(\gamma(x\cdot y) + r)^d $   | Yes        | Yes         | Yes        |<br>| <code>sigmoid</code> | 双曲正切核 | 非线性   | $K(x,y) = tanh(\gamma(x\cdot y) + r)$ | Yes        | No          | Yes        |<br>| <code>rbf</code>     | 高斯径向基 | 偏非线性 | $K(x,y)=e^{-\gamma                    |            | x-y         |            | ^2}, \gamma&gt;0 $ | Yes | No  | No  |</p>
<h2 id="8-降维方式"><a href="#8-降维方式" class="headerlink" title="8. 降维方式"></a>8. <strong>降维方式</strong></h2><h4 id="1-降维说明："><a href="#1-降维说明：" class="headerlink" title="1. 降维说明："></a>1. 降维说明：</h4><blockquote>
<p>通过保留一些重要特征，减少数据的维度的方法。</p>
<p>降维后的最终目标是各个属性维度之间线性无关。</p>
</blockquote>
<h4 id="2-降维的要点："><a href="#2-降维的要点：" class="headerlink" title="2. 降维的要点："></a>2. 降维的要点：</h4><blockquote>
<p>首先让特征之间不相关，在不相关中选择最重要的特征（分布方差最大）。</p>
<p>每个新特征是所有原特征的线性组合，原特征并没有改变，是特征工程的一个方法</p>
<p>分布方差最大：最大限度的保留了原始数据的原貌</p>
<p>特征值就是分布方差</p>
</blockquote>
<h4 id="3-降维作用"><a href="#3-降维作用" class="headerlink" title="3. 降维作用:"></a>3. 降维作用:</h4><ol>
<li>降低时间复杂度和空间复杂度;</li>
<li>节省了提取不必要特征的时间开销和空间开销;</li>
<li>去掉数据集中夹杂的噪声;</li>
<li>当数据能有较少的特征进行解释,我们可以更好的解释数据,使得我们可以提取知识;</li>
<li>实现数据可视化</li>
</ol>
<h4 id="4-降维的好处："><a href="#4-降维的好处：" class="headerlink" title="4. 降维的好处："></a>4. 降维的好处：</h4><ol>
<li>节省存储空间。数据压缩（数据在低维下更容易使用处理）。</li>
<li>降低算法的开销，加快机器学习中的计算速度，提高效率。</li>
<li>去除一些冗余的特征。消除冗余，去除噪声，降低维度灾难。</li>
</ol>
<p>数据噪声：</p>
<blockquote>
<p>噪声数据是指数据中存在着错误或异常（偏离期望值）的数据，这些数据对数据的分析造成了干扰。</p>
</blockquote>
<ol>
<li>有利于数据可视化，以便观察和挖掘数据的特征。</li>
</ol>
<p>无监督降维：PCA 主成分分析法</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.decomposition <span class="hljs-keyword">import</span> PCA<br></code></pre></td></tr></tbody></table></figure>

<p>PCA 用于对一组连续正交分量中的多变量数据集进行方差最大方向的分解。是一种常用的线性降维数据分析方法，其实质是在能尽可能好的代表原特征的情况下，将原特征进行线性变换、映射至低维度空间中。也就是将 N 维特征映射到 K 维空间上，K&lt;N，这 K 维特征是线性无关的。</p>
<p>注意：这是重新构造出来的 K 维特征，而不是简单地从 N 维特征中去除其余 N-K 维特征，因为有可能是某些新特征可能是几个原特征经过变换而来的；这也是特征选择和特征提取的根本区别。</p>
<p>PCA 核心问题：协方差矩阵的分解</p>
<p>PCA 优点：</p>
<ol>
<li>保留绝大部分信息；</li>
<li>消除评价指标之间的相关影响；</li>
<li>计算方法简单，易于在计算机上实现。</li>
</ol>
<p>PCA 缺点：</p>
<ol>
<li>主成分分析往往具有一定模糊性，不如原始变量的含义那么清楚、确切。</li>
</ol>
<p>有监督降维：LDA 线性判别分析法 <code>from sklearn.discriminant_analysis import LinearDiscriminantAnalysis</code></p>
<p>LDA 思想：投影后类内方差最小，类间方差最大。</p>
<p>LDA 算法的优点：</p>
<ol>
<li>在降维过程中可以使用类别的先验知识经验，而像 PCA 这样的无监督学习则无法使用类别先验知识。</li>
<li>LDA 在样本分类信息依赖均值而不是方差的时候，比 PCA 之类的算法较优。</li>
</ol>
<p>LDA 算法的缺点：</p>
<ol>
<li>LDA 不适合对非高斯分布样本进行降维，PCA 也有这个问题。</li>
<li>LDA 降维最多降到类别数 K-1 的维数，如果我们降维的维度大于 K-1，则不能使用 LDA。当然，目前有一些 LDA 的进化版算法可以绕过这个问题。</li>
<li>LDA 在样本分类信息依赖方差而不是均值的时候，降维效果不好。</li>
<li>LDA 可能过度拟合数据。</li>
</ol>
<p>LDA 和 PCA 的区别：</p>
<p>相同点：</p>
<ol>
<li>PCA 和 LDA 均可以对数据进行降维。</li>
<li>两者在降维时均使用了矩阵特征分解的思想。</li>
<li>两者都假设数据符合高斯分布。</li>
</ol>
<p>不同点：</p>
<ol>
<li>LDA 是有监督的降维方法，而 PCA 是无监督的降维方法。</li>
<li>LDA 降维最多降到类别数 K-1 的维数，而 PCA 则没有这个限制。</li>
<li>LDA 除了可以用于降维，还可以用于分类。</li>
<li>LDA 选择分类性能最好的投影方向，而 PCA 选择样本点具有最大方差的投影方向。</li>
</ol>
<p>基础知识补充</p>
<h2 id="9-ElasticSearch"><a href="#9-ElasticSearch" class="headerlink" title="9. ElasticSearch"></a>9. <strong><code>ElasticSearch</code></strong></h2><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><blockquote>
<p><code>ElasticSearch</code>是一个基于<code>Lucene</code>的搜索服务器，它提供了一个分布式多用户的全文搜索引擎。</p>
</blockquote>
<h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><blockquote>
<p>首先用户将数据提交到<code>ElasticSearch </code>数据库中，再通过分词控制器去将对应的语句分词，将其权重和分词结果一并存入数据，当用户搜索数据时候，再根据权重将结果排名，打分，再将返回结果呈现给用户。</p>
</blockquote>
<h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ol>
<li>免费开源的搜索引擎</li>
<li>分布式的实时文件存储，每个字段都被索引并可被搜索</li>
<li>实时分析的分布式搜索引擎</li>
<li>可以扩展到上百台服务器，处理 PB 级结构化或非结构化数据</li>
</ol>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>Python面向对象</title>
    <url>/2020/03/22/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="Python一切皆对象"><a href="#Python一切皆对象" class="headerlink" title="Python一切皆对象"></a>Python一切皆对象</h1><h2 id="面向对象和面向过程"><a href="#面向对象和面向过程" class="headerlink" title="面向对象和面向过程"></a>面向对象和面向过程</h2><table>
<thead>
<tr>
<th></th>
<th>面向过程</th>
<th>面向对象</th>
</tr>
</thead>
<tbody><tr>
<td>区别</td>
<td>事物比较简单，可以使用线性的思维去解决</td>
<td>事物比较复杂，使用简单是线性思维无法解决</td>
</tr>
<tr>
<td>共同点</td>
<td>面向过程和面向对象都是解决实际问题的思维方式</td>
<td></td>
</tr>
<tr>
<td></td>
<td>二者相辅相成，并不是对立的</td>
<td></td>
</tr>
<tr>
<td></td>
<td>解决复杂的问题，通过面向对象方法便于我们从宏观的角度上把握事物之间复杂的关系，方便我们分析整个系统；具体到微观操作，仍然使用面向过程方式来处理</td>
<td></td>
</tr>
</tbody></table>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ul>
<li><p>类是多个类似的事物组成的群体的统称，能够帮助我们快速的理解和判断事物的性质</p>
</li>
<li><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li>不同的数据类型属于不同的类</li>
<li>使用内置函数查看数据类型 <strong>type()</strong></li>
</ul>
</li>
<li><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul>
<li>10，99，100都是int类之下包含的相似的不同个例，这个隔离专业术语称为实例或对象</li>
</ul>
</li>
</ul>
<h2 id="类的组成"><a href="#类的组成" class="headerlink" title="类的组成"></a>类的组成</h2><ul>
<li>创建语句</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Xxxxx</span>: <span class="hljs-comment"># Xxxxx是类的名称</span><br>	<span class="hljs-keyword">pass</span><br></code></pre></td></tr></tbody></table></figure>

<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:  <span class="hljs-comment"># 类名，由一个或者多个单词组成，要求首字母大写，其余小写（代码规范）</span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># Python中一切皆对象</span><br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(Student))  <span class="hljs-comment"># 有内存空间</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(Student))  <span class="hljs-comment"># 有数据类型 &lt;class 'type'&gt;</span><br><span class="hljs-built_in">print</span>(Student)  <span class="hljs-comment"># &lt;class '__main__.Student'&gt; ----&gt;value值</span><br></code></pre></td></tr></tbody></table></figure>



<ul>
<li>类属性：类中方法外的变量称为类属性，被该类的所有对象共享,使用类名直接调用</li>
<li>实例方法</li>
<li>静态方法：使用@staticmethod修饰的方法，使用类名直接访问的方法</li>
<li>类方法：使用@classmethod修饰的方法，使用类名直接访问的方法</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:  <span class="hljs-comment"># 类名，由一个或者多个单词组成，要求首字母大写，其余小写（代码规范）</span><br>    native_pace = <span class="hljs-string">'陕西'</span>  <span class="hljs-comment"># 直接写在类里的变量，称为类属性</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        self.name = name   <span class="hljs-comment"># self.name为实例属性，进行一个赋值操作，将局部变量中的name的值赋给实例属性</span><br>        self.age = age<br><br><br>    <span class="hljs-comment"># 实例方法，在类之外定义的称为函数，在类之内定义的是实例方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'在干饭.......'</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f'我叫<span class="hljs-subst">{self.name}</span>,今年<span class="hljs-subst">{self.age}</span>'</span>)<br><br><br>    <span class="hljs-comment"># 静态方法</span><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'我使用了staticmethod进行修饰，所以我是静态方法'</span>)<br><br>    <span class="hljs-comment"># 类方法</span><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cm</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'我使用了classmethod进行修饰，所以我是类方法'</span>)<br><br><span class="hljs-comment"># 创建Student类的实例对象</span><br><span class="hljs-comment"># 实例对象 = 类名()</span><br><span class="hljs-comment"># 有了实例，就可以调用类中的内容</span><br>s = Student(<span class="hljs-string">'王'</span>,<span class="hljs-number">16</span>)<br>s.eat()<br><span class="hljs-built_in">print</span>(s.native_pace)<br>Student.cm()  <span class="hljs-comment"># 类方法的调用</span><br>Student.method()   <span class="hljs-comment"># 静态方法的调用</span><br></code></pre></td></tr></tbody></table></figure>



<h2 id="动态绑定属性和方法"><a href="#动态绑定属性和方法" class="headerlink" title="动态绑定属性和方法"></a>动态绑定属性和方法</h2><ul>
<li>python是动态语言，在创建对象后，可以动态的绑定属性个方法</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.name + <span class="hljs-string">'在干饭.......'</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'动态方法,十一个函数'</span>)<br>stu1 = Student(<span class="hljs-string">'张三'</span>, <span class="hljs-number">20</span>)<br>stu2 = Student(<span class="hljs-string">'李四'</span>, <span class="hljs-number">30</span>)<br><br>stu1.gender = <span class="hljs-string">'男'</span>  <span class="hljs-comment"># 动态绑定动态属性</span><br><span class="hljs-built_in">print</span>(stu1.name, stu1.age, stu1.gender)<br>stu1.show = show<br>stu1.show()  <span class="hljs-comment"># 绑定动态方法</span><br></code></pre></td></tr></tbody></table></figure>

<h1 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul>
<li><p>封装可以提高代码的安全性</p>
<ul>
<li>将数据(属性)和行为(方法)包装到类对象中，在方法内部对属性进行操作，在类对象的外部调用方法，这样，不用关心方法内部的具体实现方法，从而隔离了复杂度</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, brand</span>):<br>        self.brand = brand<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">statr</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'突突突.....'</span>)<br>        <br>car = Car(<span class="hljs-string">'宝马X8'</span>)<br>car.statr()<br><span class="hljs-built_in">print</span>(car.brand)  <span class="hljs-comment"># 宝马X8</span><br></code></pre></td></tr></tbody></table></figure>



<ul>
<li>在python中没有专门的修饰符用于属性的私有，如果该属性不希望在类的对象外被访问，前面可以加”__”。</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.__age = age  <span class="hljs-comment"># 私有属性</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.name, end=<span class="hljs-string">'\t'</span>)<br>        <span class="hljs-built_in">print</span>(self.__age)<br><br><br>s = Student(<span class="hljs-string">'a'</span>,<span class="hljs-number">32</span>)<br>s.info()<br><br><span class="hljs-built_in">print</span>(s.name)<br><span class="hljs-built_in">print</span>(s._Student__age)  <span class="hljs-comment"># 在内的外部使用_类名__私有属性对私有属性进行调用</span><br></code></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul>
<li><p>提高代码的复用性</p>
</li>
<li><p>语法格式：</p>
</li>
<li><p>```python</p>
<p>class 子类类名(父类1，父类2，……..)<br>pass</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><br>- 如果以一个类没有继承任何类，则默认继承<span class="hljs-built_in">object</span><br><br>- Python支持多继承：一个子类可以有多个父类<br><br>- 定义子类时，必须在其构建函数中调用父类的构建函数 <br><br>```python <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f'姓名:<span class="hljs-subst">{self.name}</span>, 年龄<span class="hljs-subst">{self.age}</span>'</span>)<br><br><span class="hljs-comment"># 定义子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, score</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name, age)  <span class="hljs-comment"># 继承父类中的属性</span><br>        self.score = score<br><br><span class="hljs-comment"># 定义子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, teacher_info</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name, age)  <span class="hljs-comment"># 继承父类中的属性</span><br>        self.teacher_info = teacher_info<br><br><br>s = Student(<span class="hljs-string">'张三'</span>, <span class="hljs-number">20</span>, <span class="hljs-string">'1001'</span>)<br>t = Teacher(<span class="hljs-string">'李四'</span>, <span class="hljs-number">80</span>, <span class="hljs-number">1005659</span>)<br>t.info()  <span class="hljs-comment"># 从父类Person中继承的方法</span><br>s.info()  <span class="hljs-comment"># 从父类Person中继承的方法</span><br></code></pre></td></tr></tbody></table></figure></li>
</ul>
<p>多继承</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>)：<br>	<span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">object</span>):<br>	<span class="hljs-keyword">pass</span><br><span class="hljs-comment"># 多继承，同时继承A和B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>(A,B):<br>	<span class="hljs-keyword">pass</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h2><ul>
<li>如果子类对继承的父类的某个方法不满意时，可以在子类中对父类中不满意的方法体进行重写</li>
<li>子类重写后的方法可以通过super().xxx()调用父类中被重写的方法</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># Is overrides in: Student, Teacher 这个方法被Student和Teacher重写了</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f'name : <span class="hljs-subst">{self.name}</span>,age : <span class="hljs-subst">{self.age}</span>'</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, stu_no</span>):  <span class="hljs-comment"># 冲写了格式化方法</span><br>        <span class="hljs-built_in">super</span>(Student, self).__init__(name, age)<br>        self.stu_no = stu_no<br><br>    <span class="hljs-comment"># 方法的重写 Overrides method in Person 重写了父类的info()方法体</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f'name:<span class="hljs-subst">{self.name}</span>, age:<span class="hljs-subst">{self.age}</span>, stu_no:<span class="hljs-subst">{self.stu_no}</span>'</span>)  <span class="hljs-comment"># 重写了父类中的info()方法，新增了输出stu_no的方法</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, teacher_info</span>):<br>        <span class="hljs-built_in">super</span>(Teacher, self).__init__(name, age)<br>        self.teacher_info = teacher_info<br><br>    <span class="hljs-comment"># 方法的重写 Overrides method in Person 重写了父类的info()方法体</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># Overrides method in Person</span><br>        <span class="hljs-built_in">super</span>().info()  <span class="hljs-comment"># 继承了Person中的info()方法</span><br>        <span class="hljs-built_in">print</span>(<br>            <span class="hljs-string">f'name : <span class="hljs-subst">{self.name}</span>, age : <span class="hljs-subst">{self.age}</span>, info : <span class="hljs-subst">{self.teacher_info}</span>'</span>)  <span class="hljs-comment"># 重写了父类中的info()方法，新增了输出teacher_info的方法</span><br>        <span class="hljs-comment"># super(Teacher, self).info()</span><br><br>stu = Student(<span class="hljs-string">'张三'</span>, <span class="hljs-number">20</span>, <span class="hljs-string">'1001'</span>)<br>tea = Teacher(<span class="hljs-string">'李四'</span>, <span class="hljs-number">25</span>, <span class="hljs-number">1064</span>)<br><br>stu.info()<br>tea.info()<br></code></pre></td></tr></tbody></table></figure>



<h2 id="object类"><a href="#object类" class="headerlink" title="object类"></a>object类</h2><ul>
<li>是所有类的父类，因此所有类都继承了object的方法和属性</li>
<li>内置函数dir()可以查看指定对象的所有属性</li>
<li>object有一个<code>__str__()</code>方法，用于返回一个对于”对象的描述”，对应于内置函数str()，经常用于print()方法，帮我们查看对象的信息，所以进场会对str()方法进行重写,一旦重写了<code>__str__()</code>方法之后，就不再输出对象的内存地址，而是调用重写之后的<code>__str__()</code>方法，输出重写止后内容</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># Is overrides in: Student, Teacher 这个方法被Student和Teacher重写了</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f'name : <span class="hljs-subst">{self.name}</span>,age : <span class="hljs-subst">{self.age}</span>'</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># Overrides method in object, 对于object中的__str__()方法，进行重写</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f'name : <span class="hljs-subst">{self.name}</span>,age : <span class="hljs-subst">{self.age}</span>'</span><br><br><br>o = <span class="hljs-built_in">object</span>()<br>p = Person(<span class="hljs-string">'张三'</span>, <span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'重写前包含的属性和方法：'</span>, <span class="hljs-built_in">dir</span>(o))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'重写后包含的属性和方法：'</span>, <span class="hljs-built_in">dir</span>(p))<br><br>dir_lst = []<br><span class="hljs-keyword">for</span> dir_p <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(p):<br>    <span class="hljs-keyword">if</span> dir_p <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(o):<br>        dir_lst.append(dir_p)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f'重写之后的新增的属性和方法：<span class="hljs-subst">{dir_lst}</span>'</span>)<br><span class="hljs-built_in">print</span>(p)  <span class="hljs-comment"># 默认调用__str__()方法</span><br><br><span class="hljs-string">'''</span><br><span class="hljs-string">重写前包含的属性和方法： ['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']</span><br><span class="hljs-string">重写后包含的属性和方法： ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'age', 'info', 'name']</span><br><span class="hljs-string">重写之后的新增的属性和方法：['__dict__', '__module__', '__weakref__', 'age', 'info', 'name']</span><br><span class="hljs-string">name : 张三,age : 20</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul>
<li>多态就是”具有多种形态”，它指的是：即使不知道一个变量所引用的对象到底是什么类型，仍然可以通过这个变量调用方法，在运行过程中根据变量所引用的对象的类型，动态的决定调用哪个对象中的方法</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'吃'</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'狗吃肉'</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'猫吃鱼'</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'人吃饭'</span>)<br><br><br><span class="hljs-comment"># 定义函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">obj</span>):<br>    obj.eat()<br><br><br><span class="hljs-comment"># 调用</span><br>func(Dog())<br>func(Cat())<br>func(Animal()) <span class="hljs-comment"># Dog和Cat重写了Animal中的eat()方法</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">'-------------------------------------------------------------'</span>)<br>func(Person()) <span class="hljs-comment"># Person中也有eat方法 只要有eat方法，就可以被调用，不用考虑继承关系</span><br><span class="hljs-string">'''</span><br><span class="hljs-string">狗吃肉</span><br><span class="hljs-string">猫吃鱼</span><br><span class="hljs-string">吃</span><br><span class="hljs-string">人吃饭</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>

<h3 id="静态语言和动态语言关于多态的区别"><a href="#静态语言和动态语言关于多态的区别" class="headerlink" title="静态语言和动态语言关于多态的区别"></a>静态语言和动态语言关于多态的区别</h3><ul>
<li>静态语言实现多态的方法<ul>
<li>继承</li>
<li>方法重写</li>
<li>父类引用指向子类对象</li>
</ul>
</li>
<li>动态语言只关心对象的行为（duck typing）鸭子类型</li>
</ul>
<h2 id="特殊的属性和方法"><a href="#特殊的属性和方法" class="headerlink" title="特殊的属性和方法"></a>特殊的属性和方法</h2><h3 id="特殊属性"><a href="#特殊属性" class="headerlink" title="特殊属性"></a>特殊属性</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>(A, B):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># 创建C类的实例对象</span><br>c = C(<span class="hljs-string">'jack'</span>, <span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(c.__dict__)  <span class="hljs-comment"># {'name': 'jack', 'age': 20}  查看实例对象属性的字典</span><br><span class="hljs-built_in">print</span>(C.__dict__)<br><span class="hljs-string">'''{'__module__': '__main__', '__init__': &lt;function C.__init__ at 0x000001D566E02A60&gt;, '__doc__': None}  查看类对象的属性的字典'''</span><br><span class="hljs-built_in">print</span>(c.__class__)  <span class="hljs-comment"># &lt;class '__main__.C'&gt;  实例对象锁属于的类</span><br><span class="hljs-built_in">print</span>(C.__bases__)  <span class="hljs-comment"># (&lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;) 类对象父类类型的元组</span><br><span class="hljs-built_in">print</span>(C.__base__)  <span class="hljs-comment"># &lt;class '__main__.A'&gt;  类对象的基类</span><br><span class="hljs-built_in">print</span>(C.__mro__)<br><span class="hljs-string">'''(&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class 'object'&gt;) 类对象的继承关系, 类的层次结构'''</span><br><span class="hljs-built_in">print</span>(A.__subclasses__())  <span class="hljs-comment"># [&lt;class '__main__.C'&gt;, &lt;class '__main__.D'&gt;] 查看类对象的子类列表的方法</span><br></code></pre></td></tr></tbody></table></figure>



<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>__dict__</code></td>
<td>对象属性的字典</td>
</tr>
<tr>
<td><code>__class__</code></td>
<td>实例对象属于的类</td>
</tr>
<tr>
<td><code>__bases__</code></td>
<td>父类的元组</td>
</tr>
<tr>
<td><code>__base__</code></td>
<td>类对象的基类</td>
</tr>
<tr>
<td><code>__mro__</code></td>
<td>类的层次结构</td>
</tr>
<tr>
<td><code>__subclasses__()</code></td>
<td>类对象的子类列表</td>
</tr>
</tbody></table>
<h3 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>__len__()</code></td>
<td>通过重写<code>__len__()</code>方法让内置函数len()的参数可以是自定义类型</td>
</tr>
<tr>
<td><code>__add__()</code></td>
<td>通过重写<code>__add__()</code>方法让”+”的参数可以是自定义类型</td>
</tr>
<tr>
<td><code>__new__()</code></td>
<td>用于创建对象</td>
</tr>
<tr>
<td><code>__init__()</code></td>
<td>对创建的对象进行初始化</td>
</tr>
</tbody></table>
<h3 id="new-和-init"><a href="#new-和-init" class="headerlink" title="__new__()和__init__()"></a><code>__new__()和__init__()</code></h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f'cls的id<span class="hljs-subst">{<span class="hljs-built_in">id</span>(cls)}</span>'</span>)<br>        obj = <span class="hljs-built_in">super</span>().__new__(cls)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f'obj的id<span class="hljs-subst">{<span class="hljs-built_in">id</span>(obj)}</span>'</span>)<br>        <span class="hljs-keyword">return</span> obj<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f'self的id<span class="hljs-subst">{<span class="hljs-built_in">id</span>(self)}</span>'</span>)<br>        self.name = name<br>        self.age = age<br><br>p1 = Person(<span class="hljs-string">'张三'</span>, <span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f'object的id<span class="hljs-subst">{<span class="hljs-built_in">id</span>(<span class="hljs-built_in">object</span>)}</span>'</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f'Person的id<span class="hljs-subst">{<span class="hljs-built_in">id</span>(Person)}</span>'</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f'p1的id<span class="hljs-subst">{<span class="hljs-built_in">id</span>(p1)}</span>'</span>)<br><br><span class="hljs-string">'''</span><br><span class="hljs-string">cls的id2618311801888</span><br><span class="hljs-string">obj的id2618319564368</span><br><span class="hljs-string">self的id2618319564368</span><br><span class="hljs-string">object的id140731859585872</span><br><span class="hljs-string">Person的id2618311801888</span><br><span class="hljs-string">p1的id2618319564368</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>

<p>![屏幕截图 2021-11-23 174719](C:\Users\wang6\Pictures\Screenshots\屏幕截图 2021-11-23 174719.png)</p>
<ol>
<li>将Person()传入的值赋给cls</li>
<li>cls使用<code>__new__()</code>方法创建obj对象</li>
<li>retuen出obj传进给self</li>
<li><code>__init__()</code>初始化完成，返回给p1</li>
<li>Person和cls内存地址相同，<code>__new__()</code>方法之后，创建了新的对象obj，开辟的新的内存空间，obj、self、p1的内存地址相同，object为基类对象，内存地址与所有的对象都不相同</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
        <category>面向对象</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy爬虫</title>
    <url>/2020/06/13/Scrapy%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h1 id="Scrapy爬虫"><a href="#Scrapy爬虫" class="headerlink" title="Scrapy爬虫"></a>Scrapy爬虫</h1><h3 id="一、Scrapy简介"><a href="#一、Scrapy简介" class="headerlink" title="一、Scrapy简介"></a>一、Scrapy简介</h3><p><code>Scrapy</code>是由<code>Python</code>语言开发的一款快速、高层次的屏幕抓取和<code>web</code>抓取框架，由于抓取<code>web</code>站点并从页面中提取结构化的数据，只需要实现少量的代码，就能够进行快速的爬取</p>
<h3 id="二、运行原理"><a href="#二、运行原理" class="headerlink" title="二、运行原理"></a>二、运行原理</h3><p><code>Scrapy</code>主要包含一下组件：</p>
<ol>
<li>引擎（Scrapy Engine）</li>
<li>Item 项目</li>
<li>调度器（Scheduler）</li>
<li>下载器（Downloader）</li>
<li>爬虫（Spiders）</li>
<li>项目管道文件（Pipeline）</li>
<li>下载中间件（Downloader Middlewares）</li>
<li>爬虫中间件（Spider Middlewares）</li>
<li>调度中间件（Scheduler Middlewares）</li>
</ol>
<h3 id="三、安装和使用"><a href="#三、安装和使用" class="headerlink" title="三、安装和使用"></a>三、安装和使用</h3><h4 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1  安装"></a>3.1  安装</h4><p>命令行模式直接使用pip命令安装</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">pip install scrapy<br></code></pre></td></tr></tbody></table></figure>

<p>第二种：首先下载，然后再安装：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">pip download scrapy -d ./<br><span class="hljs-comment"># 通过指定国内镜像源下载 </span><br>pip download  -i https://pypi.tuna.tsinghua.edu.cn/simple scrapy -d ./<br></code></pre></td></tr></tbody></table></figure>

<p>进入下载目录后执行下面命令安装：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">pip install Scrapy-<span class="hljs-number">1.5</span><span class="hljs-number">.0</span>-py2.py3-none-<span class="hljs-built_in">any</span>.whl<br></code></pre></td></tr></tbody></table></figure>

<h4 id="3-2-使用"><a href="#3-2-使用" class="headerlink" title="3.2 使用"></a>3.2 使用</h4><p>使用大概分为下面四步1 创建一个scrapy项目</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">scrapy startproject mySpider<br></code></pre></td></tr></tbody></table></figure>

<p>2 生成一个爬虫</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">scrapy genspider demo <span class="hljs-string">"demo.cn"</span><br></code></pre></td></tr></tbody></table></figure>

<p>3 提取数据</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">完善spider 使用xpath等<br></code></pre></td></tr></tbody></table></figure>

<p>4 保存数据</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">pipeline中保存数据<br></code></pre></td></tr></tbody></table></figure>

<h4 id="3-3-程序运行"><a href="#3-3-程序运行" class="headerlink" title="3.3 程序运行"></a><strong>3.3 程序运行</strong></h4><p>在命令中运行爬虫</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">scrapy crawl qb     <span class="hljs-comment"># qb爬虫的名字</span><br></code></pre></td></tr></tbody></table></figure>

<p>在<code>pycharm</code>中运行爬虫</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scrapy <span class="hljs-keyword">import</span> cmdline<br>cmdline.execute(<span class="hljs-string">"scrapy crawl qb"</span>.split())<br></code></pre></td></tr></tbody></table></figure>

<h3 id="四、基本步骤"><a href="#四、基本步骤" class="headerlink" title="四、基本步骤"></a>四、基本步骤</h3><p><code>Scrapy</code> 爬虫框架的具体使用步骤如下：</p>
<blockquote>
<ol>
<li>选择目标网站</li>
<li>定义要抓取的数据（通过Scrapy Items来完成的）</li>
<li>编写提取数据的spider</li>
<li>执行spider，获取数据</li>
<li>数据存储</li>
</ol>
</blockquote>
<h3 id="五、目录文件说明"><a href="#五、目录文件说明" class="headerlink" title="五、目录文件说明"></a>五、目录文件说明</h3><p>当我们创建了一个scrapy项目后,继续创建了一个spider,目录结构是这样的：</p>
<p>下面来简单介绍一下各个主要文件的作用：</p>
<blockquote>
<p><code>scrapy.cfg</code> ：项目的配置文件</p>
<p><code>mySpider/</code> ：项目的Python模块，将会从这里引用代码</p>
<p><code>mySpider/items.py</code> ：项目的目标文件</p>
<p><code>mySpider/pipelines.py</code> ：项目的管道文件</p>
<p><code>mySpider/settings.py </code>：项目的设置文件</p>
<p><code>mySpider/spiders/ </code>：存储爬虫代码目录</p>
</blockquote>
<h4 id="5-1-scrapy-cfg文件"><a href="#5-1-scrapy-cfg文件" class="headerlink" title="5.1 scrapy.cfg文件"></a>5.1 scrapy.cfg文件</h4><p>项目配置文件。这个是文件的内容：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Automatically created by: scrapy startproject</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># For more information about the [deploy] section see:</span><br><span class="hljs-comment"># https://scrapyd.readthedocs.io/en/latest/deploy.html</span><br><br>[settings]<br>default = mySpider.settings<br><br>[deploy]<br><span class="hljs-comment">#url = http://localhost:6800/</span><br>project = mySpider<br></code></pre></td></tr></tbody></table></figure>

<h4 id="5-2-mySpider-x2F"><a href="#5-2-mySpider-x2F" class="headerlink" title="5.2 mySpider  /"></a>5.2 mySpider  /</h4><p>项目的Python模块，将会从这里引用代码</p>
<h4 id="5-3-mySpider-x2F-items-py"><a href="#5-3-mySpider-x2F-items-py" class="headerlink" title="5.3 mySpider/items.py"></a>5.3 mySpider/items.py</h4><p>项目的目标文件</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Define here the models for your scraped items</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># See documentation in:</span><br><span class="hljs-comment"># https://docs.scrapy.org/en/latest/topics/items.html</span><br><br><span class="hljs-keyword">import</span> scrapy<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyspiderItem</span>(scrapy.Item):<br>    <span class="hljs-comment"># define the fields for your item here like:</span><br>    <span class="hljs-comment"># name = scrapy.Field()</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></tbody></table></figure>

<p>定义scrapy items的模块,示例: <strong>name = scrapy.Field()</strong></p>
<h4 id="5-4-mySpider-x2F-pipelines-py"><a href="#5-4-mySpider-x2F-pipelines-py" class="headerlink" title="5.4 mySpider/pipelines.py"></a>5.4 mySpider/pipelines.py</h4><p>项目的管道文件</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Define your item pipelines here</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><br><span class="hljs-comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><br><br><br><span class="hljs-comment"># useful for handling different item types with a single interface</span><br><span class="hljs-keyword">from</span> itemadapter <span class="hljs-keyword">import</span> ItemAdapter<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyspiderPipeline</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_item</span>(<span class="hljs-params">self, item, spider</span>):<br>        <span class="hljs-keyword">return</span> item<br></code></pre></td></tr></tbody></table></figure>

<p>这个文件也就是我们说的管道,当<code>Item</code>在<code>Spider</code>中被收集之后，它将会被传递到<code>Item Pipeline</code>(管道)，这些<code>Item Pipeline</code>组件按定义的顺序处理<code>Item</code>。每个<code>Item Pipeline</code>都是实现了简单方法的<code>Python</code>类，比如决定此<code>Item</code>是丢弃而存储。以下是<code>item pipeline</code>的一些典型应用：</p>
<ul>
<li>验证爬取的数据(检查<code>item</code>包含某些字段，比如说<code>name</code>字段)</li>
<li>查重(并丢弃)</li>
<li>将爬取结果保存到文件或者数据库中</li>
</ul>
<h4 id="5-5-mySpider-x2F-settings-py"><a href="#5-5-mySpider-x2F-settings-py" class="headerlink" title="5.5 mySpider/settings.py"></a>5.5 mySpider/settings.py</h4><p>项目的设置文件</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Scrapy settings for mySpider project</span><br>...<br><br>BOT_NAME = <span class="hljs-string">'mySpider'</span> <span class="hljs-comment"># scrapy项目名</span><br><br>SPIDER_MODULES = [<span class="hljs-string">'mySpider.spiders'</span>]<br>NEWSPIDER_MODULE = <span class="hljs-string">'mySpider.spiders'</span><br>.......<br><br><span class="hljs-comment"># Obey robots.txt rules</span><br>ROBOTSTXT_OBEY = <span class="hljs-literal">False</span> <span class="hljs-comment"># 是否遵守协议,一般给位false,但是创建完项目是是True,我们把它改为False</span><br><br><span class="hljs-comment"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span><br><span class="hljs-comment">#CONCURRENT_REQUESTS = 32 # 最大并发量 默认16</span><br>......<br><span class="hljs-comment">#DOWNLOAD_DELAY = 3 # 下载延迟 3秒</span><br><br><span class="hljs-comment"># Override the default request headers: # 请求报头,我们打开</span><br>DEFAULT_REQUEST_HEADERS = {<br>  <span class="hljs-string">'Accept'</span>: <span class="hljs-string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,<br>  <span class="hljs-string">'Accept-Language'</span>: <span class="hljs-string">'en'</span>,<br>}<br><span class="hljs-comment"># 爬虫中间件</span><br><span class="hljs-comment">#SPIDER_MIDDLEWARES = {</span><br><span class="hljs-comment">#    'mySpider.middlewares.MyspiderSpiderMiddleware': 543,</span><br><span class="hljs-comment">#}</span><br><br><span class="hljs-comment"># 下载中间件</span><br><span class="hljs-comment">#DOWNLOADER_MIDDLEWARES = {</span><br><span class="hljs-comment">#    'mySpider.middlewares.MyspiderDownloaderMiddleware': 543,</span><br><span class="hljs-comment">#}</span><br>......<br><span class="hljs-comment"># Configure item pipelines</span><br><span class="hljs-comment"># See https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><br><span class="hljs-comment">#ITEM_PIPELINES = {</span><br><span class="hljs-comment">#    'mySpider.pipelines.MyspiderPipeline': 300, # 管道</span><br><span class="hljs-comment">#}</span><br>.......<br></code></pre></td></tr></tbody></table></figure>

<p>省略号省略代码,一般重要点,给了注释</p>
<h4 id="5-6-mySpider-x2F-spiders-x2F-：存储爬虫代码目录"><a href="#5-6-mySpider-x2F-spiders-x2F-：存储爬虫代码目录" class="headerlink" title="5.6.mySpider/spiders/ ：存储爬虫代码目录"></a>5.<strong>6.mySpider/spiders/ ：存储爬虫代码目录</strong></h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DbSpider</span>(scrapy.Spider):<br>    name = <span class="hljs-string">'db'</span><br>    allowed_domains = [<span class="hljs-string">'douban.com'</span>] <span class="hljs-comment"># 可以修改</span><br>    start_urls = [<span class="hljs-string">'http://douban.com/'</span>] <span class="hljs-comment"># 开始的url也可以修改</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        <span class="hljs-comment"># pass</span><br></code></pre></td></tr></tbody></table></figure>

<h3 id="六-Scrapy-shell"><a href="#六-Scrapy-shell" class="headerlink" title="六. Scrapy shell"></a><strong>六. Scrapy shell</strong></h3><p><code>Scrapy</code>终端是一个交互终端，我们可以在未启动<code>spider</code>的情况下尝试及调试代码，也可以用来测试<code>XPath</code>或<code>CSS</code>表达式，查看他们的工作方式，方便我们爬取的网页中提取的数据,但是一般使用的不多。感兴趣的查看官方文档:</p>
<p>官方文档</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">http://scrapy-chs.readthedocs.io/zh_CN/latest/topics/shell.html<br></code></pre></td></tr></tbody></table></figure>

<p><code>Scrapy Shell</code>根据下载的页面会自动创建一些方便使用的对象，例如 <code>Response </code>对象，以及 <code>Selector 对象 (对HTML及XML内容)</code>。</p>
<ul>
<li>当<code>shell</code>载入后，将得到一个包含<code>response</code>数据的本地 <code>response </code>变量，输入 <code>response.body</code>将输出<code>response</code>的包体，输出 <code>response.headers</code> 可以看到<code>response</code>的包头。</li>
<li>输入 <code>response.selector</code> 时， 将获取到一个<code>response </code>初始化的类 <code>Selector </code>的对象，此时可以通过使用 <code>response.selector.xpath()</code>或<code>response.selector.css()</code> 来对 <code>response </code>进行查询。</li>
<li>Scrapy也提供了一些快捷方式, 例如 <code>response.xpath()</code>或<code>response.css()</code>同样可以生效（如之前的案例）。</li>
</ul>
<h4 id="Selectors选择器"><a href="#Selectors选择器" class="headerlink" title="Selectors选择器"></a><strong>Selectors选择器</strong></h4><blockquote>
<p>Scrapy Selectors 内置 <strong>XPath</strong> 和 <strong>CSS Selector</strong> 表达式机制</p>
</blockquote>
<p><code>Selector</code>有四个基本的方法，最常用的还是<code>xpath</code>:</p>
<ul>
<li><code>xpath():</code> 传入<code>xpath</code>表达式，返回该表达式所对应的所有节点的<code>selector list</code>列表</li>
<li><code>extract()</code>: 序列化该节点为字符串并返回<code>list</code></li>
<li><code>css():</code> 传入<code>CSS</code>表达式，返回该表达式所对应的所有节点的<code>selector list</code>列表，语法同 <code>BeautifulSoup4</code></li>
<li><code>re()</code>: 根据传入的正则表达式对数据进行提取，返回字符串<code>list</code>列表</li>
</ul>
<h3 id="七、案例实战"><a href="#七、案例实战" class="headerlink" title="七、案例实战"></a><strong>七、案例实战</strong></h3><p>本节，我将使用<code>Scrapy</code>爬取站酷数据作为示例</p>
<h4 id="7-1-案例说明"><a href="#7-1-案例说明" class="headerlink" title="7.1 案例说明"></a>7.1 案例说明</h4><p>既然已经初步了解了<code>scrapy</code>的工作流程以及原理,我们来做一个入门的小案例,爬取站酷首页推荐的<code>item</code>信息。如下图所示，一个小方框就是一个<code>item</code>信息。我们要提取每一个<code>item</code>的六个组成部分：</p>
<ol>
<li><code>imgLink</code>(封面图片链接)；</li>
<li><code>title</code>(标题）;</li>
<li><code>types</code>（类型）;</li>
<li><code>vistor</code>（人气）;</li>
<li><code>comment</code>（评论数）;</li>
<li><code>likes</code>（推荐人数）</li>
</ol>
<p>然后只是一个页面的<code>item</code>，我们还要通过翻页实现批量数据采集。</p>
<h4 id="7-2-文件配置"><a href="#7-2-文件配置" class="headerlink" title="7.2 文件配置"></a>7.2 文件配置</h4><h5 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a><strong>目录结构</strong></h5><p>在上一篇中我们说明了新建**<code>scrapy</code>项目（<code>zcool</code>）*<em>和*</em><code>spider</code>项目（<code>zc</code>）**，这里不再赘述，然后得到我们的目录结构如下图所示：</p>
<h5 id="start-py文件"><a href="#start-py文件" class="headerlink" title="start.py文件"></a><strong>start.py文件</strong></h5><p>然后为了方便运行，在<code>zcool</code>目录下新建<code>start</code>文件。并进行初始化设置。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scrapy <span class="hljs-keyword">import</span> cmdline<br>cmdline.execute(<span class="hljs-string">'scrapy crawl zc'</span>.split())<br></code></pre></td></tr></tbody></table></figure>

<h5 id="settings-py文件"><a href="#settings-py文件" class="headerlink" title="settings.py文件"></a><strong>settings.py文件</strong></h5><p>在这个文件里我们需要做几样设置</p>
<p>避免在程序运行的时候打印<code>log</code>日志信息</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"> LOG_LEVEL = <span class="hljs-string">'WARNING'</span> <br>ROBOTSTXT_OBEY = <span class="hljs-literal">False</span> <br></code></pre></td></tr></tbody></table></figure>

<p>添加请求头：</p>
<p>打开管道：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Configure item pipelines</span><br><span class="hljs-comment"># See https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><br><br>ITEM_PIPELINEES = {<br>    <span class="hljs-string">'zcool.pipelines.ZcooLPopeline'</span>:<span class="hljs-number">300</span>,<br>}<br></code></pre></td></tr></tbody></table></figure>

<h5 id="item-py文件"><a href="#item-py文件" class="headerlink" title="item.py文件"></a><strong>item.py文件</strong></h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ZcoolItem</span>(scrapy.Item):<br>    <span class="hljs-comment"># define the fields for your item here like:</span><br>    imgLink = scrapy.Field() <span class="hljs-comment"># 封面图片链接</span><br>    title = scrapy.Field() <span class="hljs-comment"># 标题</span><br>    types = scrapy.Field() <span class="hljs-comment"># 类型</span><br>    vistor = scrapy.Field() <span class="hljs-comment"># 人气</span><br>    comment = scrapy.Field() <span class="hljs-comment"># 评论数</span><br>    likes = scrapy.Field() <span class="hljs-comment"># 推荐人数</span><br></code></pre></td></tr></tbody></table></figure>

<h4 id="7-3-页面数据提取"><a href="#7-3-页面数据提取" class="headerlink" title="7.3 页面数据提取"></a><strong>7.3 页面数据提取</strong></h4><p>首先我们在站酷页面使用<code>xpath-helper</code>测试一下：</p>
<p>然后<code>zc.py</code>文件里面初步测试一下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>    divList = response.xpath(<span class="hljs-string">'//div[@class="work-list-box"]/div'</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(divList))<br></code></pre></td></tr></tbody></table></figure>

<p>没有问题，然后我们对各种信息分别解析提取，</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>    divList = response.xpath(<span class="hljs-string">'//div[@class="work-list-box"]/div'</span>)<br>    <span class="hljs-keyword">for</span> div <span class="hljs-keyword">in</span> divList:<br>        imgLink = div.xpath(<span class="hljs-string">"./div[1]/a/img/@src"</span>).extract()[<span class="hljs-number">0</span>] <span class="hljs-comment"># 1.封面图片链接</span><br>  ...  <span class="hljs-number">2.</span>title(标题）;<span class="hljs-number">3</span> types（类型）;4vistor（人气）;5comment（评论数）  ....<br>        likes = div.xpath(<span class="hljs-string">"./div[2]/p[3]/span[3]/@title"</span>).extract_first() <span class="hljs-comment"># 6likes（推荐人数）</span><br><br>        item = ZcoolItem(imgLink=imgLink,title=title,types=types,vistor=vistor,comment=comment,likes=likes)<br><br>        <span class="hljs-keyword">yield</span> item<br></code></pre></td></tr></tbody></table></figure>

<p><strong>解释：</strong> <strong><code>xpath</code>提取数据方法：</strong></p>
<table>
<thead>
<tr>
<th align="center">S.N.</th>
<th align="center">方法 &amp; 描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>extract()</code></td>
<td align="center">返回的是符合要求的所有的数据，存在一个列表里。</td>
</tr>
<tr>
<td align="center"><code>extract_first()</code></td>
<td align="center">返回的<code>hrefs </code>列表里的第一个数据。</td>
</tr>
<tr>
<td align="center"><code>get()</code></td>
<td align="center">和<code>extract_first()</code>方法返回的是一样的，都是列表里的第一个数据。</td>
</tr>
<tr>
<td align="center"><code>getall()</code></td>
<td align="center">和<code>extract()</code>方法一样，返回的都是符合要求的所有的数据，存在一个列表里。</td>
</tr>
</tbody></table>
<p>注意：</p>
<blockquote>
<p><code>get() </code>、<code>getall() </code>方法是新的方法，<code>extract()</code> 、<code>extract_first()</code>方法是旧的方法。<code>extract()</code> 、<code>extract_first()</code>方法取不到就返回<code>None</code>。<code>get()</code> 、<code>getall() </code>方法取不到就<code>raise</code>一个错误。</p>
</blockquote>
<p><strong>item实例创建（yield上面一行代码）</strong></p>
<p>这里我们之前在目录文件配置的<code>item</code>文件中已经进行了设置，对于数据存储，我们在爬虫文件中开头要导入这个类：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> zcool.items <span class="hljs-keyword">import</span> ZcoolItem<br></code></pre></td></tr></tbody></table></figure>

<p>然后使用<code>yield</code>返回数据。</p>
<p><strong>为什么使用yield而不是return</strong></p>
<p>不能使用<code>return</code>这个无容置疑，因为要翻页，使用return<code>直接</code>退出函数；而对于<code>yield</code>:在调用<code>for</code>的时候，函数内部不会立即执行，只是返回了一个生成器对象。在迭代的时候函数会开始执行，当在<code>yield</code>的时候，会返回当前值(i)。之后的这个函数会在循环中进行，直到没有下一个值。</p>
<h4 id="7-4-翻页实现批量数据采集"><a href="#7-4-翻页实现批量数据采集" class="headerlink" title="7.4 翻页实现批量数据采集"></a><strong>7.4 翻页实现批量数据采集</strong></h4><p>通过上面的代码已经可以初步实现数据采集，只不过只有第一页的，如下图所示：</p>
<p>但是我们的目标是100个页面的批量数据采集，所以代码还需要修改。针对翻页这里介绍两种方式：</p>
<p><strong>方式一</strong>：我们首先在页面中定位到下一页的按钮，如下图所示：</p>
<p>然后编写如下代码，在<code>for</code>循环完毕后。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">next_href = response.xpath(<span class="hljs-string">"//a[@class='laypage_next']/@href"</span>).extract_first()<br><span class="hljs-keyword">if</span> next_href:<br>    next_url = response.urljoin(next_href)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'*'</span> * <span class="hljs-number">60</span>)<br>    <span class="hljs-built_in">print</span>(next_url)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'*'</span> * <span class="hljs-number">60</span>)<br>    request = scrapy.Request(next_url)<br>    <span class="hljs-keyword">yield</span> request<br></code></pre></td></tr></tbody></table></figure>

<p><code>scrapy.Request(): </code>把下一页的<code>url</code>传递给<code>Request</code>函数,进行翻页循环数据采集。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">https://www.cnblogs.com/heymonkey/p/<span class="hljs-number">11818495.</span>html <span class="hljs-comment"># scrapy.Request()参考链接</span><br></code></pre></td></tr></tbody></table></figure>

<p>注意方式一只有下一页按钮它的<strong>href</strong>对应属性值和下一页的url一致才行。</p>
<p><strong>方式二</strong>：定义一个全局变量count = 0,每爬取一页数据，令其加一，构建新的url,再使用scrapy.Request() 发起请求。</p>
<p>如下图所示：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">count = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ZcSpider</span>(scrapy.Spider):<br>    name = <span class="hljs-string">'zc'</span><br>    allowed_domains = [<span class="hljs-string">'zcool.com.cn'</span>]<br>    start_urls = [<span class="hljs-string">'https://www.zcool.com.cn/home?p=1#tab_anchor'</span>] <span class="hljs-comment"># 第一页的url</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        <span class="hljs-keyword">global</span> count<br>        count += <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">for</span> div <span class="hljs-keyword">in</span> divList:<br>    <span class="hljs-comment"># ...xxx...</span><br>            <span class="hljs-keyword">yield</span> item<br><br>        next_url = <span class="hljs-string">'https://www.kuaikanmanhua.com/tag/0?state=1&amp;sort=1&amp;page={}'</span>.<span class="hljs-built_in">format</span>(count)<br>        <span class="hljs-keyword">yield</span> scrapy.Request(next_url)<br></code></pre></td></tr></tbody></table></figure>

<p>这两种方式在实际案例中择机采用。</p>
<h4 id="7-5-数据存储"><a href="#7-5-数据存储" class="headerlink" title="7.5 数据存储"></a><strong>7.5 数据存储</strong></h4><p>数据存储是在<code>pipline.py</code>中进行的,代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> itemadapter <span class="hljs-keyword">import</span> ItemAdapter<br><span class="hljs-keyword">import</span> csv<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ZcoolPipeline</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>): <br>        self.f = <span class="hljs-built_in">open</span>(<span class="hljs-string">'Zcool.csv'</span>,<span class="hljs-string">'w'</span>,encoding=<span class="hljs-string">'utf-8'</span>,newline=<span class="hljs-string">''</span>)       <span class="hljs-comment"># line1</span><br>        self.file_name = [<span class="hljs-string">'imgLink'</span>, <span class="hljs-string">'title'</span>,<span class="hljs-string">'types'</span>,<span class="hljs-string">'vistor'</span>,<span class="hljs-string">'comment'</span>,<span class="hljs-string">'likes'</span>]  <span class="hljs-comment"># line2</span><br>        self.writer = csv.DictWriter(self.f, fieldnames=self.file_name)     <span class="hljs-comment"># line3</span><br>        self.writer.writeheader()              <span class="hljs-comment"># line4</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_item</span>(<span class="hljs-params">self, item, spider</span>):<br>        self.writer.writerow(<span class="hljs-built_in">dict</span>(item))              <span class="hljs-comment"># line5</span><br>        <span class="hljs-built_in">print</span>(item)<br>        <span class="hljs-keyword">return</span> item                  <span class="hljs-comment"># line6 </span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">close_spider</span>(<span class="hljs-params">self,spider</span>):<br>        self.f.close()<br></code></pre></td></tr></tbody></table></figure>

<p>解释:</p>
<ul>
<li><code>line1</code>: 打开文件，指定方式为写，利用第3个参数把<code>csv</code>写数据时产生的空行消除</li>
<li><code>line2</code>: 设置文件第一行的字段名，注意要跟<code>spider</code>传过来的字典<code>key</code>名称相同</li>
<li><code>line3</code>: 指定文件的写入方式为<code>csv</code>字典写入，参数1为指定具体文件，参数2为指定字段名</li>
<li><code>line4</code>: 写入第一行字段名，因为只要写入一次，所以文件放在<code>__init__</code>里面</li>
<li><code>line5</code>: 写入<code>spider</code>传过来的具体数值,注意在<code>spider</code>文件中<code>yield</code>的<code>item</code>,是一个由类创建的实例对象，我们写入数据时，写入的是 字典，所以这里还要转化一下。</li>
<li><code>line6</code>: 写入完返回</li>
</ul>
<h4 id="7-6-程序运行"><a href="#7-6-程序运行" class="headerlink" title="7.6 程序运行"></a><strong>7.6 程序运行</strong></h4><p>因为之前创建了<code>start.py</code>文件,并且对它就行了初始化设置，现在运行爬虫程序不需要在控制台中输入命令：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">scrapy crawl zc(爬虫项目名)<br></code></pre></td></tr></tbody></table></figure>

<p>直接运行<code>start.py</code>文件</p>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>Scapry</category>
      </categories>
      <tags>
        <tag>Spider</tag>
      </tags>
  </entry>
  <entry>
    <title>Django基本使用</title>
    <url>/2020/10/20/Django%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="Django框架"><a href="#Django框架" class="headerlink" title="Django框架"></a><code>Django</code>框架</h1><h2 id="1、什么是Django"><a href="#1、什么是Django" class="headerlink" title="1、什么是Django"></a>1、什么是<code>Django</code></h2><p><code>Django</code>是<code>Python</code>编写的开放源代码的<code>Web</code>应用框架（源代码是开源的，遵从<code>BSD</code>协议）。采用了<code>MVC</code>的框架模式。也被称为<code>MVT(MTV)</code>模式。</p>
<h2 id="2、框架介绍"><a href="#2、框架介绍" class="headerlink" title="2、框架介绍"></a>2、框架介绍</h2><ol>
<li><p>什么是框架</p>
<p>框架就是程序的骨架、主体结构、也就是个半成品</p>
</li>
<li><p>框架的优缺点</p>
<p>可重用性、技术成熟/稳定、易扩展、易维护</p>
</li>
<li><p>Python中常见的框架</p>
<ul>
<li><code>Django</code> ：完美主义者的<code>Web</code>框架</li>
<li><code>web.py</code>和<code>Tornado</code> ：精简</li>
<li><code>Flask</code>和<code>Bottle</code>：微框架</li>
</ul>
</li>
<li><p>Web框架中的一些概念：<code>MVC</code>和<code>MVT</code></p>
</li>
<li><p><code>MVC</code>  模型–视图–控制</p>
<ol>
<li><code>M：</code>Model`  主要封装对数据库层的访问，对数据库中的数据进行增、删、改、查操作。负责和数据库交互，进行数据处理。</li>
<li><code>V</code>：<code>View</code>   用于封装结果，生成页面展示的<code>html</code>内容。接收请求，进行业务处理，返回应答。</li>
<li><code>C</code>：<code>Controller</code>  用于接收请求，处理业务逻辑，与<code>Model</code>和<code>View</code>交互，返回结果。</li>
</ol>
</li>
<li><p><code>MVT</code>  模型–视图–模板</p>
<ol>
<li><code>M</code>：<code>Model</code>  主要封装对数据库层的访问，对数据库中的数据进行增、删、改、查操作。负责和数据库交互，进行数据处理。</li>
<li><code>V</code>：<code>View</code>   用于封装结果，生成页面展示的<code>html</code>内容。接收请求，进行业务处理，返回应答。</li>
<li><code>T</code>：Template，与<code>MVC</code>中的V功能相同，负责封装构造要返回的<code>html</code>。</li>
</ol>
</li>
</ol>
<h2 id="3、Django框架的特点"><a href="#3、Django框架的特点" class="headerlink" title="3、Django框架的特点"></a>3、<code>Django</code>框架的特点</h2><ul>
<li>快速开发：帮助开发快速从概念到完成应用程序</li>
<li>安全可靠：认真对待安全性，帮助开发避免常见的安全错误</li>
<li>可伸缩性：快速灵活拓展</li>
</ul>
<h2 id="4、项目的创建和运行"><a href="#4、项目的创建和运行" class="headerlink" title="4、项目的创建和运行"></a>4、项目的创建和运行</h2><h3 id="项目的创建"><a href="#项目的创建" class="headerlink" title="项目的创建"></a>项目的创建</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">django-admin startproject *****    <span class="hljs-comment"># ***是创建的项目名称</span><br></code></pre></td></tr></tbody></table></figure>

<h3 id="项目的运行"><a href="#项目的运行" class="headerlink" title="项目的运行"></a>项目的运行</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">python manage.py runserver     <span class="hljs-comment"># 启动项目  默认启动，启动8000端口，</span><br><br><span class="hljs-comment"># 切换端口为8080</span><br>python manage.py runserver <span class="hljs-number">8080</span><br><br><span class="hljs-comment"># 更换服务器地址，请将其和端口一起传递</span><br>python manage.py runserver <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">8080</span><br><br><span class="hljs-comment"># 支持所有IP访问</span><br>ALLOWED_HOSTS = [<span class="hljs-string">"*"</span>] <br></code></pre></td></tr></tbody></table></figure>

<h2 id="5、应用的创建"><a href="#5、应用的创建" class="headerlink" title="5、应用的创建"></a>5、应用的创建</h2><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">python manage.py startapp myapp   <span class="hljs-comment"># 创建一个名为myapp的应用 </span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="6、项目的模型"><a href="#6、项目的模型" class="headerlink" title="6、项目的模型"></a>6、项目的模型</h2><h3 id="连接数据库操作"><a href="#连接数据库操作" class="headerlink" title="连接数据库操作"></a>连接数据库操作</h3><p>默认情况下，配置使用<code>SQLlite</code>。若不使用<code>SQLlite</code>作为数据库，则需要额外的配置，例如<code>USER</code>,<code>PASSWORD</code>，<code>HOST</code>必须加入</p>
<p>其中使用<code>ENGINE</code>设置为数据库后端连接。内置的数据库后端有：</p>
<ul>
<li>```python<br>django.db.backends.mysql<br>django.db.backends.sqllite3<br>django.db.backends.oracle<br>django.db.backends.postgresql<figure class="highlight 1c"><table><tbody><tr><td class="code"><pre><code class="hljs 1c"><br>在项目的`setting.py`中对`DATABASES`项进行数据库设置<br><br>```python<br><span class="hljs-meta"># 使用mysql时，必须要存在数据库</span><br><span class="hljs-meta"># 默认mysql配置</span><br>DATABASES = {<br>    'default':{<br>        'ENGINE':'django.db.backend.mysql',  <span class="hljs-meta">#</span><br>        'NAME':'demon',  <span class="hljs-meta"># 数据库名称</span><br>        'USER':'root',  <span class="hljs-meta"># 连接数据库时使用的用户名</span><br>        'PASSWORD':'',  <span class="hljs-meta"># 连接数据库时使用的密码</span><br>        'HOST':'localhost',  <span class="hljs-meta"># 连接到数据库使用的主机</span><br>        'PORT':'<span class="hljs-number">3306</span>',  <span class="hljs-meta"># 连接到数据库时使用的端口</span><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li>
</ul>
<h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><br><span class="hljs-comment"># Create your models here.</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stu</span>(models.Model):<br>    <span class="hljs-comment"># 自定义Stu表对应的Model类,对应数据库中的字段</span><br>    <span class="hljs-built_in">id</span> = models.AutoField(primary_key=<span class="hljs-literal">True</span>)<br>    name = models.CharField(max_length=<span class="hljs-number">64</span>)<br>    age = models.SmallIntegerField()<br>    sex = models.CharField(max_length=<span class="hljs-number">3</span>)<br>    classid = models.CharField(max_length=<span class="hljs-number">8</span>)<br><br>    <span class="hljs-comment"># 自定义输出格式</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">'%d:%s:%d:%s:%s'</span> % (self.<span class="hljs-built_in">id</span>, self.name, self.age, self.sex, self.classid)<br>    <br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        <span class="hljs-comment"># 定义表名，默认表名myapp_stu</span><br>        db_table = <span class="hljs-string">'stu'</span><br></code></pre></td></tr></tbody></table></figure>

<h3 id="激活模型"><a href="#激活模型" class="headerlink" title="激活模型"></a>激活模型</h3><p>要将应用程序包含在我们的程序中，我们需要在设置中添加配置类的引用<code>INSTALLED_APPS </code></p>
<p><code>MysqlConfig</code>是在<code>myapp/apps.py</code>中，所以需要添加<code>myapp.apps.MyappConfig</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在INSTALLED_APPS中添加</span><br>myapp.apps.MyappConfig  <span class="hljs-comment"># 或者直接写myapp</span><br>INSTALLED_APPS = [<br>    <span class="hljs-string">'django.contrib.admin'</span>,<br>    <span class="hljs-string">'django.contrib.auth'</span>,<br>    <span class="hljs-string">'django.contrib.contenttypes'</span>,<br>    <span class="hljs-string">'django.contrib.sessions'</span>,<br>    <span class="hljs-string">'django.contrib.messages'</span>,<br>    <span class="hljs-string">'django.contrib.staticfiles'</span>,<br>    <span class="hljs-string">'myapp.apps.MyappConfig'</span>  <span class="hljs-comment"># 或者直接写myapp</span><br>]<br></code></pre></td></tr></tbody></table></figure>

<h3 id="使用（两种）"><a href="#使用（两种）" class="headerlink" title="使用（两种）"></a>使用（两种）</h3><ul>
<li>进入交互式的<code>Python Shell</code>，使用<code>Django</code>提供的<code>API</code></li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql基础语法</title>
    <url>/2020/03/22/Mysql/</url>
    <content><![CDATA[<h2 id="关系-型-数据库："><a href="#关系-型-数据库：" class="headerlink" title="关系(型)数据库："></a>关系(型)数据库：</h2><p><code>MySQL</code>、<code>Oracle</code>、<code>SQLServer</code>、<code>MariaDB</code>、<code>DB2</code>、<code>PostgreSQL</code>、<code>SQLite</code>（嵌入式数据库）等</p>
<p>非关系型数据库：<code>NoSQL</code>数据库/<code>NewSQL</code>数据库</p>
<ol>
<li><p>关系代数：关系运算  ——&gt; 集合运算 / 关系运算 / (一阶)谓词逻辑</p>
<ol>
<li><p>交集、 并集、 差集、 笛卡尔积、 子集、 超级 、 存在</p>
</li>
<li><p>关系运算：投影、别名、选择、连接、排除、与、或、非</p>
</li>
<li><p>all  /  any  / exists</p>
</li>
</ol>
</li>
<li><p>具体表象：使用二维表保存数据</p>
<ol>
<li>行： 记录 —— 元组(tuple)</li>
<li>列： 字段 —— 属性（attribute）</li>
</ol>
</li>
<li><p>编程语言：SQL (Structured  Query  Language) ——结构化查询语言</p>
<ol>
<li>DDL： 数据定义语言 —— <code>creat  </code>（创建）  /  <code>drop </code>（删除）  /  <code>alter  </code>（修改）</li>
<li>DML：数据操作语言 ——  <code>insert  </code>（插入） /  <code>delete  </code>（删除）  /  <code>updata  </code>（更新）</li>
<li>DQL：数据查询语言 ——  <code>select  </code>（选择）</li>
<li>DCL：数据控制语言  —— <code>grant  </code>（授予） / <code>recoke </code>（召回）</li>
</ol>
</li>
<li><p>MySQL命令行工具——数据库操作</p>
<ol>
<li>显示所有数据库：<code>show databases;</code></li>
<li>创建数据库：<code>create database school default charset utf8mb4; </code> 创建数据库并设置默认字符集为<code>utf8mb4</code></li>
<li>删除数据库：<code>drop database if exists school;</code></li>
<li>修改数据库：<code>alter database school default charset linet1;</code>修改数据库宁设置默认字符集为```</li>
<li><code>切换数据库：</code>use  school;`</li>
</ol>
</li>
<li><p>MySQL命令行工具——数据表操作</p>
<ol>
<li>显示数据表：<code>show tables;</code></li>
<li>创建数据表：<code>create table 表名(字段名);</code></li>
<li>查看表结构：<code>desc tb_student;</code> </li>
<li>删除表：<code>drop table if exists tb_student;</code></li>
<li>修改表：<ol>
<li>添加列：<code>alter table tb_student add column stu_tel varchar(20) not null;</code>表中有数据不能进行非空约束</li>
<li>删除指定列：<code>alter table tb_student drop column stu_addr;</code></li>
</ol>
</li>
<li>修改指定列：<ol>
<li><code>alter table tb_student modify column stu_gender char(1) default "M";</code>只改变列的类型</li>
<li><code>alter table tb_student change column stu_gender stu_sex  char(1) not null default "男";</code>  修改类型</li>
</ol>
</li>
<li>添加约束条件：<ol>
<li>添加唯一性约束：<code>alter table tb_student add constraint uk_student_tel unique (stu_tel);</code>   <code>add constraint</code>添加约束， <code>uk_student_tel </code>是起的名，便于后续操作，后面同理</li>
<li>添加检查约束：<code>alter table tb_student add constraint ck_student_tel check (stu_birth &gt;= '1990-1-1');</code>  </li>
<li>删除约束条件：<code>alter table tb_student drop constraint uk_student_tel;</code> 删除添加约束是起的名</li>
</ol>
</li>
<li>约束<ol>
<li>非空约束：<code>not null</code>  保证字段的值不能为空</li>
<li>默认约束：<code>default</code> 默认约束，保证字段总会有值，即使没有插入值，都会有默认值！</li>
<li>唯一性约束：<code>unique</code>保证唯一性但是可以为空，比如座位号</li>
<li>检查性约束：<code>check</code>检查性约束</li>
<li>外键约束：<code>foreign key</code>同时保证唯一性和非空</li>
<li>主键约束：<code>primary key</code>用于限制两个表的关系，保证从表该字段的值来自于主表相关联的字段的值！</li>
<li>引擎<ol>
<li><code>engine = innodb</code>使用<code>innodb</code>引擎</li>
</ol>
</li>
</ol>
</li>
<li>数据类型：<ol>
<li>查看数据类型帮助：<code>?data types;</code></li>
<li>整数：<code>int / intrger</code> (32位)   ——&gt; <code>bigint</code> (64位 )/  <code>samllint</code>  （16位）/<code>tinyint</code> (8位)  ——&gt; <code>undignet</code>无长度整数</li>
<li>小数：<code>float / double</code> ——&gt; <code>decimal</code></li>
<li>日期和时间：<code>date</code> /  <code>time </code> /  <code>datetime</code>   ——&gt;   <code>timestamp</code></li>
<li>字符串：<code>varchar  /  char</code></li>
<li>二进制文件：<code>bolb</code></li>
<li>JSON：<code>json</code> 保存json数据或json对象</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>SQL</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Jieba的学习和使用</title>
    <url>/2020/06/13/jieba%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="jieba"><a href="#jieba" class="headerlink" title="jieba"></a>jieba</h1><p>转载至：<a href="https://github.com/fxsjy/jieba">原文地址</a></p>
<p>“结巴”中文分词：做最好的 Python 中文分词组件</p>
<p><em>“Jieba” (Chinese for “to stutter”) Chinese text segmentation: built to be the best Python Chinese word segmentation module.</em></p>
<ul>
<li><em>Scroll down for English documentation.</em></li>
</ul>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li>支持四种分词模式：<ul>
<li>精确模式，试图将句子最精确地切开，适合文本分析；</li>
<li>全模式，把句子中所有的可以成词的词语都扫描出来, 速度非常快，但是不能解决歧义；</li>
<li>搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。</li>
<li>paddle模式，利用PaddlePaddle深度学习框架，训练序列标注（双向GRU）网络模型实现分词。同时支持词性标注。paddle模式使用需安装paddlepaddle-tiny，<code>pip install paddlepaddle-tiny==1.6.1</code>。目前paddle模式支持jieba v0.40及以上版本。jieba v0.40以下版本，请升级jieba，<code>pip install jieba --upgrade</code> 。<a href="https://www.paddlepaddle.org.cn/">PaddlePaddle官网</a></li>
</ul>
</li>
<li>支持繁体分词</li>
<li>支持自定义词典</li>
<li>MIT 授权协议</li>
</ul>
<h1 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h1><p>代码对 Python 2/3 均兼容</p>
<ul>
<li>全自动安装：<code>easy_install jieba</code> 或者 <code>pip install jieba</code> / <code>pip3 install jieba</code></li>
<li>半自动安装：先下载 <a href="http://pypi.python.org/pypi/jieba/">http://pypi.python.org/pypi/jieba/</a> ，解压后运行 <code>python setup.py install</code></li>
<li>手动安装：将 jieba 目录放置于当前目录或者 site-packages 目录</li>
<li>通过 <code>import jieba</code> 来引用</li>
<li>如果需要使用paddle模式下的分词和词性标注功能，请先安装paddlepaddle-tiny，<code>pip install paddlepaddle-tiny==1.6.1</code>。</li>
</ul>
<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><ul>
<li>基于前缀词典实现高效的词图扫描，生成句子中汉字所有可能成词情况所构成的有向无环图 (DAG)</li>
<li>采用了动态规划查找最大概率路径, 找出基于词频的最大切分组合</li>
<li>对于未登录词，采用了基于汉字成词能力的 HMM 模型，使用了 Viterbi 算法</li>
</ul>
<h1 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h1><h3 id="分词："><a href="#分词：" class="headerlink" title="分词："></a>分词：</h3><ul>
<li><code>jieba.cut</code> 方法接受四个输入参数: 需要分词的字符串；cut_all 参数用来控制是否采用全模式；HMM 参数用来控制是否使用 HMM 模型；use_paddle 参数用来控制是否使用paddle模式下的分词模式，paddle模式采用延迟加载方式，通过enable_paddle接口安装paddlepaddle-tiny，并且import相关代码；</li>
<li><code>jieba.cut_for_search</code> 方法接受两个参数：需要分词的字符串；是否使用 HMM 模型。该方法适合用于搜索引擎构建倒排索引的分词，粒度比较细</li>
<li>待分词的字符串可以是 unicode 或 UTF-8 字符串、GBK 字符串。注意：不建议直接输入 GBK 字符串，可能无法预料地错误解码成 UTF-8</li>
<li><code>jieba.cut</code> 以及 <code>jieba.cut_for_search</code> 返回的结构都是一个可迭代的 generator，可以使用 for 循环来获得分词后得到的每一个词语(unicode)，或者用</li>
<li><code>jieba.lcut</code> 以及 <code>jieba.lcut_for_search</code> 直接返回 list</li>
<li><code>jieba.Tokenizer(dictionary=DEFAULT_DICT)</code> 新建自定义分词器，可用于同时使用不同词典。<code>jieba.dt</code> 为默认分词器，所有全局分词相关函数都是该分词器的映射。</li>
</ul>
<p>代码示例</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># encoding=utf-8</span><br><span class="hljs-keyword">import</span> jieba<br><br>jieba.enable_paddle()<span class="hljs-comment"># 启动paddle模式。 0.40版之后开始支持，早期版本不支持</span><br>strs=[<span class="hljs-string">"我来到北京清华大学"</span>,<span class="hljs-string">"乒乓球拍卖完了"</span>,<span class="hljs-string">"中国科学技术大学"</span>]<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">str</span> <span class="hljs-keyword">in</span> strs:<br>    seg_list = jieba.cut(<span class="hljs-built_in">str</span>,use_paddle=<span class="hljs-literal">True</span>) <span class="hljs-comment"># 使用paddle模式</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"Paddle Mode: "</span> + <span class="hljs-string">'/'</span>.join(<span class="hljs-built_in">list</span>(seg_list)))<br><br>seg_list = jieba.cut(<span class="hljs-string">"我来到北京清华大学"</span>, cut_all=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"Full Mode: "</span> + <span class="hljs-string">"/ "</span>.join(seg_list))  <span class="hljs-comment"># 全模式</span><br><br>seg_list = jieba.cut(<span class="hljs-string">"我来到北京清华大学"</span>, cut_all=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"Default Mode: "</span> + <span class="hljs-string">"/ "</span>.join(seg_list))  <span class="hljs-comment"># 精确模式</span><br><br>seg_list = jieba.cut(<span class="hljs-string">"他来到了网易杭研大厦"</span>)  <span class="hljs-comment"># 默认是精确模式</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">", "</span>.join(seg_list))<br><br>seg_list = jieba.cut_for_search(<span class="hljs-string">"小明硕士毕业于中国科学院计算所，后在日本京都大学深造"</span>)  <span class="hljs-comment"># 搜索引擎模式</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">", "</span>.join(seg_list))<br></code></pre></td></tr></tbody></table></figure>

<p>输出:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">【全模式】: 我/ 来到/ 北京/ 清华/ 清华大学/ 华大/ 大学<br><br>【精确模式】: 我/ 来到/ 北京/ 清华大学<br><br>【新词识别】：他, 来到, 了, 网易, 杭研, 大厦    (此处，“杭研”并没有在词典中，但是也被Viterbi算法识别出来了)<br><br>【搜索引擎模式】： 小明, 硕士, 毕业, 于, 中国, 科学, 学院, 科学院, 中国科学院, 计算, 计算所, 后, 在, 日本, 京都, 大学, 日本京都大学, 深造<br></code></pre></td></tr></tbody></table></figure>

<h3 id="添加自定义词典"><a href="#添加自定义词典" class="headerlink" title="添加自定义词典"></a>添加自定义词典</h3><h3 id="载入词典"><a href="#载入词典" class="headerlink" title="载入词典"></a>载入词典</h3><ul>
<li>开发者可以指定自己自定义的词典，以便包含 jieba 词库里没有的词。虽然 jieba 有新词识别能力，但是自行添加新词可以保证更高的正确率</li>
<li>用法： jieba.load_userdict(file_name) # file_name 为文件类对象或自定义词典的路径</li>
<li>词典格式和 <code>dict.txt</code> 一样，一个词占一行；每一行分三部分：词语、词频（可省略）、词性（可省略），用空格隔开，顺序不可颠倒。<code>file_name</code> 若为路径或二进制方式打开的文件，则文件必须为 UTF-8 编码。</li>
<li>词频省略时使用自动计算的能保证分出该词的词频。</li>
</ul>
<p><strong>例如：</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">创新办 <span class="hljs-number">3</span> i<br>云计算 <span class="hljs-number">5</span><br>凱特琳 nz<br>台中<br></code></pre></td></tr></tbody></table></figure>

<ul>
<li>更改分词器（默认为 <code>jieba.dt</code>）的 <code>tmp_dir</code> 和 <code>cache_file</code> 属性，可分别指定缓存文件所在的文件夹及其文件名，用于受限的文件系统。</li>
<li>范例：<ul>
<li>自定义词典：<a href="https://github.com/fxsjy/jieba/blob/master/test/userdict.txt">https://github.com/fxsjy/jieba/blob/master/test/userdict.txt</a></li>
<li>用法示例：<a href="https://github.com/fxsjy/jieba/blob/master/test/test_userdict.py">https://github.com/fxsjy/jieba/blob/master/test/test_userdict.py</a><ul>
<li>之前： 李小福 / 是 / 创新 / 办 / 主任 / 也 / 是 / 云 / 计算 / 方面 / 的 / 专家 /</li>
<li>加载自定义词库后：　李小福 / 是 / 创新办 / 主任 / 也 / 是 / 云计算 / 方面 / 的 / 专家 /</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="调整词典"><a href="#调整词典" class="headerlink" title="调整词典"></a>调整词典</h3><ul>
<li>使用 <code>add_word(word, freq=None, tag=None)</code> 和 <code>del_word(word)</code> 可在程序中动态修改词典。</li>
<li>使用 <code>suggest_freq(segment, tune=True)</code> 可调节单个词语的词频，使其能（或不能）被分出来。</li>
<li>注意：自动计算的词频在使用 HMM 新词发现功能时可能无效。</li>
</ul>
<p>代码示例：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">'/'</span>.join(jieba.cut(<span class="hljs-string">'如果放到post中将出错。'</span>, HMM=<span class="hljs-literal">False</span>)))<br>如果/放到/post/中将/出错/。<br><span class="hljs-meta">&gt;&gt;&gt; </span>jieba.suggest_freq((<span class="hljs-string">'中'</span>, <span class="hljs-string">'将'</span>), <span class="hljs-literal">True</span>)<br><span class="hljs-number">494</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">'/'</span>.join(jieba.cut(<span class="hljs-string">'如果放到post中将出错。'</span>, HMM=<span class="hljs-literal">False</span>)))<br>如果/放到/post/中/将/出错/。<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">'/'</span>.join(jieba.cut(<span class="hljs-string">'「台中」正确应该不会被切开'</span>, HMM=<span class="hljs-literal">False</span>)))<br>「/台/中/」/正确/应该/不会/被/切开<br><span class="hljs-meta">&gt;&gt;&gt; </span>jieba.suggest_freq(<span class="hljs-string">'台中'</span>, <span class="hljs-literal">True</span>)<br><span class="hljs-number">69</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">'/'</span>.join(jieba.cut(<span class="hljs-string">'「台中」正确应该不会被切开'</span>, HMM=<span class="hljs-literal">False</span>)))<br>「/台中/」/正确/应该/不会/被/切开<br></code></pre></td></tr></tbody></table></figure>

<ul>
<li>“通过用户自定义词典来增强歧义纠错能力” — <a href="https://github.com/fxsjy/jieba/issues/14">#14</a></li>
</ul>
<ol>
<li>关键词提取</li>
</ol>
<hr>
<h3 id="基于-TF-IDF-算法的关键词抽取"><a href="#基于-TF-IDF-算法的关键词抽取" class="headerlink" title="基于 TF-IDF 算法的关键词抽取"></a>基于 TF-IDF 算法的关键词抽取</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba.analyse<br></code></pre></td></tr></tbody></table></figure>

<ul>
<li>jieba.analyse.extract_tags(sentence, topK=20, withWeight=False, allowPOS=())<ul>
<li>sentence 为待提取的文本</li>
<li>topK 为返回几个 TF/IDF 权重最大的关键词，默认值为 20</li>
<li>withWeight 为是否一并返回关键词权重值，默认值为 False</li>
<li>allowPOS 仅包括指定词性的词，默认值为空，即不筛选</li>
</ul>
</li>
<li>jieba.analyse.TFIDF(idf_path=None) 新建 TFIDF 实例，idf_path 为 IDF 频率文件</li>
</ul>
<p>代码示例 （关键词提取）</p>
<p><a href="https://github.com/fxsjy/jieba/blob/master/test/extract_tags.py">https://github.com/fxsjy/jieba/blob/master/test/extract_tags.py</a></p>
<p>关键词提取所使用逆向文件频率（IDF）文本语料库可以切换成自定义语料库的路径</p>
<ul>
<li>用法： jieba.analyse.set_idf_path(file_name) # file_name为自定义语料库的路径</li>
<li>自定义语料库示例：<a href="https://github.com/fxsjy/jieba/blob/master/extra_dict/idf.txt.big">https://github.com/fxsjy/jieba/blob/master/extra_dict/idf.txt.big</a></li>
<li>用法示例：<a href="https://github.com/fxsjy/jieba/blob/master/test/extract_tags_idfpath.py">https://github.com/fxsjy/jieba/blob/master/test/extract_tags_idfpath.py</a></li>
</ul>
<p>关键词提取所使用停止词（Stop Words）文本语料库可以切换成自定义语料库的路径</p>
<ul>
<li>用法： jieba.analyse.set_stop_words(file_name) # file_name为自定义语料库的路径</li>
<li>自定义语料库示例：<a href="https://github.com/fxsjy/jieba/blob/master/extra_dict/stop_words.txt">https://github.com/fxsjy/jieba/blob/master/extra_dict/stop_words.txt</a></li>
<li>用法示例：<a href="https://github.com/fxsjy/jieba/blob/master/test/extract_tags_stop_words.py">https://github.com/fxsjy/jieba/blob/master/test/extract_tags_stop_words.py</a></li>
</ul>
<p>关键词一并返回关键词权重值示例</p>
<ul>
<li>用法示例：<a href="https://github.com/fxsjy/jieba/blob/master/test/extract_tags_with_weight.py">https://github.com/fxsjy/jieba/blob/master/test/extract_tags_with_weight.py</a></li>
</ul>
<h3 id="基于-TextRank-算法的关键词抽取"><a href="#基于-TextRank-算法的关键词抽取" class="headerlink" title="基于 TextRank 算法的关键词抽取"></a>基于 TextRank 算法的关键词抽取</h3><ul>
<li>jieba.analyse.textrank(sentence, topK=20, withWeight=False, allowPOS=(‘ns’, ‘n’, ‘vn’, ‘v’)) 直接使用，接口相同，注意默认过滤词性。</li>
<li>jieba.analyse.TextRank() 新建自定义 TextRank 实例</li>
</ul>
<p>算法论文： <a href="http://web.eecs.umich.edu/~mihalcea/papers/mihalcea.emnlp04.pdf">TextRank: Bringing Order into Texts</a></p>
<h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想:"></a>基本思想:</h4><ol>
<li>将待抽取关键词的文本进行分词</li>
<li>以固定窗口大小(默认为5，通过span属性调整)，词之间的共现关系，构建图</li>
<li>计算图中节点的PageRank，注意是无向带权图</li>
</ol>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例:"></a>使用示例:</h4><p>见 <a href="https://github.com/fxsjy/jieba/blob/master/test/demo.py">test/demo.py</a></p>
<ol>
<li>词性标注</li>
</ol>
<hr>
<ul>
<li><code>jieba.posseg.POSTokenizer(tokenizer=None)</code> 新建自定义分词器，<code>tokenizer</code> 参数可指定内部使用的 <code>jieba.Tokenizer</code> 分词器。<code>jieba.posseg.dt</code> 为默认词性标注分词器。</li>
<li>标注句子分词后每个词的词性，采用和 ictclas 兼容的标记法。</li>
<li>除了jieba默认分词模式，提供paddle模式下的词性标注功能。paddle模式采用延迟加载方式，通过enable_paddle()安装paddlepaddle-tiny，并且import相关代码；</li>
<li>用法示例</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> jieba<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> jieba.posseg <span class="hljs-keyword">as</span> pseg<br><span class="hljs-meta">&gt;&gt;&gt; </span>words = pseg.cut(<span class="hljs-string">"我爱北京天安门"</span>) <span class="hljs-comment">#jieba默认模式</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>jieba.enable_paddle() <span class="hljs-comment">#启动paddle模式。 0.40版之后开始支持，早期版本不支持</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>words = pseg.cut(<span class="hljs-string">"我爱北京天安门"</span>,use_paddle=<span class="hljs-literal">True</span>) <span class="hljs-comment">#paddle模式</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> word, flag <span class="hljs-keyword">in</span> words:<br><span class="hljs-meta">... </span>   <span class="hljs-built_in">print</span>(<span class="hljs-string">'%s %s'</span> % (word, flag))<br>...<br>我 r<br>爱 v<br>北京 ns<br>天安门 ns<br></code></pre></td></tr></tbody></table></figure>

<p>paddle模式词性标注对应表如下：</p>
<p>paddle模式词性和专名类别标签集合如下表，其中词性标签 24 个（小写字母），专名类别标签 4 个（大写字母）。</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>含义</th>
<th>标签</th>
<th>含义</th>
<th>标签</th>
<th>含义</th>
<th>标签</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>n</td>
<td>普通名词</td>
<td>f</td>
<td>方位名词</td>
<td>s</td>
<td>处所名词</td>
<td>t</td>
<td>时间</td>
</tr>
<tr>
<td>nr</td>
<td>人名</td>
<td>ns</td>
<td>地名</td>
<td>nt</td>
<td>机构名</td>
<td>nw</td>
<td>作品名</td>
</tr>
<tr>
<td>nz</td>
<td>其他专名</td>
<td>v</td>
<td>普通动词</td>
<td>vd</td>
<td>动副词</td>
<td>vn</td>
<td>名动词</td>
</tr>
<tr>
<td>a</td>
<td>形容词</td>
<td>ad</td>
<td>副形词</td>
<td>an</td>
<td>名形词</td>
<td>d</td>
<td>副词</td>
</tr>
<tr>
<td>m</td>
<td>数量词</td>
<td>q</td>
<td>量词</td>
<td>r</td>
<td>代词</td>
<td>p</td>
<td>介词</td>
</tr>
<tr>
<td>c</td>
<td>连词</td>
<td>u</td>
<td>助词</td>
<td>xc</td>
<td>其他虚词</td>
<td>w</td>
<td>标点符号</td>
</tr>
<tr>
<td>PER</td>
<td>人名</td>
<td>LOC</td>
<td>地名</td>
<td>ORG</td>
<td>机构名</td>
<td>TIME</td>
<td>时间</td>
</tr>
</tbody></table>
<ol>
<li>并行分词</li>
</ol>
<hr>
<ul>
<li>原理：将目标文本按行分隔后，把各行文本分配到多个 Python 进程并行分词，然后归并结果，从而获得分词速度的可观提升</li>
<li>基于 python 自带的 multiprocessing 模块，目前暂不支持 Windows</li>
<li>用法：<ul>
<li><code>jieba.enable_parallel(4)</code> # 开启并行分词模式，参数为并行进程数</li>
<li><code>jieba.disable_parallel()</code> # 关闭并行分词模式</li>
</ul>
</li>
<li>例子：<a href="https://github.com/fxsjy/jieba/blob/master/test/parallel/test_file.py">https://github.com/fxsjy/jieba/blob/master/test/parallel/test_file.py</a></li>
<li>实验结果：在 4 核 3.4GHz Linux 机器上，对金庸全集进行精确分词，获得了 1MB/s 的速度，是单进程版的 3.3 倍。</li>
<li><strong>注意</strong>：并行分词仅支持默认分词器 <code>jieba.dt</code> 和 <code>jieba.posseg.dt</code>。</li>
</ul>
<ol>
<li>Tokenize：返回词语在原文的起止位置</li>
</ol>
<hr>
<ul>
<li>注意，输入参数只接受 unicode</li>
<li>默认模式</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">result = jieba.tokenize(<span class="hljs-string">u'永和服装饰品有限公司'</span>)<br><span class="hljs-keyword">for</span> tk <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"word %s\t\t start: %d \t\t end:%d"</span> % (tk[<span class="hljs-number">0</span>],tk[<span class="hljs-number">1</span>],tk[<span class="hljs-number">2</span>]))<br>word 永和                start: <span class="hljs-number">0</span>                end:<span class="hljs-number">2</span><br>word 服装                start: <span class="hljs-number">2</span>                end:<span class="hljs-number">4</span><br>word 饰品                start: <span class="hljs-number">4</span>                end:<span class="hljs-number">6</span><br>word 有限公司            start: <span class="hljs-number">6</span>                end:<span class="hljs-number">10</span><br></code></pre></td></tr></tbody></table></figure>

<ul>
<li>搜索模式</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">result = jieba.tokenize(<span class="hljs-string">u'永和服装饰品有限公司'</span>, mode=<span class="hljs-string">'search'</span>)<br><span class="hljs-keyword">for</span> tk <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"word %s\t\t start: %d \t\t end:%d"</span> % (tk[<span class="hljs-number">0</span>],tk[<span class="hljs-number">1</span>],tk[<span class="hljs-number">2</span>]))<br>word 永和                start: <span class="hljs-number">0</span>                end:<span class="hljs-number">2</span><br>word 服装                start: <span class="hljs-number">2</span>                end:<span class="hljs-number">4</span><br>word 饰品                start: <span class="hljs-number">4</span>                end:<span class="hljs-number">6</span><br>word 有限                start: <span class="hljs-number">6</span>                end:<span class="hljs-number">8</span><br>word 公司                start: <span class="hljs-number">8</span>                end:<span class="hljs-number">10</span><br>word 有限公司            start: <span class="hljs-number">6</span>                end:<span class="hljs-number">10</span><br></code></pre></td></tr></tbody></table></figure>

<ol>
<li>ChineseAnalyzer for Whoosh 搜索引擎</li>
</ol>
<hr>
<ul>
<li>引用： <code>from jieba.analyse import ChineseAnalyzer</code></li>
<li>用法示例：<a href="https://github.com/fxsjy/jieba/blob/master/test/test_whoosh.py">https://github.com/fxsjy/jieba/blob/master/test/test_whoosh.py</a></li>
</ul>
<ol>
<li>命令行分词</li>
</ol>
<hr>
<p>使用示例：<code>python -m jieba news.txt &gt; cut_result.txt</code></p>
<p>命令行选项（翻译）：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">使用: python -m jieba [options] filename<br><br>结巴命令行界面。<br><br>固定参数:<br>  filename              输入文件<br><br>可选参数:<br>  -h, --<span class="hljs-built_in">help</span>            显示此帮助信息并退出<br>  -d [DELIM], --delimiter [DELIM]<br>                        使用 DELIM 分隔词语，而不是用默认的<span class="hljs-string">' / '</span>。<br>                        若不指定 DELIM，则使用一个空格分隔。<br>  -p [DELIM], --pos [DELIM]<br>                        启用词性标注；如果指定 DELIM，词语和词性之间<br>                        用它分隔，否则用 _ 分隔<br>  -D DICT, --<span class="hljs-built_in">dict</span> DICT  使用 DICT 代替默认词典<br>  -u USER_DICT, --user-<span class="hljs-built_in">dict</span> USER_DICT<br>                        使用 USER_DICT 作为附加词典，与默认词典或自定义词典配合使用<br>  -a, --cut-<span class="hljs-built_in">all</span>         全模式分词（不支持词性标注）<br>  -n, --no-hmm          不使用隐含马尔可夫模型<br>  -q, --quiet           不输出载入信息到 STDERR<br>  -V, --version         显示版本信息并退出<br><br>如果没有指定文件名，则使用标准输入。<br></code></pre></td></tr></tbody></table></figure>

<p><code>--help</code> 选项输出：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">$&gt; python -m jieba --<span class="hljs-built_in">help</span><br>Jieba command line interface.<br><br>positional arguments:<br>  filename              <span class="hljs-built_in">input</span> file<br><br>optional arguments:<br>  -h, --<span class="hljs-built_in">help</span>            show this <span class="hljs-built_in">help</span> message <span class="hljs-keyword">and</span> exit<br>  -d [DELIM], --delimiter [DELIM]<br>                        use DELIM instead of <span class="hljs-string">' / '</span> <span class="hljs-keyword">for</span> word delimiter; <span class="hljs-keyword">or</span> a<br>                        space <span class="hljs-keyword">if</span> it <span class="hljs-keyword">is</span> used without DELIM<br>  -p [DELIM], --pos [DELIM]<br>                        enable POS tagging; <span class="hljs-keyword">if</span> DELIM <span class="hljs-keyword">is</span> specified, use DELIM<br>                        instead of <span class="hljs-string">'_'</span> <span class="hljs-keyword">for</span> POS delimiter<br>  -D DICT, --<span class="hljs-built_in">dict</span> DICT  use DICT <span class="hljs-keyword">as</span> dictionary<br>  -u USER_DICT, --user-<span class="hljs-built_in">dict</span> USER_DICT<br>                        use USER_DICT together <span class="hljs-keyword">with</span> the default dictionary <span class="hljs-keyword">or</span><br>                        DICT (<span class="hljs-keyword">if</span> specified)<br>  -a, --cut-<span class="hljs-built_in">all</span>         full pattern cutting (ignored <span class="hljs-keyword">with</span> POS tagging)<br>  -n, --no-hmm          don<span class="hljs-string">'t use the Hidden Markov Model</span><br><span class="hljs-string">  -q, --quiet           don'</span>t <span class="hljs-built_in">print</span> loading messages to stderr<br>  -V, --version         show program<span class="hljs-string">'s version number and exit</span><br><span class="hljs-string"></span><br><span class="hljs-string">If no filename specified, use STDIN instead.</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="延迟加载机制"><a href="#延迟加载机制" class="headerlink" title="延迟加载机制"></a>延迟加载机制</h2><p>jieba 采用延迟加载，<code>import jieba</code> 和 <code>jieba.Tokenizer()</code> 不会立即触发词典的加载，一旦有必要才开始加载词典构建前缀字典。如果你想手工初始 jieba，也可以手动初始化。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<br>jieba.initialize()  <span class="hljs-comment"># 手动初始化（可选）</span><br></code></pre></td></tr></tbody></table></figure>

<p>在 0.28 之前的版本是不能指定主词典的路径的，有了延迟加载机制后，你可以改变主词典的路径:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">jieba.set_dictionary(<span class="hljs-string">'data/dict.txt.big'</span>)<br></code></pre></td></tr></tbody></table></figure>



]]></content>
      <categories>
        <category>第三方库</category>
        <category>jieba</category>
      </categories>
      <tags>
        <tag>Spider</tag>
      </tags>
  </entry>
</search>
