<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>vim语法</title>
    <url>/2022/06/02/Vim/</url>
    <content><![CDATA[<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><ul>
<li><p>末行模式</p>
<ul>
<li><code>set nu</code> - 显示行号</li>
<li><code>set ts=4</code> - 设置制表键的空格数</li>
<li><code>set expandtab </code>- 将制表键扩展为空格</li>
<li><code> set autoindent</code> - 自动缩进</li>
<li><code>set ruler</code>：显示光标位置</li>
<li><code>syntax on / off</code>：打开 / 关闭语法高亮</li>
</ul>
</li>
<li><p>命令模式</p>
<ol>
<li><p><code>ZZ</code> - 保存退出</p>
</li>
<li><p><code>i / I / a / A/ o / O</code> - 进入编辑模式</p>
</li>
<li><p>移动光标</p>
<ol>
<li><code>h j k l </code> ： 左  /  下  /   上  /  右</li>
<li><code>gg / G / 100G </code>：开始 / 结尾</li>
<li><code>0 /$：</code>语句前 / 后</li>
<li><code>w / e</code>：单词的开始 / 结尾</li>
<li><code>ctrl + f / b / e / y</code>：向后一页 / 向前一页  / 向后一行 / 向前一行</li>
</ol>
</li>
<li><p>内容编辑</p>
<ol>
<li>删除 ： <ol>
<li><code>dd </code>：删除整行</li>
<li><code>d$</code>：从光标位置到行尾</li>
<li><code>d0</code>：从光标位置到行首</li>
<li><code>dw</code>：删除光标所在的单词</li>
<li><code>%d</code>：删除所有内容</li>
</ol>
</li>
<li>撤销：<code>u</code></li>
<li>恢复：<code>ctrl + r</code></li>
<li>执行上一次命令：<code>.</code></li>
<li>复制粘贴：<ol>
<li><code>yy  /  p</code></li>
<li><code>v -- Visual -- 移动光标选中内容 -- y -- p</code>： 进入可视模式，选中复制内容，粘贴</li>
</ol>
</li>
</ol>
</li>
<li><p>文件权限</p>
<ol>
<li>r ：读权限</li>
<li>w ：写权限</li>
<li>x ：执行权限</li>
<li>修改文件权限： <ol>
<li><code>chmod u + / -x 文件 </code>：给文件所有者添加/删除执行权限</li>
<li><code>chmod g + / - x 文件</code>：给同组用户添加/删除执行权限</li>
<li><code>chmod o + / - r文件</code>：给其他用户添加/删除执行权限</li>
</ol>
</li>
</ol>
<blockquote>
<p><code>rw-               r--            r--</code></p>
<p>文件所有者               同组用户                 其他用户</p>
</blockquote>
</li>
</ol>
</li>
</ul>
<p>​				</p>
<h2 id="vim配置文件"><a href="#vim配置文件" class="headerlink" title="vim配置文件"></a>vim配置文件</h2><p>切换至用户主目录下：4‘</p>
<ul>
<li><code>vim .vimrc</code> ： 编辑配置文件</li>
<li>添加配置设置：<ul>
<li><code>set nu</code> - 显示行号</li>
<li><code>set ts=4</code> - 设置制表键的空格数</li>
<li><code>set expandtab </code>- 将制表键扩展为空格</li>
<li><code> set autoindent</code> - 自动缩进</li>
<li><code>set ruler</code>：显示光标位置</li>
<li><code>syntax on / off</code>：打开 / 关闭语法高亮</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础语法</title>
    <url>/2022/06/02/linux%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="linux基础"><a href="#linux基础" class="headerlink" title="linux基础"></a>linux基础</h2><p>命令格式：<code>命令 [-命令参数] [-命令对象]</code></p>
<h4 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h4><p>​	<code>ctrl + c</code>: 终止进程（结束命令的执行）</p>
<p>​	<code>ctrl + w</code>: 删除光标所在的位置的单词</p>
<p>​	<code>ctrl + a</code>: 光标移动到文本开头</p>
<p>​	<code>	ctrl + e</code>: 光标移动到文本末尾</p>
<p>​	<code>	ctrl + u</code>: 删除光标之前的内容直至行首</p>
<p>​	<code>ctrl + k</code>: 删除光标之后的内容直至行尾</p>
<p>​	<code>ctrl + d</code>: 输入结束</p>
<p>​	</p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>ls [选项] [目录名] / dir</code></td>
<td>查看目录下的文件和文件夹</td>
<td><code>-a / -l</code></td>
<td>查看所有/查看长格式</td>
</tr>
<tr>
<td><code>pwd [选项]</code></td>
<td>打印当前工作目录</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>history </code></td>
<td>查看历史命令 /  清空历史记录</td>
<td><code>-c</code></td>
<td>清空历史记录</td>
</tr>
<tr>
<td><code>reboot / shutdown</code></td>
<td>重启/关闭服务器</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>clear</code></td>
<td>清空控制台上的输出</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>who / w</code></td>
<td>查看连接用户的基本信息</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>who am  i</code></td>
<td>查看自己</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>last</code></td>
<td>最近登录</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>lastb</code></td>
<td>最近登录且失败</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>date</code></td>
<td>查看当前日期时间</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>man</code></td>
<td>查看命令的i详细手册</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>cd ...</code></td>
<td>切换路径</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>file</code></td>
<td>查看文件属性</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><table>
<thead>
<tr>
<th>命令</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>mkdir [-p]</code></td>
<td>创建文件夹 /  创建父文件夹</td>
<td><code>-p</code></td>
<td>父文件夹</td>
</tr>
<tr>
<td><code>rmdir</code></td>
<td>删除空文件夹</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>touch</code></td>
<td>创建空文件或修改文件的最后访问时间</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>rm</code></td>
<td>删除文件或文件夹</td>
<td><code>-i/-r/-f</code></td>
<td>交互式删除/递归式删除/强行删除</td>
</tr>
<tr>
<td><code>cp</code></td>
<td>拷贝文件或文件夹</td>
<td><code>-r</code></td>
<td>递归式拷贝</td>
</tr>
<tr>
<td><code>mv</code></td>
<td>移动文件或文件夹 / 文件重命名</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>cat / tec / rev</code></td>
<td>查看文件</td>
<td><code>-n</code></td>
<td>查看行号</td>
</tr>
<tr>
<td><code>head</code></td>
<td>查看文件的头部 （默认10行）</td>
<td><code>-x</code></td>
<td>指定X行</td>
</tr>
<tr>
<td><code>tail</code></td>
<td>查看文件的尾部（默认10行）</td>
<td><code>-x</code></td>
<td>指定X行</td>
</tr>
<tr>
<td><code>gzip</code></td>
<td>压缩文件</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>gunzip</code></td>
<td>解压缩文件</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>tar</code></td>
<td>归档 / 解归档</td>
<td><code>-cvf [文件名]  [归档文件名]</code></td>
<td>创建归档：多个文件放到一个文件中</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>-xvf [文件名]</code></td>
<td>解归档：从文件中抽取出归档文件</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>-zxf [文件名]</code></td>
<td>一步到位：解压缩和解归档 适合<code>tgz</code>文件</td>
</tr>
<tr>
<td><code>less / more</code></td>
<td>逐行/页的查看文件</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>xz</code></td>
<td>[解]压缩文件（有）较好的压缩比</td>
<td><code>-d / -z</code></td>
<td>解压缩 / 压缩</td>
</tr>
<tr>
<td><code>wc</code></td>
<td>统计文件的字符数、单词数、行数</td>
<td><code>-l / -w</code></td>
<td>只看行数 / 单词数</td>
</tr>
<tr>
<td><code>grep [内容] [文件]</code></td>
<td>搜索文件内容</td>
<td><code>-E [正则表达式]</code></td>
<td>正则匹配</td>
</tr>
<tr>
<td><code>find [路径] [模式] [模式参数]</code></td>
<td>查找文件</td>
<td><code>-name / -size / -ctime / -mtime / -atime</code></td>
<td>名字 / 大小 / 创建时间 / 修改时间 / 访问时间</td>
</tr>
<tr>
<td><code>&gt; 文件</code></td>
<td>输出重定向</td>
<td></td>
<td>将输出放到指定文件</td>
</tr>
<tr>
<td><code>&gt;&gt; 文件</code></td>
<td>追加输出重定向</td>
<td></td>
<td>在文件后追加内容</td>
</tr>
<tr>
<td>2&gt; 文件</td>
<td>错误输出重定向</td>
<td></td>
<td>将错误输出到指定文件</td>
</tr>
<tr>
<td><code>xargs</code></td>
<td>将一列内容转换为命令的参数</td>
<td></td>
<td>一般配合管道使用</td>
</tr>
</tbody></table>
<h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><blockquote>
<p>利用 <code>|</code>将多个命令连接起来，组成一个强大的命令，前一个命令的输出是后一个命令的输入</p>
</blockquote>
<p><code>-----------------------------------------------------------------------------------------------------------------------</code></p>
<h4 id="安装管理软件（服务）"><a href="#安装管理软件（服务）" class="headerlink" title="安装管理软件（服务）"></a>安装管理软件（服务）</h4><ol>
<li><p>使用包管理工具</p>
<ol>
<li><code>yum </code> —–&gt; <code>apt(ubuntu)</code><ol>
<li>搜索：<code>yum search ... </code></li>
<li>安装：<code> yum install ...</code></li>
<li>卸载：<code>yum remove...  /  yum erase ... </code></li>
<li>更新：<code>yum update ...</code></li>
<li>信息：<code>yum info ...</code></li>
<li>查看已安装：<code>yum list installed</code></li>
</ol>
</li>
<li><code>rpm </code><ol>
<li>安装： <code>rpm -ivh 包名</code></li>
<li>查看：<code>rpm -qa  | grep “[包名(部分)]”</code></li>
<li>删除：<code>rpm -e "[包名]"</code></li>
</ol>
</li>
</ol>
</li>
<li><p>基于源代码构建安装 ： python3.8 / 3.9</p>
<ol>
<li>移除自带的python3： <code>yum erase python3</code></li>
<li>补充底层依赖：<code>yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel libdb4-devel libpcap-devel xz-devel libffi-devel libxml2</code></li>
<li>下载python源代码：<code>wget https://www.python.org/ftp/python/3.9.11/Python-3.9.11.tgz</code></li>
<li>解压解归档：<code>tar -zxf Python-3.9.11.tgz</code></li>
<li>进入文件夹：<code>cd Python-3.9.11</code></li>
<li>执行安装前的配置：<code>./configure --prefix=/usr/local/python39 </code>     &lt;安装python3.9&gt;</li>
<li>构建和安装：<code>make &amp;&amp; make install</code></li>
<li>配置环境变量：<ol>
<li><code>export PATH=$PATH:/usr/local/python39/bin</code>  &lt;临时配置&gt;</li>
<li>用户环境变量：<ol>
<li>切换到用户目录下：<code>cd ~</code></li>
<li>将python路径写入<code>.bash_profile</code>的最后一行：<code>echo "export PATH=$PATH:/usr/local/python39/bin" &gt;&gt; .bash_profile</code></li>
</ol>
</li>
<li>系统环境变量的位置：<code>/etc/profile</code></li>
</ol>
</li>
<li>创建软链接&lt;快捷方式&gt;：<code>ln -s /usr/local/python39 </code></li>
</ol>
<blockquote>
<p>如果系统没有C语言环境：<code>yum install -y gcc</code></p>
</blockquote>
</li>
<li><p>直接下载和系统匹配的二进制程序</p>
<ol>
<li>直接下载和系统匹配的二进制程序</li>
<li>将可执行文件目录添加进环境变量</li>
</ol>
</li>
</ol>
<p><code>-----------------------------------------------------------------------------------------------------------------------</code></p>
<h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4><ul>
<li><p>启动服务</p>
<ul>
<li><code>systemctl start server</code></li>
</ul>
</li>
<li><p>停止服务</p>
<ul>
<li><code>systemctl stop server</code></li>
</ul>
</li>
<li><p>重启服务</p>
<ul>
<li><code>systrmctl restart server</code></li>
</ul>
</li>
<li><p>查看服务状态</p>
<ul>
<li><code>systemctl status server</code></li>
</ul>
</li>
<li><p>开启开机自启</p>
<ul>
<li><code>systemctl enable  server  </code></li>
</ul>
</li>
<li><p>关闭开机自启</p>
<ul>
<li><code>systemctl disable server</code></li>
</ul>
</li>
</ul>
<p><code>-----------------------------------------------------------------------------------------------------------------------</code></p>
<h4 id="CentOS安装Mysql5-7"><a href="#CentOS安装Mysql5-7" class="headerlink" title="CentOS安装Mysql5.7"></a>CentOS安装Mysql5.7</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.38-1.el7.x86_64.rpm-bundle.tar<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看mariodb</span><br>rpm -qa | grep mariadb / yum list installed | grep "mariadb"<br><span class="hljs-meta prompt_"># </span><span class="language-bash">移除mariodb</span><br>yum remove -y mariadb-libs<br>rpm -ivh mysql-community-common-5.7.38-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-libs-5.7.38-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-libs-compat-5.7.38-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-devel-5.7.38-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-client-5.7.38-1.el7.x86_64.rpm<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装libaio libaio-devel依赖</span><br>yum install -y libaio libaio-devel<br>rpm -ivh mysql-community-server-5.7.38-1.el7.x86_64.rpm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动MySQL</span><br>systemctl start mysqld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看初始随机密码</span><br>cat /var/log/mysqld.log | grep "password"<br></code></pre></td></tr></tbody></table></figure>

<p><code>-----------------------------------------------------------------------------------------------------------------------</code></p>
<h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4><ol>
<li>创建用户：<code>useradd </code></li>
<li>删除用户：<code>userdel</code></li>
<li>修改密码：<code>passwd</code></li>
<li>设置密码过期：<code>chage</code></li>
<li>切换用户： <code>su</code></li>
<li>添加组：<code>groupadd</code></li>
<li>修改组：<code>chgrp</code></li>
<li>修改文件所有 者：<code>chown</code></li>
</ol>
<p><code>-----------------------------------------------------------------------------------------------------------------------</code></p>
<h4 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h4><ul>
<li><code>netstat</code>：查看网络（端口）使用情况</li>
<li><code> scp</code>：跨主机安全拷贝文件<ul>
<li><code>scp &lt; 文件名 &gt;  username@host :  &lt; 路径 &gt;</code></li>
</ul>
</li>
<li><code>ssh</code>：安全远程连接</li>
<li><code>ssh &lt;username&gt;@&lt;ip地址&gt; -t &lt;命令&gt;</code>：远程执行命令</li>
<li><code>ssh -J &lt;跳板机信息1&gt;，&lt;跳板机信息2&gt;，&lt;....&gt;  &lt;内网地址&gt;</code> ：通过跳板机连接其他主机</li>
<li><code>ping</code> ： 检查可达性</li>
<li><code>ifcpnfig  / ip </code>：网络接口/网卡信息</li>
<li><code>sftp</code>：安全文件传输<ul>
<li><code>put</code>：上传文件</li>
<li><code>get</code>：下载文件</li>
<li><code>quit</code>：退出</li>
<li><code>help</code>：查看帮助</li>
</ul>
</li>
</ul>
<p><code>-----------------------------------------------------------------------------------------------------------------------</code></p>
<h4 id="消息机制"><a href="#消息机制" class="headerlink" title="消息机制"></a>消息机制</h4><ol>
<li>给指定用户发消息：<code>write 指定用户 xxxx  </code></li>
<li>广播：<code>wall xxxx</code></li>
</ol>
<p><code>-----------------------------------------------------------------------------------------------------------------------</code></p>
<h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><ul>
<li><p>用户环境变量：<code>/.bash_profile</code></p>
<ul>
<li>修改后，只对修改用户生效</li>
</ul>
</li>
<li><p>系统环境变量：<code>/etc/profile</code></p>
<ul>
<li>修改后，对所有使用系统的人生效</li>
</ul>
</li>
</ul>
<p><code>-----------------------------------------------------------------------------------------------------------------------</code></p>
<h4 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h4><ul>
<li>例如：<code>alias 'cls=clear'</code></li>
<li>查看所有别名：<code>alias</code></li>
</ul>
<p><code>-----------------------------------------------------------------------------------------------------------------------</code></p>
<h4 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h4><ul>
<li><p>查看启用的进程：<code>ps</code></p>
<ul>
<li>查看所有进程（包括后台进程）<ul>
<li><code>ps -ef</code></li>
<li><code>pf -aux</code></li>
</ul>
</li>
<li>结束进程：<code>kill [端口号（PID）]</code><ul>
<li><code>kill -9 进程号</code></li>
<li><code>kill KILL 进程号</code></li>
</ul>
</li>
</ul>
</li>
<li><p>根据进程的名字搜索进程：<code>pgrep</code></p>
</li>
<li><p>根据敏子结束进程： <code>pkill [进程名]</code></p>
</li>
<li><p>任务管理器：<code>top</code></p>
</li>
<li><p>进程树：<code>pstree</code></p>
</li>
<li><p>查看后台任务：<code>jobs</code></p>
</li>
<li><p>将后台进程调到前台：<code>fg  %[进程号]</code></p>
</li>
<li><p>在后台启动停止进程：<code>dg %[进程号]</code></p>
</li>
<li><p>监听状态下的TCP协议的服务：<code>netstart -ntlp</code></p>
<ul>
<li><code>-n</code>： 显示IP地址</li>
<li><code>-t</code>： TCP协议</li>
<li><code>-l</code>： 监听状态</li>
</ul>
</li>
<li><p>挂起进程：<code>命令后加 &amp;</code></p>
</li>
</ul>
<h4 id="定时任务和shell脚本"><a href="#定时任务和shell脚本" class="headerlink" title="定时任务和shell脚本"></a>定时任务和shell脚本</h4><p>x: true</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>逻辑斯蒂回归参数</title>
    <url>/2022/06/03/%E9%80%BB%E8%BE%91%E6%96%AF%E8%92%82%E5%9B%9E%E5%BD%92%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<ul>
<li><p><strong>penalty：</strong>惩罚项，<strong>str类型</strong>，可选参数为<code>l1和l2</code>，默认为<strong>l2</strong>。用于指定惩罚项中使用的规范。<code>newton-cg</code>、<code>sag</code>和<code>lbfgs</code>求解算法只支持L2规范。<code>L1G</code>规范假设的是模型的参数满足拉普拉斯分布，L2假设的模型参数满足高斯分布，所谓的范式就是加上对参数的约束，使得模型更不会过拟合(overfit)，但是如果要说是不是加了约束就会好，这个没有人能回答，只能说，加约束的情况下，理论上应该可以获得泛化能力更强的结果。</p>
</li>
<li><p><strong>dual：</strong>对偶或原始方法，bool类型，默认为False。对偶方法只用在求解线性多核(<code>liblinear</code>)的L2惩罚项上。当样本数量&gt;样本特征的时候，dual通常设置为False。</p>
</li>
<li><p><strong>tol：</strong>停止求解的标准，float类型，默认为1e-4。就是求解到多少的时候，停止，认为已经求出最优解。</p>
</li>
<li><p><strong>c：</strong>正则化系数λ的倒数，float类型，默认为1.0。必须是正浮点型数。像SVM一样，越小的数值表示越强的正则化。</p>
</li>
<li><p><strong>fit_intercept：</strong>是否存在截距或偏差，bool类型，默认为True。</p>
</li>
<li><p><strong>intercept_scaling：</strong>仅在正则化项为”<code>liblinear</code>“，且<code>fit_intercept</code>设置为<code>True</code>时有用。float类型，默认为1。</p>
</li>
<li><p>class_weight：</p>
<p>用于标示分类模型中各种类型的权重，可以是一个字典或者’balanced’字符串，默认为不输入，也就是不考虑权重，即为None。如果选择输入的话，可以选择balanced让类库自己计算类型权重，或者自己输入各个类型的权重。举个例子，比如对于0,1的二元模型，我们可以定义class_weight={0:0.9,1:0.1}，这样类型0的权重为90%，而类型1的权重为10%。如果class_weight选择balanced，那么类库会根据训练样本量来计算权重。某种类型样本量越多，则权重越低，样本量越少，则权重越高。当class_weight为balanced时，类权重计算方法如下：n_samples / (n_classes * np.bincount(y))。n_samples为样本数，n_classes为类别数量，np.bincount(y)会输出每个类的样本数，例如y=[1,0,0,1,1],则np.bincount(y)=[2,3]。</p>
<ul>
<li>那么class_weight有什么作用呢？<ul>
<li>在分类模型中，我们经常会遇到两类问题：</li>
<li>1.第一种是误分类的代价很高。比如对合法用户和非法用户进行分类，将非法用户分类为合法用户的代价很高，我们宁愿将合法用户分类为非法用户，这时可以人工再甄别，但是却不愿将非法用户分类为合法用户。这时，我们可以适当提高非法用户的权重。</li>
<li>\2. 第二种是样本是高度失衡的，比如我们有合法用户和非法用户的二元样本数据10000条，里面合法用户有9995条，非法用户只有5条，如果我们不考虑权重，则我们可以将所有的测试集都预测为合法用户，这样预测准确率理论上有99.95%，但是却没有任何意义。这时，我们可以选择balanced，让类库自动提高非法用户样本的权重。提高了某种分类的权重，相比不考虑权重，会有更多的样本分类划分到高权重的类别，从而可以解决上面两类问题。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>random_state：</strong>随机数种子，int类型，可选参数，默认为无，仅在正则化优化算法为sag,liblinear时有用。</p>
</li>
<li><p>solver：</p>
<p>优化算法选择参数，只有五个可选参数，即newton-cg,lbfgs,liblinear,sag,saga。默认为liblinear。solver参数决定了我们对逻辑回归损失函数的优化方法，有四种算法可以选择，分别是：</p>
<ul>
<li><strong>liblinear：</strong>使用了开源的liblinear库实现，内部使用了坐标轴下降法来迭代优化损失函数。</li>
<li><strong>lbfgs：</strong>拟牛顿法的一种，利用损失函数二阶导数矩阵即海森矩阵来迭代优化损失函数。</li>
<li><strong>newton-cg：</strong>也是牛顿法家族的一种，利用损失函数二阶导数矩阵即海森矩阵来迭代优化损失函数。</li>
<li><strong>sag：</strong>即随机平均梯度下降，是梯度下降法的变种，和普通梯度下降法的区别是每次迭代仅仅用一部分的样本来计算梯度，适合于样本数据多的时候。</li>
<li><strong>saga：</strong>线性收敛的随机优化算法的的变重。</li>
<li>总结：<ul>
<li>liblinear适用于小数据集，而sag和saga适用于大数据集因为速度更快。</li>
<li>对于多分类问题，只有newton-cg,sag,saga和lbfgs能够处理多项损失，而liblinear受限于一对剩余(OvR)。啥意思，就是用liblinear的时候，如果是多分类问题，得先把一种类别作为一个类别，剩余的所有类别作为另外一个类别。一次类推，遍历所有类别，进行分类。</li>
<li>newton-cg,sag和lbfgs这三种优化算法时都需要损失函数的一阶或者二阶连续导数，因此不能用于没有连续导数的L1正则化，只能用于L2正则化。而liblinear和saga通吃L1正则化和L2正则化。</li>
<li>同时，sag每次仅仅使用了部分样本进行梯度迭代，所以当样本量少的时候不要选择它，而如果样本量非常大，比如大于10万，sag是第一选择。但是sag不能用于L1正则化，所以当你有大量的样本，又需要L1正则化的话就要自己做取舍了。要么通过对样本采样来降低样本量，要么回到L2正则化。</li>
<li>从上面的描述，大家可能觉得，既然newton-cg, lbfgs和sag这么多限制，如果不是大样本，我们选择liblinear不就行了嘛！错，因为liblinear也有自己的弱点！我们知道，逻辑回归有二元逻辑回归和多元逻辑回归。对于多元逻辑回归常见的有one-vs-rest(OvR)和many-vs-many(MvM)两种。而MvM一般比OvR分类相对准确一些。郁闷的是liblinear只支持OvR，不支持MvM，这样如果我们需要相对精确的多元逻辑回归时，就不能选择liblinear了。也意味着如果我们需要相对精确的多元逻辑回归不能使用L1正则化了。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>max_iter：</strong>算法收敛最大迭代次数，int类型，默认为10。仅在正则化优化算法为newton-cg, sag和lbfgs才有用，算法收敛的最大迭代次数。</p>
</li>
<li><p>multi_class：</p>
<p>分类方式选择参数，str类型，可选参数为ovr和multinomial，默认为ovr。ovr即前面提到的one-vs-rest(OvR)，而multinomial即前面提到的many-vs-many(MvM)。如果是二元逻辑回归，ovr和multinomial并没有任何区别，区别主要在多元逻辑回归上。</p>
<ul>
<li>OvR和MvM有什么不同？<ul>
<li>OvR的思想很简单，无论你是多少元逻辑回归，我们都可以看做二元逻辑回归。具体做法是，对于第K类的分类决策，我们把所有第K类的样本作为正例，除了第K类样本以外的所有样本都作为负例，然后在上面做二元逻辑回归，得到第K类的分类模型。其他类的分类模型获得以此类推。</li>
<li>而MvM则相对复杂，这里举MvM的特例one-vs-one(OvO)作讲解。如果模型有T类，我们每次在所有的T类样本里面选择两类样本出来，不妨记为T1类和T2类，把所有的输出为T1和T2的样本放在一起，把T1作为正例，T2作为负例，进行二元逻辑回归，得到模型参数。我们一共需要T(T-1)/2次分类。</li>
<li>可以看出OvR相对简单，但分类效果相对略差（这里指大多数样本分布情况，某些样本分布下OvR可能更好）。而MvM分类相对精确，但是分类速度没有OvR快。如果选择了ovr，则4种损失函数的优化方法liblinear，newton-cg,lbfgs和sag都可以选择。但是如果选择了multinomial,则只能选择newton-cg, lbfgs和sag了。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>verbose：</strong>日志冗长度，int类型。默认为0。就是不输出训练过程，1的时候偶尔输出结果，大于1，对于每个子模型都输出。</p>
</li>
<li><p><strong>warm_start：</strong>热启动参数，bool类型。默认为False。如果为True，则下一次训练是以追加树的形式进行（重新使用上一次的调用作为初始化）。</p>
</li>
<li><p><strong>n_jobs：</strong>并行数。int类型，默认为1。1的时候，用CPU的一个内核运行程序，2的时候，用CPU的2个内核运行程序。为-1的时候，用所有CPU的内核运行程序。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>LogisticRegression</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2022/06/02/GIT/</url>
    <content><![CDATA[<h1 id="Git的奇技淫巧-see-no-evil"><a href="#Git的奇技淫巧-see-no-evil" class="headerlink" title="Git的奇技淫巧:see_no_evil:"></a>Git的奇技淫巧<span class="github-emoji"><span>🙈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f648.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><blockquote>
<p>Git常用命令集合，Fork于<a href="https://github.com/git-tips/tips">tips</a>项目</p>
</blockquote>
<p>Git是一个 “分布式版本管理工具”，简单的理解版本管理工具：大家在写东西的时候都用过 “回撤” 这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用 “回撤” 是找不回来的。而 “版本管理工具” 能记录每次的修改，只要提交到版本仓库，你就可以找到之前任何时刻的状态（文本状态）。</p>
<p>下面的内容就是列举了常用的 Git 命令和一些小技巧，可以通过 “页面内查找” 的方式进行快速查询：<code>Ctrl/Command+f</code>。</p>
<h2 id="开卷必读"><a href="#开卷必读" class="headerlink" title="开卷必读"></a>开卷必读</h2><p><em>如果之前未使用过 Git，可以学习 <a href="http://rogerdudler.github.io/git-guide/index.zh.html">Git 小白教程</a>入门</em></p>
<ol>
<li><strong>一定要先测试命令的效果后</strong>，再用于工作环境中，以防造成不能弥补的后果！<strong>到时候别拿着砍刀来找我</strong></li>
<li>所有的命令都在<code>git version 2.7.4 (Apple Git-66)</code>下测试通过</li>
<li>统一概念：<ul>
<li>工作区：改动（增删文件和内容）</li>
<li>暂存区：输入命令：<code>git add 改动的文件名</code>，此次改动就放到了 ‘暂存区’</li>
<li>本地仓库(简称：本地)：输入命令：<code>git commit 此次修改的描述</code>，此次改动就放到了 ’本地仓库’，每个 commit，我叫它为一个 ‘版本’。</li>
<li>远程仓库(简称：远程)：输入命令：<code>git push 远程仓库</code>，此次改动就放到了 ‘远程仓库’（GitHub 等)</li>
<li>commit-id：输出命令：<code>git log</code>，最上面那行 <code>commit xxxxxx</code>，后面的字符串就是 commit-id</li>
</ul>
</li>
<li>如果喜欢这个项目，欢迎 Star、提交 Pr、<a href="https://github.com/521xueweihan/git-tips/issues">反馈问题</a>😊</li>
</ol>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#%E5%B1%95%E7%A4%BA%E5%B8%AE%E5%8A%A9%E4%BF%A1%E6%81%AF">展示帮助信息</a></li>
<li><a href="#%E5%9B%9E%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E7%8A%B6%E6%80%81">回到远程仓库的状态</a></li>
<li><a href="#%E9%87%8D%E8%AE%BE%E7%AC%AC%E4%B8%80%E4%B8%AA-commit">重设第一个commit</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E4%B8%8D%E5%90%8C">展示工作区和暂存区的不同</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%9A%82%E5%AD%98%E5%8C%BA%E5%92%8C%E6%9C%80%E8%BF%91%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%8D%E5%90%8C">展示暂存区和最近版本的不同</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%9A%82%E5%AD%98%E5%8C%BA%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9C%80%E8%BF%91%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%8D%E5%90%8C">展示暂存区、工作区和最近版本的不同</a></li>
<li><a href="#%E5%BF%AB%E9%80%9F%E5%88%87%E6%8D%A2%E5%88%B0%E4%B8%8A%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF">快速切换到上一个分支</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E5%B7%B2%E7%BB%8F%E5%90%88%E5%B9%B6%E5%88%B0-master-%E7%9A%84%E5%88%86%E6%94%AF">删除已经合并到 master 的分支</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E6%83%85%E5%86%B5">展示本地分支关联远程仓库的情况</a></li>
<li><a href="#%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">关联远程分支</a></li>
<li><a href="#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">列出所有远程分支</a></li>
<li><a href="#%E5%88%97%E5%87%BA%E6%9C%AC%E5%9C%B0%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">列出本地和远程分支</a></li>
<li><a href="#%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">创建并切换到本地分支</a></li>
<li><a href="#%E4%BB%8E%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">从远程分支中创建并切换到本地分支</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">删除本地分支</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">删除远程分支</a></li>
<li><a href="#%E9%87%8D%E5%91%BD%E5%90%8D%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">重命名本地分支</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B%E6%A0%87%E7%AD%BE">查看标签</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B%E6%A0%87%E7%AD%BE%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF">查看标签详细信息</a></li>
<li><a href="#%E6%9C%AC%E5%9C%B0%E5%88%9B%E5%BB%BA%E6%A0%87%E7%AD%BE">本地创建标签</a></li>
<li><a href="#%E6%8E%A8%E9%80%81%E6%A0%87%E7%AD%BE%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">推送标签到远程仓库</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E6%A0%87%E7%AD%BE">删除本地标签</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E6%A0%87%E7%AD%BE">删除远程标签</a></li>
<li><a href="#%E5%88%87%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AA%E6%A0%87%E7%AD%BE">切回到某个标签</a></li>
<li><a href="#%E6%94%BE%E5%BC%83%E5%B7%A5%E4%BD%9C%E5%8C%BA%E7%9A%84%E4%BF%AE%E6%94%B9">放弃工作区的修改</a></li>
<li><a href="#%E6%81%A2%E5%A4%8D%E5%88%A0%E9%99%A4%E7%9A%84%E6%96%87%E4%BB%B6">恢复删除的文件</a></li>
<li><a href="#%E4%BB%A5%E6%96%B0%E5%A2%9E%E4%B8%80%E4%B8%AA-commit-%E7%9A%84%E6%96%B9%E5%BC%8F%E8%BF%98%E5%8E%9F%E6%9F%90%E4%B8%80%E4%B8%AA-commit-%E7%9A%84%E4%BF%AE%E6%94%B9">以新增一个 commit 的方式还原某一个 commit 的修改</a></li>
<li><a href="#%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AA-commit-%E7%9A%84%E7%8A%B6%E6%80%81%E5%B9%B6%E5%88%A0%E9%99%A4%E5%90%8E%E9%9D%A2%E7%9A%84-commit">回到某个 commit 的状态，并删除后面的 commit</a></li>
<li><a href="#%E4%BF%AE%E6%94%B9%E4%B8%8A%E4%B8%80%E4%B8%AA-commit-%E7%9A%84%E6%8F%8F%E8%BF%B0">修改上一个 commit 的描述</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B-commit-%E5%8E%86%E5%8F%B2">查看 commit 历史</a></li>
<li><a href="#%E6%98%BE%E7%A4%BA%E6%9C%AC%E5%9C%B0%E6%9B%B4%E6%96%B0%E8%BF%87-head-%E7%9A%84-git-%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95">显示本地更新过 HEAD 的 git 命令记录</a></li>
<li><a href="#%E4%BF%AE%E6%94%B9%E4%BD%9C%E8%80%85%E5%90%8D">修改作者名</a></li>
<li><a href="#%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84-url">修改远程仓库的 url</a></li>
<li><a href="#%E5%A2%9E%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">增加远程仓库</a></li>
<li><a href="#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">列出所有远程仓库</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B%E4%B8%A4%E4%B8%AA%E6%98%9F%E6%9C%9F%E5%86%85%E7%9A%84%E6%94%B9%E5%8A%A8">查看两个星期内的改动</a></li>
<li><a href="#%E6%8A%8A-A-%E5%88%86%E6%94%AF%E7%9A%84%E6%9F%90%E4%B8%80%E4%B8%AA-commit-%E6%94%BE%E5%88%B0-B-%E5%88%86%E6%94%AF%E4%B8%8A">把 A 分支的某一个 commit，放到 B 分支上</a></li>
<li><a href="#%E7%BB%99-git-%E5%91%BD%E4%BB%A4%E8%B5%B7%E5%88%AB%E5%90%8D">给 git 命令起别名</a></li>
<li><a href="#%E5%AD%98%E5%82%A8%E5%BD%93%E5%89%8D%E7%9A%84%E4%BF%AE%E6%94%B9%E4%BD%86%E4%B8%8D%E7%94%A8%E6%8F%90%E4%BA%A4-commit">存储当前的修改，但不用提交 commit</a></li>
<li><a href="#%E4%BF%9D%E5%AD%98%E5%BD%93%E5%89%8D%E7%8A%B6%E6%80%81%E5%8C%85%E6%8B%AC-untracked-%E7%9A%84%E6%96%87%E4%BB%B6">保存当前状态，包括 untracked 的文件</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-stashes">展示所有 stashes</a></li>
<li><a href="#%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AA-stash-%E7%9A%84%E7%8A%B6%E6%80%81">回到某个 stash 的状态</a></li>
<li><a href="#%E5%9B%9E%E5%88%B0%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA-stash-%E7%9A%84%E7%8A%B6%E6%80%81%E5%B9%B6%E5%88%A0%E9%99%A4%E8%BF%99%E4%B8%AA-stash">回到最后一个 stash 的状态，并删除这个 stash</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E7%9A%84-stash">删除所有的 stash</a></li>
<li><a href="#%E4%BB%8E-stash-%E4%B8%AD%E6%8B%BF%E5%87%BA%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E4%BF%AE%E6%94%B9">从 stash 中拿出某个文件的修改</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-tracked-%E7%9A%84%E6%96%87%E4%BB%B6">展示所有 tracked 的文件</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-untracked-%E7%9A%84%E6%96%87%E4%BB%B6">展示所有 untracked 的文件</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6">展示所有忽略的文件</a></li>
<li><a href="#%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4-untracked-%E7%9A%84%E6%96%87%E4%BB%B6">强制删除 untracked 的文件</a></li>
<li><a href="#%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4-untracked-%E7%9A%84%E7%9B%AE%E5%BD%95">强制删除 untracked 的目录</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E7%AE%80%E5%8C%96%E7%9A%84-commit-%E5%8E%86%E5%8F%B2">展示简化的 commit 历史</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B%E6%9F%90%E6%AE%B5%E4%BB%A3%E7%A0%81%E6%98%AF%E8%B0%81%E5%86%99%E7%9A%84">查看某段代码是谁写的</a></li>
<li><a href="#%E6%8A%8A%E6%9F%90%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%E5%88%B0%E5%AF%BC%E5%87%BA%E6%88%90%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6">把某一个分支到导出成一个文件</a></li>
<li><a href="#%E4%BB%8E%E5%8C%85%E4%B8%AD%E5%AF%BC%E5%85%A5%E5%88%86%E6%94%AF">从包中导入分支</a></li>
<li><a href="#%E6%89%A7%E8%A1%8C-rebase-%E4%B9%8B%E5%89%8D%E8%87%AA%E5%8A%A8-stash">执行 rebase 之前自动 stash</a></li>
<li><a href="#%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%A0%B9%E6%8D%AE-ID-%E6%8B%89%E4%B8%8B%E6%9F%90%E4%B8%80%E7%8A%B6%E6%80%81-%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">从远程仓库根据 ID，拉下某一状态，到本地分支</a></li>
<li><a href="#%E8%AF%A6%E7%BB%86%E5%B1%95%E7%A4%BA%E4%B8%80%E8%A1%8C%E4%B8%AD%E7%9A%84%E4%BF%AE%E6%94%B9">详细展示一行中的修改</a></li>
<li><a href="#%E6%B8%85%E9%99%A4-gitignore-%E6%96%87%E4%BB%B6%E4%B8%AD%E8%AE%B0%E5%BD%95%E7%9A%84%E6%96%87%E4%BB%B6">清除 <code>.gitignore</code> 文件中记录的文件</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-alias-%E5%92%8C-configs">展示所有 alias 和 configs</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6">展示忽略的文件</a></li>
<li><a href="#commit-%E5%8E%86%E5%8F%B2%E4%B8%AD%E6%98%BE%E7%A4%BA-Branch1-%E6%9C%89%E7%9A%84%E4%BD%86%E6%98%AF-Branch2-%E6%B2%A1%E6%9C%89-commit">commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</a></li>
<li><a href="#%E5%9C%A8-commit-log-%E4%B8%AD%E6%98%BE%E7%A4%BA-GPG-%E7%AD%BE%E5%90%8D">在 commit log 中显示 GPG 签名</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE">删除全局设置</a></li>
<li><a href="#%E6%96%B0%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E6%96%B0%E5%88%86%E6%94%AF%E4%B8%8A%E5%90%8C%E6%97%B6%E8%BF%99%E4%B8%AA%E5%88%86%E6%94%AF%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95-commit">新建并切换到新分支上，同时这个分支没有任何 commit</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E4%BB%BB%E6%84%8F%E5%88%86%E6%94%AF%E6%9F%90%E4%B8%80%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9">展示任意分支某一文件的内容</a></li>
<li><a href="#clone-%E4%B8%8B%E6%9D%A5%E6%8C%87%E5%AE%9A%E7%9A%84%E5%8D%95%E4%B8%80%E5%88%86%E6%94%AF">clone 下来指定的单一分支</a></li>
<li><a href="#%E5%BF%BD%E7%95%A5%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E6%94%B9%E5%8A%A8">忽略某个文件的改动</a></li>
<li><a href="#%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E7%9A%84%E6%9D%83%E9%99%90%E5%8F%98%E5%8C%96">忽略文件的权限变化</a></li>
<li><a href="#%E4%BB%A5%E6%9C%80%E5%90%8E%E6%8F%90%E4%BA%A4%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89-Git-%E5%88%86%E6%94%AF">以最后提交的顺序列出所有 Git 分支</a></li>
<li><a href="#%E5%9C%A8-commit-log-%E4%B8%AD%E6%9F%A5%E6%89%BE%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9">在 commit log 中查找相关内容</a></li>
<li><a href="#%E6%8A%8A%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E6%8C%87%E5%AE%9A-file-%E6%94%BE%E5%88%B0%E5%B7%A5%E4%BD%9C%E5%8C%BA%E4%B8%AD">把暂存区的指定 file 放到工作区中</a></li>
<li><a href="#%E5%BC%BA%E5%88%B6%E6%8E%A8%E9%80%81">强制推送</a></li>
<li><a href="#%E4%B8%80%E5%9B%BE%E8%AF%A6%E8%A7%A3">一图详解</a></li>
<li><a href="#%E4%BC%98%E9%9B%85%E7%9A%84%E6%8F%90%E4%BA%A4Commit%E4%BF%A1%E6%81%AF">优雅的提交Commit信息</a></li>
<li><a href="#%E8%81%94%E7%B3%BB%E6%88%91">联系我</a></li>
</ul>
<h2 id="展示帮助信息"><a href="#展示帮助信息" class="headerlink" title="展示帮助信息"></a>展示帮助信息</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">help</span> -g<br></code></pre></td></tr></tbody></table></figure>

<p>The command output as below:</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">The common Git guides are:<br>   attributes          Defining attributes per path<br>   cli                 Git command-line interface and conventions<br>   core-tutorial       A Git core tutorial <span class="hljs-keyword">for</span> developers<br>   cvs-migration       Git <span class="hljs-keyword">for</span> CVS <span class="hljs-built_in">users</span><br>   diffcore            Tweaking diff output<br>   everyday            A useful minimum <span class="hljs-built_in">set</span> of commands <span class="hljs-keyword">for</span> Everyday Git<br>   glossary            A Git Glossary<br>   hooks               Hooks used by Git<br>   ignore              Specifies intentionally untracked files to ignore<br>   modules             Defining submodule properties<br>   namespaces          Git namespaces<br>   repository-layout    Git Repository Layout<br>   revisions           Specifying revisions and ranges <span class="hljs-keyword">for</span> Git<br>   tutorial            A tutorial introduction to Git<br>   tutorial-2          A tutorial introduction to Git: part two<br>   workflows           An overview of recommended workflows with Git<br><br><span class="hljs-string">'git help -a'</span> and <span class="hljs-string">'git help -g'</span> list available subcommands and some concept guides. See <span class="hljs-string">'git help &lt;command&gt;'</span> or <span class="hljs-string">'git help &lt;concept&gt;'</span> to <span class="hljs-built_in">read</span> about a specific subcommand or concept.<br></code></pre></td></tr></tbody></table></figure>

<h2 id="回到远程仓库的状态"><a href="#回到远程仓库的状态" class="headerlink" title="回到远程仓库的状态"></a>回到远程仓库的状态</h2><p>抛弃本地所有的修改，回到远程仓库的状态。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git fetch --all &amp;&amp; git reset --hard origin/master<br></code></pre></td></tr></tbody></table></figure>

<h2 id="重设第一个-commit"><a href="#重设第一个-commit" class="headerlink" title="重设第一个 commit"></a>重设第一个 commit</h2><p>也就是把所有的改动都重新放回工作区，并<strong>清空所有的 commit</strong>，这样就可以重新提交第一个 commit 了</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git update-ref -d HEAD<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示工作区和暂存区的不同"><a href="#展示工作区和暂存区的不同" class="headerlink" title="展示工作区和暂存区的不同"></a>展示工作区和暂存区的不同</h2><p>输出<strong>工作区</strong>和<strong>暂存区</strong>的 different (不同)。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git diff<br></code></pre></td></tr></tbody></table></figure>

<p>还可以展示本地仓库中任意两个 commit 之间的文件变动：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git diff &lt;commit-id&gt; &lt;commit-id&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示暂存区和最近版本的不同"><a href="#展示暂存区和最近版本的不同" class="headerlink" title="展示暂存区和最近版本的不同"></a>展示暂存区和最近版本的不同</h2><p>输出<strong>暂存区</strong>和本地最近的版本 (commit) 的 different (不同)。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git diff --cached<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示暂存区、工作区和最近版本的不同"><a href="#展示暂存区、工作区和最近版本的不同" class="headerlink" title="展示暂存区、工作区和最近版本的不同"></a>展示暂存区、工作区和最近版本的不同</h2><p>输出<strong>工作区</strong>、<strong>暂存区</strong> 和本地最近的版本 (commit) 的 different (不同)。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git diff HEAD<br></code></pre></td></tr></tbody></table></figure>

<h2 id="快速切换到上一个分支"><a href="#快速切换到上一个分支" class="headerlink" title="快速切换到上一个分支"></a>快速切换到上一个分支</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git checkout -<br></code></pre></td></tr></tbody></table></figure>

<h2 id="删除已经合并到-master-的分支"><a href="#删除已经合并到-master-的分支" class="headerlink" title="删除已经合并到 master 的分支"></a>删除已经合并到 master 的分支</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git branch --merged master | grep -v <span class="hljs-string">'^\*\|  master'</span> | xargs -n 1 git branch -d<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示本地分支关联远程仓库的情况"><a href="#展示本地分支关联远程仓库的情况" class="headerlink" title="展示本地分支关联远程仓库的情况"></a>展示本地分支关联远程仓库的情况</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git branch -vv<br></code></pre></td></tr></tbody></table></figure>

<h2 id="关联远程分支"><a href="#关联远程分支" class="headerlink" title="关联远程分支"></a>关联远程分支</h2><p>关联之后，<code>git branch -vv</code> 就可以展示关联的远程分支名了，同时推送到远程仓库直接：<code>git push</code>，不需要指定远程仓库了。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git branch -u origin/mybranch<br></code></pre></td></tr></tbody></table></figure>

<p>或者在 push 时加上 <code>-u</code> 参数</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git push origin/mybranch -u<br></code></pre></td></tr></tbody></table></figure>

<h2 id="列出所有远程分支"><a href="#列出所有远程分支" class="headerlink" title="列出所有远程分支"></a>列出所有远程分支</h2><p>-r 参数相当于：remote</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git branch -r<br></code></pre></td></tr></tbody></table></figure>

<h2 id="列出本地和远程分支"><a href="#列出本地和远程分支" class="headerlink" title="列出本地和远程分支"></a>列出本地和远程分支</h2><p>-a 参数相当于：all</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git branch -a<br></code></pre></td></tr></tbody></table></figure>

<h2 id="创建并切换到本地分支"><a href="#创建并切换到本地分支" class="headerlink" title="创建并切换到本地分支"></a>创建并切换到本地分支</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git checkout -b &lt;branch-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="从远程分支中创建并切换到本地分支"><a href="#从远程分支中创建并切换到本地分支" class="headerlink" title="从远程分支中创建并切换到本地分支"></a>从远程分支中创建并切换到本地分支</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git branch -d &lt;local-branchname&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git push origin --delete &lt;remote-branchname&gt;<br></code></pre></td></tr></tbody></table></figure>

<p>或者</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git push origin :&lt;remote-branchname&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="重命名本地分支"><a href="#重命名本地分支" class="headerlink" title="重命名本地分支"></a>重命名本地分支</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git branch -m &lt;new-branch-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git tag<br></code></pre></td></tr></tbody></table></figure>

<p>展示当前分支的最近的 tag</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git describe --tags --abbrev=0<br></code></pre></td></tr></tbody></table></figure>

<h2 id="查看标签详细信息"><a href="#查看标签详细信息" class="headerlink" title="查看标签详细信息"></a>查看标签详细信息</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git tag -<span class="hljs-built_in">ln</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="本地创建标签"><a href="#本地创建标签" class="headerlink" title="本地创建标签"></a>本地创建标签</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git tag &lt;version-number&gt;<br></code></pre></td></tr></tbody></table></figure>

<p>默认 tag 是打在最近的一次 commit 上，如果需要指定 commit 打 tag：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">$ git tag -a &lt;version-number&gt; -m <span class="hljs-string">"v1.0 发布(描述)"</span> &lt;commit-id&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="推送标签到远程仓库"><a href="#推送标签到远程仓库" class="headerlink" title="推送标签到远程仓库"></a>推送标签到远程仓库</h2><p>首先要保证本地创建好了标签才可以推送标签到远程仓库：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git push origin &lt;local-version-number&gt;<br></code></pre></td></tr></tbody></table></figure>

<p>一次性推送所有标签，同步到远程仓库：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git push origin --tags<br></code></pre></td></tr></tbody></table></figure>

<h2 id="删除本地标签"><a href="#删除本地标签" class="headerlink" title="删除本地标签"></a>删除本地标签</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git tag -d &lt;tag-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h2><p>删除远程标签需要<strong>先删除本地标签</strong>，再执行下面的命令：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git push origin :refs/tags/&lt;tag-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="切回到某个标签"><a href="#切回到某个标签" class="headerlink" title="切回到某个标签"></a>切回到某个标签</h2><p>一般上线之前都会打 tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回到某一标签下的状态：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git checkout -b branch_name tag_name<br></code></pre></td></tr></tbody></table></figure>

<h2 id="放弃工作区的修改"><a href="#放弃工作区的修改" class="headerlink" title="放弃工作区的修改"></a>放弃工作区的修改</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git checkout &lt;file-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<p>放弃所有修改：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git checkout .<br></code></pre></td></tr></tbody></table></figure>

<h2 id="恢复删除的文件"><a href="#恢复删除的文件" class="headerlink" title="恢复删除的文件"></a>恢复删除的文件</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git rev-list -n 1 HEAD -- &lt;file_path&gt; <span class="hljs-comment">#得到 deleting_commit</span><br><br>git checkout &lt;deleting_commit&gt;^ -- &lt;file_path&gt; <span class="hljs-comment">#回到删除文件 deleting_commit 之前的状态</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="以新增一个-commit-的方式还原某一个-commit-的修改"><a href="#以新增一个-commit-的方式还原某一个-commit-的修改" class="headerlink" title="以新增一个 commit 的方式还原某一个 commit 的修改"></a>以新增一个 commit 的方式还原某一个 commit 的修改</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git revert &lt;commit-id&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="回到某个-commit-的状态，并删除后面的-commit"><a href="#回到某个-commit-的状态，并删除后面的-commit" class="headerlink" title="回到某个 commit 的状态，并删除后面的 commit"></a>回到某个 commit 的状态，并删除后面的 commit</h2><p>和 revert 的区别：reset 命令会抹去某个 commit id 之后的所有 commit</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git reset &lt;commit-id&gt;  <span class="hljs-comment">#默认就是-mixed参数。</span><br><br>git reset –mixed HEAD^  <span class="hljs-comment">#回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。</span><br><br>git reset –soft HEAD~3  <span class="hljs-comment">#回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可 &nbsp;</span><br><br>git reset –hard &lt;commit-id&gt;  <span class="hljs-comment">#彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="修改上一个-commit-的描述"><a href="#修改上一个-commit-的描述" class="headerlink" title="修改上一个 commit 的描述"></a>修改上一个 commit 的描述</h2><p>如果暂存区有改动，同时也会将暂存区的改动提交到上一个 commit</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git commit --amend<br></code></pre></td></tr></tbody></table></figure>

<h2 id="查看-commit-历史"><a href="#查看-commit-历史" class="headerlink" title="查看 commit 历史"></a>查看 commit 历史</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="查看某段代码是谁写的"><a href="#查看某段代码是谁写的" class="headerlink" title="查看某段代码是谁写的"></a>查看某段代码是谁写的</h2><p>blame 的意思为‘责怪’，你懂的。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git blame &lt;file-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="显示本地更新过-HEAD-的-git-命令记录"><a href="#显示本地更新过-HEAD-的-git-命令记录" class="headerlink" title="显示本地更新过 HEAD 的 git 命令记录"></a>显示本地更新过 HEAD 的 git 命令记录</h2><p>每次更新了 HEAD 的 git 命令比如 commint、amend、cherry-pick、reset、revert 等都会被记录下来（不限分支），就像 shell 的 history 一样。<br>这样你可以 reset 到任何一次更新了 HEAD 的操作之后，而不仅仅是回到当前分支下的某个 commit 之后的状态。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git reflog<br></code></pre></td></tr></tbody></table></figure>

<h2 id="修改作者名"><a href="#修改作者名" class="headerlink" title="修改作者名"></a>修改作者名</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git commit --amend --author=<span class="hljs-string">'Author Name &lt;email@address.com&gt;'</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="修改远程仓库的-url"><a href="#修改远程仓库的-url" class="headerlink" title="修改远程仓库的 url"></a>修改远程仓库的 url</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git remote set-url origin &lt;URL&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="增加远程仓库"><a href="#增加远程仓库" class="headerlink" title="增加远程仓库"></a>增加远程仓库</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git remote add origin &lt;remote-url&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="列出所有远程仓库"><a href="#列出所有远程仓库" class="headerlink" title="列出所有远程仓库"></a>列出所有远程仓库</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git remote<br></code></pre></td></tr></tbody></table></figure>

<h2 id="查看两个星期内的改动"><a href="#查看两个星期内的改动" class="headerlink" title="查看两个星期内的改动"></a>查看两个星期内的改动</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git whatchanged --since=<span class="hljs-string">'2 weeks ago'</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="把-A-分支的某一个-commit，放到-B-分支上"><a href="#把-A-分支的某一个-commit，放到-B-分支上" class="headerlink" title="把 A 分支的某一个 commit，放到 B 分支上"></a>把 A 分支的某一个 commit，放到 B 分支上</h2><p>这个过程需要 <code>cherry-pick</code> 命令，<a href="http://sg552.iteye.com/blog/1300713#bc2367928">参考</a></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git checkout &lt;branch-name&gt; &amp;&amp; git cherry-pick &lt;commit-id&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="给-git-命令起别名"><a href="#给-git-命令起别名" class="headerlink" title="给 git 命令起别名"></a>给 git 命令起别名</h2><p>简化命令</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git config --global <span class="hljs-built_in">alias</span>.&lt;handle&gt; &lt;<span class="hljs-built_in">command</span>&gt;<br><br>比如：git status 改成 git st，这样可以简化命令<br><br>git config --global alias.st status<br></code></pre></td></tr></tbody></table></figure>

<h2 id="存储当前的修改，但不用提交-commit"><a href="#存储当前的修改，但不用提交-commit" class="headerlink" title="存储当前的修改，但不用提交 commit"></a>存储当前的修改，但不用提交 commit</h2><p>详解可以参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000">廖雪峰老师的 git 教程</a></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git stash<br></code></pre></td></tr></tbody></table></figure>

<h2 id="保存当前状态，包括-untracked-的文件"><a href="#保存当前状态，包括-untracked-的文件" class="headerlink" title="保存当前状态，包括 untracked 的文件"></a>保存当前状态，包括 untracked 的文件</h2><p>untracked 文件：新建的文件</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git stash -u<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示所有-stashes"><a href="#展示所有-stashes" class="headerlink" title="展示所有 stashes"></a>展示所有 stashes</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git stash list<br></code></pre></td></tr></tbody></table></figure>

<h2 id="回到某个-stash-的状态"><a href="#回到某个-stash-的状态" class="headerlink" title="回到某个 stash 的状态"></a>回到某个 stash 的状态</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git stash apply &lt;stash@{n}&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="回到最后一个-stash-的状态，并删除这个-stash"><a href="#回到最后一个-stash-的状态，并删除这个-stash" class="headerlink" title="回到最后一个 stash 的状态，并删除这个 stash"></a>回到最后一个 stash 的状态，并删除这个 stash</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git stash pop<br></code></pre></td></tr></tbody></table></figure>

<h2 id="删除所有的-stash"><a href="#删除所有的-stash" class="headerlink" title="删除所有的 stash"></a>删除所有的 stash</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git stash clear<br></code></pre></td></tr></tbody></table></figure>

<h2 id="从-stash-中拿出某个文件的修改"><a href="#从-stash-中拿出某个文件的修改" class="headerlink" title="从 stash 中拿出某个文件的修改"></a>从 stash 中拿出某个文件的修改</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git checkout &lt;stash@{n}&gt; -- &lt;file-path&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示所有-tracked-的文件"><a href="#展示所有-tracked-的文件" class="headerlink" title="展示所有 tracked 的文件"></a>展示所有 tracked 的文件</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git ls-files -t<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示所有-untracked-的文件"><a href="#展示所有-untracked-的文件" class="headerlink" title="展示所有 untracked 的文件"></a>展示所有 untracked 的文件</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git ls-files --others<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示所有忽略的文件"><a href="#展示所有忽略的文件" class="headerlink" title="展示所有忽略的文件"></a>展示所有忽略的文件</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git ls-files --others -i --exclude-standard<br></code></pre></td></tr></tbody></table></figure>

<h2 id="强制删除-untracked-的文件"><a href="#强制删除-untracked-的文件" class="headerlink" title="强制删除 untracked 的文件"></a>强制删除 untracked 的文件</h2><p>可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的 untracked 文件。<code>clean</code> 命令，<strong>注意两点</strong>：</p>
<ol>
<li>clean 后，删除的文件无法找回</li>
<li>不会影响 tracked 的文件的改动，只会删除 untracked 的文件</li>
</ol>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git clean &lt;file-name&gt; -f<br></code></pre></td></tr></tbody></table></figure>

<h2 id="强制删除-untracked-的目录"><a href="#强制删除-untracked-的目录" class="headerlink" title="强制删除 untracked 的目录"></a>强制删除 untracked 的目录</h2><p>可以用来删除新建的目录，<strong>注意</strong>:这个命令也可以用来删除 untracked 的文件。详情见上一条</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git clean &lt;directory-name&gt; -<span class="hljs-built_in">df</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示简化的-commit-历史"><a href="#展示简化的-commit-历史" class="headerlink" title="展示简化的 commit 历史"></a>展示简化的 commit 历史</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">log</span> --pretty=oneline --graph --decorate --all<br></code></pre></td></tr></tbody></table></figure>

<h2 id="把某一个分支到导出成一个文件"><a href="#把某一个分支到导出成一个文件" class="headerlink" title="把某一个分支到导出成一个文件"></a>把某一个分支到导出成一个文件</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git bundle create &lt;file&gt; &lt;branch-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="从包中导入分支"><a href="#从包中导入分支" class="headerlink" title="从包中导入分支"></a>从包中导入分支</h2><p>新建一个分支，分支内容就是上面 <code>git bundle create</code> 命令导出的内容</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> repo.bundle &lt;repo-dir&gt; -b &lt;branch-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="执行-rebase-之前自动-stash"><a href="#执行-rebase-之前自动-stash" class="headerlink" title="执行 rebase 之前自动 stash"></a>执行 rebase 之前自动 stash</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git rebase --autostash<br></code></pre></td></tr></tbody></table></figure>

<h2 id="从远程仓库根据-ID，拉下某一状态，到本地分支"><a href="#从远程仓库根据-ID，拉下某一状态，到本地分支" class="headerlink" title="从远程仓库根据 ID，拉下某一状态，到本地分支"></a>从远程仓库根据 ID，拉下某一状态，到本地分支</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git fetch origin pull/&lt;<span class="hljs-built_in">id</span>&gt;/head:&lt;branch-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="详细展示一行中的修改"><a href="#详细展示一行中的修改" class="headerlink" title="详细展示一行中的修改"></a>详细展示一行中的修改</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git diff --word-diff<br></code></pre></td></tr></tbody></table></figure>

<h2 id="清除-gitignore-文件中记录的文件"><a href="#清除-gitignore-文件中记录的文件" class="headerlink" title="清除 gitignore 文件中记录的文件"></a>清除 gitignore 文件中记录的文件</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git clean -X -f<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示所有-alias-和-configs"><a href="#展示所有-alias-和-configs" class="headerlink" title="展示所有 alias 和 configs"></a>展示所有 alias 和 configs</h2><p><strong>注意：</strong> config 分为：当前目录（local）和全局（golbal）的 config，默认为当前目录的 config</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git config --<span class="hljs-built_in">local</span> --list (当前目录)<br>git config --global --list (全局)<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示忽略的文件"><a href="#展示忽略的文件" class="headerlink" title="展示忽略的文件"></a>展示忽略的文件</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git status --ignored<br></code></pre></td></tr></tbody></table></figure>

<h2 id="commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit"><a href="#commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit" class="headerlink" title="commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit"></a>commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">log</span> Branch1 ^Branch2<br></code></pre></td></tr></tbody></table></figure>

<h2 id="在-commit-log-中显示-GPG-签名"><a href="#在-commit-log-中显示-GPG-签名" class="headerlink" title="在 commit log 中显示 GPG 签名"></a>在 commit log 中显示 GPG 签名</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">log</span> --show-signature<br></code></pre></td></tr></tbody></table></figure>

<h2 id="删除全局设置"><a href="#删除全局设置" class="headerlink" title="删除全局设置"></a>删除全局设置</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git config --global --<span class="hljs-built_in">unset</span> &lt;entry-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="新建并切换到新分支上，同时这个分支没有任何-commit"><a href="#新建并切换到新分支上，同时这个分支没有任何-commit" class="headerlink" title="新建并切换到新分支上，同时这个分支没有任何 commit"></a>新建并切换到新分支上，同时这个分支没有任何 commit</h2><p>相当于保存修改，但是重写 commit 历史</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git checkout --orphan &lt;branch-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="展示任意分支某一文件的内容"><a href="#展示任意分支某一文件的内容" class="headerlink" title="展示任意分支某一文件的内容"></a>展示任意分支某一文件的内容</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git show &lt;branch-name&gt;:&lt;file-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="clone-下来指定的单一分支"><a href="#clone-下来指定的单一分支" class="headerlink" title="clone 下来指定的单一分支"></a>clone 下来指定的单一分支</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> -b &lt;branch-name&gt; --single-branch https://github.com/user/repo.git<br></code></pre></td></tr></tbody></table></figure>

<h2 id="忽略某个文件的改动"><a href="#忽略某个文件的改动" class="headerlink" title="忽略某个文件的改动"></a>忽略某个文件的改动</h2><p>关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git update-index --assume-unchanged path/to/file<br></code></pre></td></tr></tbody></table></figure>

<p>恢复 track 指定文件的改动</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git update-index --no-assume-unchanged path/to/file<br></code></pre></td></tr></tbody></table></figure>

<h2 id="忽略文件的权限变化"><a href="#忽略文件的权限变化" class="headerlink" title="忽略文件的权限变化"></a>忽略文件的权限变化</h2><p>不再将文件的权限变化视作改动</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git config core.fileMode <span class="hljs-literal">false</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="以最后提交的顺序列出所有-Git-分支"><a href="#以最后提交的顺序列出所有-Git-分支" class="headerlink" title="以最后提交的顺序列出所有 Git 分支"></a>以最后提交的顺序列出所有 Git 分支</h2><p>最新的放在最上面</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git for-each-ref --<span class="hljs-built_in">sort</span>=-committerdate --format=<span class="hljs-string">'%(refname:short)'</span> refs/heads/<br></code></pre></td></tr></tbody></table></figure>

<h2 id="在-commit-log-中查找相关内容"><a href="#在-commit-log-中查找相关内容" class="headerlink" title="在 commit log 中查找相关内容"></a>在 commit log 中查找相关内容</h2><p>通过 grep 查找，given-text：所需要查找的字段</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">log</span> --all --grep=<span class="hljs-string">'&lt;given-text&gt;'</span><br></code></pre></td></tr></tbody></table></figure>

<h2 id="把暂存区的指定-file-放到工作区中"><a href="#把暂存区的指定-file-放到工作区中" class="headerlink" title="把暂存区的指定 file 放到工作区中"></a>把暂存区的指定 file 放到工作区中</h2><p>不添加参数，默认是 <code>-mixed</code></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git reset &lt;file-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="强制推送"><a href="#强制推送" class="headerlink" title="强制推送"></a>强制推送</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><code class="hljs sh">git push -f &lt;remote-name&gt; &lt;branch-name&gt;<br></code></pre></td></tr></tbody></table></figure>

<h2 id="一图详解"><a href="#一图详解" class="headerlink" title="一图详解"></a>一图详解</h2><p><img src="E:\桌面\数据分析\文档\git-tips-master\assets\git.png"></p>
<h2 id="优雅的提交Commit信息"><a href="#优雅的提交Commit信息" class="headerlink" title="优雅的提交Commit信息"></a>优雅的提交Commit信息</h2><p>使用<a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines">Angular团队提交规范</a></p>
<p>主要有以下组成</p>
<ul>
<li>标题行: 必填, 描述主要修改类型和内容</li>
<li>主题内容: 描述为什么修改, 做了什么样的修改, 以及开发的思路等等</li>
<li>页脚注释: 放 Breaking Changes 或 Closed Issues</li>
</ul>
<p>常用的修改项</p>
<ul>
<li>type: commit 的类型</li>
<li>feat: 新特性</li>
<li>fix: 修改问题</li>
<li>refactor: 代码重构</li>
<li>docs: 文档修改</li>
<li>style: 代码格式修改, 注意不是 css 修改</li>
<li>test: 测试用例修改</li>
<li>chore: 其他修改, 比如构建流程, 依赖管理.</li>
<li>scope: commit 影响的范围, 比如: route, component, utils, build…</li>
<li>subject: commit 的概述</li>
<li>body: commit 具体修改内容, 可以分为多行</li>
<li>footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.</li>
</ul>
<h3 id="使用Commitizen代替-git-commit"><a href="#使用Commitizen代替-git-commit" class="headerlink" title="使用Commitizen代替 git commit"></a>使用<code>Commitizen</code>代替 git commit</h3><p>可以使用<a href="https://github.com/commitizen/cz-cli">cz-cli</a>工具代替 <code>git commit</code></p>
<p>全局安装</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell">npm install -g commitizen cz-conventional-changelog<br><br>echo '{ "path": "cz-conventional-changelog" }' &gt; ~/.czrc<br></code></pre></td></tr></tbody></table></figure>

<p>全局安装后使用 <code>git cz</code> 代替 <code>git commit</code>就可以了,如下图</p>
<p><img src="E:\桌面\数据分析\文档\git-tips-master\assets\gitcz.png"></p>
<h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h2><ul>
<li>博客园：<a href="http://www.cnblogs.com/xueweihan/">削微寒</a></li>
<li>或者直接提 Pr，Issues</li>
</ul>
<p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>算法原理简介</title>
    <url>/2022/06/02/%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="算法原理简介"><a href="#算法原理简介" class="headerlink" title="算法原理简介"></a>算法原理简介</h1><h2 id="1-KNN"><a href="#1-KNN" class="headerlink" title="1. KNN"></a>1. <strong>KNN</strong></h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier<br><br><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsRegressor<br></code></pre></td></tr></tbody></table></figure>

<p>说明：KNN 算法总体来说比较简单，建议校招的同学写上去。社招同学在被问到还会什么算法的时候才自爆会这些简单算法。总体来说这个算法基本原理需要人人都熟悉。</p>
<p>原理：KNN 是一种既可以用于分类又可用于回归的机器学习算法。对于给定测试样本，基于距离度量找出训练集中与其最靠近的 K 个训练样本，然后基于这 K 个邻居的信息来进行预测。</p>
<h4 id="1-步骤："><a href="#1-步骤：" class="headerlink" title="1. 步骤："></a>1. <strong>步骤：</strong></h4><p>当它使用训练数据训练好模型，而用测试数据进行预测的时候：</p>
<ol>
<li><p>计算测试数据与各个训练数据之间的距离</p>
</li>
<li><p>按照距离远近进行排序</p>
</li>
<li><p>选取距离最小的 K 个点</p>
</li>
<li><p>确定前 K 个点所在类别的出现频率，出现频率最高的类别作为测试数据的预测分类/计算前 K 个点的平均值作为测试数据的预测值 （机制类似 bagging）</p>
</li>
</ol>
<h4 id="2-优点："><a href="#2-优点：" class="headerlink" title="2.优点："></a>2.优点：</h4><ol>
<li><p>简单，易于理解，易于实现</p>
</li>
<li><p>精度高，对异常值不敏感</p>
</li>
<li><p>特别适合于多分类问题</p>
</li>
</ol>
<h4 id="3-缺点："><a href="#3-缺点：" class="headerlink" title="3.缺点："></a>3.缺点：</h4><ol>
<li><p>对测试样本分类时的计算量大，空间开销量大</p>
</li>
<li><p>当样本不平衡时，对稀有类别预测准确率低</p>
</li>
<li><p>可解释性不强</p>
</li>
<li><p>使用消极学习方法，基本上不学习，预测速度较慢</p>
</li>
</ol>
<h2 id="2-逻辑回归"><a href="#2-逻辑回归" class="headerlink" title="2. 逻辑回归"></a>2. <strong>逻辑回归</strong></h2><p>（<code>LogisticRegression</code>，简称 LR）</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<br></code></pre></td></tr></tbody></table></figure>

<p>擅长处理分类问题</p>
<h3 id="1-原理："><a href="#1-原理：" class="headerlink" title="1. 原理："></a>1. 原理：</h3><ul>
<li>在线性回归的基础上加入了<code>sigmoid</code>函数。本质上使用一个线性回归模型的预测结果取逼近真实标记的对数几率。</li>
</ul>
<p>$$<br>y = g(z) = \frac{1}{1+e^{-2}}<br>$$</p>
<h3 id="2-优点：-1"><a href="#2-优点：-1" class="headerlink" title="2. 优点："></a>2. 优点：</h3><blockquote>
<p>分类时相对其他算法计算量很小，速度很快，消耗资源低。</p>
<p>可以便利地观察样本的概率分数。</p>
</blockquote>
<h3 id="3-缺点：-1"><a href="#3-缺点：-1" class="headerlink" title="3. 缺点："></a>3. 缺点：</h3><blockquote>
<p>容易欠拟合，一般的准确度不太高。</p>
<p>当样本的特征空间很大时，逻辑回归的性能不是很好。</p>
</blockquote>
<h3 id="4-应用："><a href="#4-应用：" class="headerlink" title="4. 应用："></a>4. 应用：</h3><blockquote>
<p>常常用于二分类问题上，但同时也可以输出概率的回归数值。</p>
<p>例如：是否为垃圾邮件，是否患病，金融诈骗，虚假账号</p>
</blockquote>
<h3 id="5-参数："><a href="#5-参数：" class="headerlink" title="5 .参数："></a>5 .参数：</h3><blockquote>
<p><code>LogisticRegression</code>默认带了正则化项，<code>penalty</code>参数可选择的值为 l1 和 l2,默认是 l2 正则化</p>
<p>L1 是模型各个参数的绝对值之和，L1 趋向于产生少许的特征，而其余的特征都是 0</p>
<p>L2 是模型各个参数的平方和的绝对值，L2 会选择更多的特征，这些特征都会接近于 0</p>
<p>算法优化参数<code>solver </code>L1:<code>liblinear </code>L2:<code>libnear</code>,<code>lbfgs</code>,<code>newton</code>-cg,sag</p>
<p>梯度下降：<code>max_iter </code>最大迭代次数</p>
</blockquote>
<h2 id="3-朴素贝叶斯算法"><a href="#3-朴素贝叶斯算法" class="headerlink" title="3. 朴素贝叶斯算法"></a>3. 朴素贝叶斯算法</h2><p>(高斯朴素贝叶斯，多项式朴素贝叶斯，伯努利朴素贝叶斯）</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.naive_bayes <span class="hljs-keyword">import</span> GaussianNB<br><br><span class="hljs-keyword">from</span> sklearn.naive_bayes <span class="hljs-keyword">import</span> MultinomialNB<br><br><span class="hljs-keyword">from</span> sklearn.naive_bayes <span class="hljs-keyword">import</span> BernoulliNB<br></code></pre></td></tr></tbody></table></figure>

<h3 id="1-原理：-1"><a href="#1-原理：-1" class="headerlink" title="1.原理："></a>1.原理：</h3><ul>
<li>在假设每个条件都独立的情况下，以贝叶斯定理为基础，利用概率统计对样本数据集进行分类。</li>
</ul>
<h3 id="2-优点：-2"><a href="#2-优点：-2" class="headerlink" title="2. 优点："></a>2. 优点：</h3><ol>
<li><p>简单快速，预测表现良好</p>
</li>
<li><p>直接使用概率预测，通常容易理解</p>
</li>
<li><p>如果变量满足独立条件，相比逻辑回归等其他分类算法，朴素贝叶斯分类器性能更优，只需要少量训练数据</p>
</li>
<li><p>相较于数值变量，朴素贝叶斯分类器在多个分类变量的情况下表现更好。若是数值变量，需要正态分布假设</p>
</li>
</ol>
<h3 id="3-缺点：-2"><a href="#3-缺点：-2" class="headerlink" title="3. 缺点："></a>3. 缺点：</h3><ol>
<li><p>朴素贝叶斯模型对于属性个数较多，属性之间相关性较大时，分类效果不好。</p>
</li>
<li><p>需要知道先验概率，且先验概率很多时候取决于假设，假设的模型可以有很多种，因此在某些时候会由于假设的先验模型的原因导致预测效果不佳。</p>
</li>
<li><p>由于我们是通过先验和数据来决定后验的概率从而决定分类，所以分类决策存在一定错误率。</p>
</li>
<li><p>对输入数据的表达形式很敏感。</p>
</li>
</ol>
<h3 id="4-应用：-1"><a href="#4-应用：-1" class="headerlink" title="4. 应用："></a>4. 应用：</h3><ul>
<li>实时预测，多类预测，文本分类/垃圾邮件/情感分析，推荐系统（过滤用户想看到和不想看到的东西</li>
</ul>
<h2 id="4-决策树"><a href="#4-决策树" class="headerlink" title="4. 决策树"></a>4. <strong>决策树</strong></h2><p>原理：</p>
<p>决策树基于树结构，从顶往下，依次对样本的（一个或多个）属性进行判断，直到决策树的叶节点并导出最终结果。决策树的划分原则就是：将无序的数据变得更加有序。</p>
<table>
<thead>
<tr>
<th>算法</th>
<th>支持模型</th>
<th>树结构</th>
<th>特征选择</th>
<th>连续值处理</th>
<th>缺失值处理</th>
<th>剪枝</th>
</tr>
</thead>
<tbody><tr>
<td>ID3</td>
<td>分类</td>
<td>多叉树</td>
<td>信息增益</td>
<td>不支持</td>
<td>不支持</td>
<td>不支持</td>
</tr>
<tr>
<td>C4.5</td>
<td>分类</td>
<td>多叉树</td>
<td>信息增益比</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>CART</td>
<td>分类、回归</td>
<td>二叉树</td>
<td>基尼系数、均方差</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
</tbody></table>
<p><strong>信息增益</strong>：</p>
<p><code>ID3 </code>在划分数据集之前之后信息发生的变化成为信息增益</p>
<p><code>ID3</code>算法就是在每次需要分裂时，计算每个属性的增益率，然后选择增益率最大的属性进行分裂。</p>
<p><strong>信息增益比</strong>：</p>
<p><code>C4.5 </code>信息增益与训练数据集的经验熵之比</p>
<p><strong><code>CART</code>分类算法</strong>是：</p>
<p>根据基尼（<code>gini</code>）系数来选择测试属性，<code>gini</code>系数的值越小，划分效果越好。</p>
<p><strong>决策树模型参数</strong>：</p>
<p><code>max_features</code>: None(所有） log2，sqrt, N 特征小于 50 的时候一般使用所有的</p>
<p><code>max_depth</code>: 设置决策随机森林中的决策树的最大深度，深度越大，越容易过拟合，推荐树的深度为 5~20 之间</p>
<p><code>min_samples_split</code>:设置结点的最小样本数量，当样本数量可能小于此值时，结点将不会再划分</p>
<p><code>min_samples_leaf</code>:这个值限制了叶子节点最小的样本数，如果某叶子节点数目小于样本数，则会和兄弟节点一起被剪枝</p>
<h3 id="1-优点："><a href="#1-优点：" class="headerlink" title="1.优点："></a>1.优点：</h3><p>决策树有利于理解，可解释性好。</p>
<p>可以进行可视化分析，容易提取出规则。</p>
<p>比较适合处理有缺失属性的样本。</p>
<p>测试数据集时，运行速度较快。</p>
<h3 id="2-缺点："><a href="#2-缺点：" class="headerlink" title="2.缺点："></a>2.缺点：</h3><p>容易发生过拟合。（集成学习模型特别是随机森林可以一定程度上防止过拟合）</p>
<p>容易忽略数据集中属性的相互关联。</p>
<h2 id="5-集成学习"><a href="#5-集成学习" class="headerlink" title="5. 集成学习"></a>5. <strong>集成学习</strong></h2><p>一种思想:组合多个弱监督模型得到一个更好更全面的强监督模型</p>
<p>分为：序列集成方法（<code>Boosting</code>）和并行集成方法（<code>Bagging</code>）</p>
<p><strong>序列集成方法</strong>（<code>Boosting</code>）：<code>boosting</code>方法在弱模型上表现很好（例如浅层决策树）。首先对所有训练集进行学习，然后通过对训练中错误标记的样本赋值较高的权重不断学习，最后通过加法模型将弱分类器进行线性组合，提高整体的预测效果。</p>
<p>代表算法：<code>AdaBoost、GBDT</code></p>
<p><code>AdaBoost</code>参数：</p>
<p><code>base_estimator</code>:基分类器，默认决策树，在该分类器基础上进行<code>boosting</code></p>
<p><code>n_estimators</code>:基分类器提升（循环）次数，默认是 50 次，这个值过大，模型容易过拟合；值过小，模型容易欠拟合</p>
<p><code>learning_rate</code>：学习率，表示梯度收敛速度，默认为 1</p>
<p><code>Adaboost</code>的总结：</p>
<p>在分类错误的部分增加训练权重，而在训练的过程是通过降低偏差来不断提高最终分类器的精度。</p>
<p>弱分类器一般会选择为 CARTRE(也就是分类回归树)。由于上述高偏差和简单的要求每个分类回归树的深度不会很深。最终的总分类器是将每轮训练得到的弱分类最加权求和得到的〈(也就是加法模型)。</p>
<p>具体步骤：</p>
<p>1、首先，初始化训练数据的权值分布</p>
<p>2、进行多轮迭代</p>
<p>a 、使用具有权值分布 Dm 的训练数据集学习，得到基本分类器</p>
<p>b 、计算<code>Gm(x)</code>在训练数据集上的分类误差率</p>
<p>c 、计算<code>Gm(x)</code>的系数，<code>am</code>表示<code>Gm(x)</code>在最终分类器中的重要程度 (目的：得到基本分类器在最终分类器中所占的权重)</p>
<p>d 、更新训练数据集的权值分布（为了得到样本的新的权值分布），用于下一轮迭代</p>
<p>3、组合各个弱分类器，得到最终分类器</p>
<p><strong>并行集成方法</strong>（<code>Bagging</code>）(装袋法)：利用基础学习器之间的独立性，通过平均可以显著降低错误。因为<code>bagging</code>方法可以减小过拟合，所以通常在强分类器和复杂模型上使用时表现得很好（例如完全生长得决策树）</p>
<p><code>Bagging</code>核心为<code>bootstrap</code>(自助采样法），算法过程如下：</p>
<ol>
<li><p>从原始样本集中抽取训练集，每轮从原始样本集中有放回地抽取 n 个训练样本，共进行 k 轮抽取，得到 k 个训练集</p>
</li>
<li><p>每次使用一个训练集得到一个模型，k 个训练集得到 k 个模型</p>
</li>
<li><p>对于分类问题，将上步得到地 k 个模型采用投票方式得到分类结果。对于回归问题，计算模型地均值作为最后结果</p>
</li>
</ol>
<p><code>Bagging</code>参数：</p>
<ul>
<li><p><code>base_estimator</code>基学习器</p>
</li>
<li><p><code>n_estimators</code>基学习器数量</p>
</li>
<li><p><code>max_samples</code>随机样本集的最大个数</p>
</li>
<li><p><code>max_features</code>随机特征子集的最大个数</p>
</li>
<li><p><code>bootstrap</code>控制样本是否有放回取样(bootstrap=True,表示有放回取样)</p>
</li>
<li><p><code>bootstrap_features</code>控制特征是否是有放回取样</p>
</li>
</ul>
<p><strong>bagging</strong>代表算法：</p>
<h6 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h6><p>原理：以树模型为基础学习器的 bagging 算法。（描述决策树的原理 + bagging 的原理）</p>
<p>随机方式：样本随机 特征随机 参数随机 模型随机（ID3,C4.5)</p>
<h4 id="1-优点：-1"><a href="#1-优点：-1" class="headerlink" title="1. 优点："></a>1. 优点：</h4><p>它可以拟合出来很高维度（特征很多）的数据，并且不用降维，无需做特征选择它可以判断特征的重要程度</p>
<p>能一定程度防止过拟合</p>
<p>对于不平衡的数据集来说，它可以平衡误差。</p>
<p>如果有很大一部分的特征遗失，仍可以维持准确度。</p>
<h4 id="2-缺点：-1"><a href="#2-缺点：-1" class="headerlink" title="2. 缺点："></a>2. 缺点：</h4><p>在某些噪音较大的分类或回归问题上会过拟合。</p>
<p>取值划分较多的属性会对随机森林产生更大的影响。</p>
<h4 id="3-Extra-Trees-极限树"><a href="#3-Extra-Trees-极限树" class="headerlink" title="3. Extra Trees 极限树"></a>3. Extra Trees 极限树</h4><p>_原理_：算法与随机森林算法十分相似，都是由许多决策树构成。</p>
<p>_随机方式_：特征随机 参数随机 模型随机<code>（ID3 ,C4.5） </code>分裂随机</p>
<h4 id="4-极限树与随机森林的主要区别："><a href="#4-极限树与随机森林的主要区别：" class="headerlink" title="4. 极限树与随机森林的主要区别："></a>4. 极限树与随机森林的主要区别：</h4><p><code>randomForest</code>应用的是 Bagging 模型，<code>extraTree</code>使用的所有的样本，极限树的分裂是随机选取的，因为分裂是随机的，所以在某种程度上比随机森林得到的结果更加好。</p>
<p>随机森林是在一个随机子集内得到最佳分叉属性，而 ET 是完全随机的得到分叉值，从而实现对决策树进行分叉的。</p>
<h4 id="5-GBDT-简要原理："><a href="#5-GBDT-简要原理：" class="headerlink" title="5. GBDT 简要原理："></a>5. GBDT 简要原理：</h4><p><code>DT</code>是<code>Decision Tree</code>决策树，<code>GB</code>是<code>Gradient Boosting</code>（梯度推进、梯度提升），GBDT 是一种学习策略，<code>GBDT</code>就是用<code>Gradient Boosting</code>的策略训练出来的<code>DT</code>决策树模型。模型的结果是一组回归分类树组合<code>(CART Tree nsemble)T(1)......T(k) </code>。其中<code>T(j)</code> 模型的参数学习的是之前<code>(j-i)</code> 棵树预测结果的残差。</p>
<p><code>GBDT</code>思想：就像准备考试前的复习，先做一遍习题册，然后把做错的题目挑出来，在做一次，然后把做错的题目挑出来在做一次，经过反复多轮训练，取得最好的成绩。</p>
<h4 id="6-GBDT-优缺点："><a href="#6-GBDT-优缺点：" class="headerlink" title="6. GBDT 优缺点："></a>6. GBDT 优缺点：</h4><ol>
<li>GBDT 优点</li>
</ol>
<blockquote>
<p>可以灵活处理各种类型的数据，包括连续值和离散值。</p>
<p>在相对较少的调参时间情况下，预测的准确率也比较高，相对 SVM 而言。</p>
<p>在使用一些健壮的损失函数，对异常值得鲁棒性非常强。比如 Huber 损失函数和 Quantile 损失函数。</p>
</blockquote>
<ol start="2">
<li>GBDT 缺点</li>
</ol>
<blockquote>
<p>由于弱学习器之间存在较强依赖关系，难以并行训练。可以通过自采样的 SGBT 来达到部分并行。</p>
</blockquote>
<p><strong>重点描述：我们后一棵树，拟合（学习）前面的树预测结果的残差。为什么是残差？残差是我定义的损失函数（MSE）的一阶导，损失的一阶导是损失下降的最快的方向。</strong></p>
<blockquote>
<p><code>XGBoost</code>：该算法思想是基于决策树，通过<code>boosting</code>算法的方式，在<code>GBDT</code>基础上的工程实现，它不断地进行特征分裂来生长一棵树，每次添加一个树，其实是学习一个新函数，去拟合上次预测的残差，本质上是对上次预测失败的部分再进行预测并且为继续失败的部分赋予更高的权重的过程。当我们训练完成得到 k 棵树，我们要预测一个样本的分数，其实就是根据这个样本的特征，在每棵树中会落到对应的一个叶子节点，每个叶子节点就对应一个分数，最后只需要将每棵树对应的分数加起来就是该样本的预测值。</p>
</blockquote>
<ol start="3">
<li><code>XGBoost</code>与 GBDT 有什么不同：</li>
</ol>
<p>除了算法上与传统的 GBDT 有一些不同外，<code>XGBoost</code>还在工程实现上做了大量的优化。总的来说，两者之间的区别和联系可以总结成以下几个方面。</p>
<blockquote>
<ol>
<li><p>GBDT 是机器学习算法，<code>XGBoost</code>是该算法的工程实现。</p>
</li>
<li><p>在使用 CART 作为基分类器时，<code>XGBoost</code>显式地加入了正则项来控制模型的复杂度，有利于防止过拟合，从而提高模型的泛化能力。</p>
</li>
<li><p>GBDT 在模型训练时只使用了代价函数的一阶导数信息，<code>XGBoost</code>对代 价函数进行二阶泰勒展开，可以同时使用一阶和二阶导数。</p>
</li>
<li><p>传统的 GBDT 采用 CART 作为基分类器，<code>XGBoost</code>支持多种类型的基分类器，比如线性分类器。</p>
</li>
<li><p>传统的 GBDT 在每轮迭代时使用全部的数据，<code>XGBoost</code>则采用了与随机森林相似的策略，支持对数据进行采样。</p>
</li>
<li><p>传统的 GBDT 没有设计对缺失值进行处理，<code>XGBoost</code>能够自动学习出缺失值的处理策略。</p>
</li>
</ol>
</blockquote>
<p><strong><code>VotingClassifier</code></strong></p>
<p>导入：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.ensemble  <span class="hljs-keyword">import</span> VotingClassifier<br></code></pre></td></tr></tbody></table></figure>

<p>用法：<code>VotingClassifier(estimators)</code> 其中<code>estimators</code>是列表套元组的方式<code>list of [(),(),(),....]：[(str,estimator)]</code></p>
<h4 id="7-决策原理："><a href="#7-决策原理：" class="headerlink" title="7. 决策原理："></a>7. 决策原理：</h4><ol>
<li>Hard 硬方式：<code>voting='hard'</code></li>
</ol>
<p>用多种机器学习方法得到的结果进行投票，少数服从多数得到结果。</p>
<ol>
<li>Soft 软方式：<code>voting='soft'</code></li>
</ol>
<p>将所有模型预测样本为某一类别的概率的平均值作为标准，概率最高的对应的类型为最终结果。</p>
<h2 id="6-K-means-算法——聚类"><a href="#6-K-means-算法——聚类" class="headerlink" title="6. K-means 算法——聚类"></a>6. <strong>K-means 算法——聚类</strong></h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> KMeans<br></code></pre></td></tr></tbody></table></figure>

<h4 id="1-聚类："><a href="#1-聚类：" class="headerlink" title="1. 聚类："></a>1. 聚类：</h4><blockquote>
<p>一种无监督的学习，事先不知道类别，自动将相似的对象归到同一个簇中</p>
</blockquote>
<h4 id="2-算法原理："><a href="#2-算法原理：" class="headerlink" title="2. 算法原理："></a>2. 算法原理：</h4><p>从训练集中随机选取 k 个中心点，通过计算每一个样本与中心之间的距离，将样本点归到最相似的类中，接着重新计算每个类的中心，重复这样的过程，直到中心不再改变，最终确定了每个样本所属的类别以及每个类的中心。</p>
<h4 id="3-算法步骤："><a href="#3-算法步骤：" class="headerlink" title="3. 算法步骤："></a>3. 算法步骤：</h4><ol>
<li><p>从数据中选择 k 个对象作为初始聚类中心；</p>
</li>
<li><p>计算每个聚类对象到聚类中心的距离来划分；</p>
</li>
<li><p>再次计算每个聚类中心；</p>
</li>
<li><p>计算标准测度函数，直到达到最大迭代次数，则停止，否则，继续操作；</p>
</li>
<li><p>确定最优的聚类中心。</p>
</li>
</ol>
<h4 id="4-应用举例"><a href="#4-应用举例" class="headerlink" title="4. 应用举例:"></a>4. 应用举例:</h4><ol>
<li><p>文档分类器</p>
</li>
<li><p>客户分类</p>
</li>
<li><p>保险欺诈检测</p>
</li>
<li><p>乘车数据分析</p>
</li>
</ol>
<h3 id="KMeans-模型评价："><a href="#KMeans-模型评价：" class="headerlink" title="KMeans 模型评价："></a><code>KMeans </code>模型评价：</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> silhouette_score<br><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> silhouette_samples<br></code></pre></td></tr></tbody></table></figure>

<p>其中<code>silhouette_score</code>是返回所有点的平均轮廓系数,<code>silhouette_samples</code>返回每个点的轮廓系数</p>
<p>某个点的轮廓系数定义：</p>
<p>$$<br>S=\frac{disMean_{out} - disMean_{in}}{max(disMean_{out}, disMean_{in})}<br>$$</p>
<p><code>disMean{in}</code>为该点与本类其他点的平均距离</p>
<p><code>disMean{out}</code>为该点与非本类点的平均距离。</p>
<p><code>KMeans</code>模型评价：轮廓系数 s，取值范围[-1,1]，越接近于 1，说明聚类越优秀</p>
<p>聚类的个数应该由业务需求给定，而不是根据轮廓系数来判断，轮廓系数是在已知聚类个数的需求的前提下，针对特征工程处理的优化程度的评价。</p>
<h2 id="7-SVM-支持向量机"><a href="#7-SVM-支持向量机" class="headerlink" title="7. SVM 支持向量机"></a>7. <strong>SVM 支持向量机</strong></h2><p><strong>（有监督模型/无监督模型/半监督模型）</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVC<br><br><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVR<br></code></pre></td></tr></tbody></table></figure>

<h4 id="1-最大边际分类器）"><a href="#1-最大边际分类器）" class="headerlink" title="1. (最大边际分类器）"></a>1. (最大边际分类器）</h4><p>原理：SVM 是通过高维度的方式来解决低维度上的问题，是在线性不可分的情况下解决分类和回归问题的一种强有力的算法。使用不同的核函数可以在各种不同的情况下以各种高维度思路来解决低维度的问题。</p>
<p>SVM 的损失函数最初形态：</p>
<p>$$<br>\underset{\omega,b}{min}\frac{||\omega||^2}{2}<br>\<br>subject , to , y_i(\omega \cdot x + b) \geq 1 , i=1,2,……,N<br>$$</p>
<h4 id="2-核函数："><a href="#2-核函数：" class="headerlink" title="2. 核函数："></a>2. <strong>核函数：</strong></h4><p>核函数，又叫做“核技巧”(Kernel Trick)，是一种能够使用数据原始空间中的向量计算来表示升维后的空间中的点积结果的数学方式。</p>
<p>目的是为了解决以下问题：</p>
<ol>
<li><p>有了核函数之后，我们无需去担心究竟应该是什么样，因为非线性 SVM 中的核函数都是正定核函 数，他们都满足美世定律，确保了高维空间中任意两个向量的点积一定可以被低维空间中的这两个向量的某种计算来表示（多数时候是点积的某种变换）。</p>
</li>
<li><p>使用核函数计算低维度中的向量关系比计算原本的映射函数$\Phi(x_i)\Phi(x_{test})$要简单太多</p>
</li>
</ol>
<p>计算是在原始空间中进行，所以避免了维度诅咒的问题</p>
<p><code>SKlearn </code>中的核函数，用<code>Kernel</code>选择：</p>
<p>| 输入      | 含义       | 解决问题 | 核函数的表达式                        | 参数 gamma | 参数 degree | 参数 coef0 |<br>| ——— | ———- | ——– | ————————————- | ———- | ———– | ———- | ————— | — | — | — |<br>| <code>liner</code>   | 线性核     | 线性     | $ K(x,y)= x^T y = x\cdot y $          | No         | No          | No         |<br>| <code>poly</code>    | 多项式核   | 偏线性   | $ K(x,y)=(\gamma(x\cdot y) + r)^d $   | Yes        | Yes         | Yes        |<br>| <code>sigmoid</code> | 双曲正切核 | 非线性   | $K(x,y) = tanh(\gamma(x\cdot y) + r)$ | Yes        | No          | Yes        |<br>| <code>rbf</code>     | 高斯径向基 | 偏非线性 | $K(x,y)=e^{-\gamma                    |            | x-y         |            | ^2}, \gamma&gt;0 $ | Yes | No  | No  |</p>
<h2 id="8-降维方式"><a href="#8-降维方式" class="headerlink" title="8. 降维方式"></a>8. <strong>降维方式</strong></h2><h4 id="1-降维说明："><a href="#1-降维说明：" class="headerlink" title="1. 降维说明："></a>1. 降维说明：</h4><blockquote>
<p>通过保留一些重要特征，减少数据的维度的方法。</p>
<p>降维后的最终目标是各个属性维度之间线性无关。</p>
</blockquote>
<h4 id="2-降维的要点："><a href="#2-降维的要点：" class="headerlink" title="2. 降维的要点："></a>2. 降维的要点：</h4><blockquote>
<p>首先让特征之间不相关，在不相关中选择最重要的特征（分布方差最大）。</p>
<p>每个新特征是所有原特征的线性组合，原特征并没有改变，是特征工程的一个方法</p>
<p>分布方差最大：最大限度的保留了原始数据的原貌</p>
<p>特征值就是分布方差</p>
</blockquote>
<h4 id="3-降维作用"><a href="#3-降维作用" class="headerlink" title="3. 降维作用:"></a>3. 降维作用:</h4><ol>
<li>降低时间复杂度和空间复杂度;</li>
<li>节省了提取不必要特征的时间开销和空间开销;</li>
<li>去掉数据集中夹杂的噪声;</li>
<li>当数据能有较少的特征进行解释,我们可以更好的解释数据,使得我们可以提取知识;</li>
<li>实现数据可视化</li>
</ol>
<h4 id="4-降维的好处："><a href="#4-降维的好处：" class="headerlink" title="4. 降维的好处："></a>4. 降维的好处：</h4><ol>
<li>节省存储空间。数据压缩（数据在低维下更容易使用处理）。</li>
<li>降低算法的开销，加快机器学习中的计算速度，提高效率。</li>
<li>去除一些冗余的特征。消除冗余，去除噪声，降低维度灾难。</li>
</ol>
<p>数据噪声：</p>
<blockquote>
<p>噪声数据是指数据中存在着错误或异常（偏离期望值）的数据，这些数据对数据的分析造成了干扰。</p>
</blockquote>
<ol>
<li>有利于数据可视化，以便观察和挖掘数据的特征。</li>
</ol>
<p>无监督降维：PCA 主成分分析法</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.decomposition <span class="hljs-keyword">import</span> PCA<br></code></pre></td></tr></tbody></table></figure>

<p>PCA 用于对一组连续正交分量中的多变量数据集进行方差最大方向的分解。是一种常用的线性降维数据分析方法，其实质是在能尽可能好的代表原特征的情况下，将原特征进行线性变换、映射至低维度空间中。也就是将 N 维特征映射到 K 维空间上，K&lt;N，这 K 维特征是线性无关的。</p>
<p>注意：这是重新构造出来的 K 维特征，而不是简单地从 N 维特征中去除其余 N-K 维特征，因为有可能是某些新特征可能是几个原特征经过变换而来的；这也是特征选择和特征提取的根本区别。</p>
<p>PCA 核心问题：协方差矩阵的分解</p>
<p>PCA 优点：</p>
<ol>
<li>保留绝大部分信息；</li>
<li>消除评价指标之间的相关影响；</li>
<li>计算方法简单，易于在计算机上实现。</li>
</ol>
<p>PCA 缺点：</p>
<ol>
<li>主成分分析往往具有一定模糊性，不如原始变量的含义那么清楚、确切。</li>
</ol>
<p>有监督降维：LDA 线性判别分析法 <code>from sklearn.discriminant_analysis import LinearDiscriminantAnalysis</code></p>
<p>LDA 思想：投影后类内方差最小，类间方差最大。</p>
<p>LDA 算法的优点：</p>
<ol>
<li>在降维过程中可以使用类别的先验知识经验，而像 PCA 这样的无监督学习则无法使用类别先验知识。</li>
<li>LDA 在样本分类信息依赖均值而不是方差的时候，比 PCA 之类的算法较优。</li>
</ol>
<p>LDA 算法的缺点：</p>
<ol>
<li>LDA 不适合对非高斯分布样本进行降维，PCA 也有这个问题。</li>
<li>LDA 降维最多降到类别数 K-1 的维数，如果我们降维的维度大于 K-1，则不能使用 LDA。当然，目前有一些 LDA 的进化版算法可以绕过这个问题。</li>
<li>LDA 在样本分类信息依赖方差而不是均值的时候，降维效果不好。</li>
<li>LDA 可能过度拟合数据。</li>
</ol>
<p>LDA 和 PCA 的区别：</p>
<p>相同点：</p>
<ol>
<li>PCA 和 LDA 均可以对数据进行降维。</li>
<li>两者在降维时均使用了矩阵特征分解的思想。</li>
<li>两者都假设数据符合高斯分布。</li>
</ol>
<p>不同点：</p>
<ol>
<li>LDA 是有监督的降维方法，而 PCA 是无监督的降维方法。</li>
<li>LDA 降维最多降到类别数 K-1 的维数，而 PCA 则没有这个限制。</li>
<li>LDA 除了可以用于降维，还可以用于分类。</li>
<li>LDA 选择分类性能最好的投影方向，而 PCA 选择样本点具有最大方差的投影方向。</li>
</ol>
<p>基础知识补充</p>
<h2 id="9-ElasticSearch"><a href="#9-ElasticSearch" class="headerlink" title="9. ElasticSearch"></a>9. <strong><code>ElasticSearch</code></strong></h2><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><blockquote>
<p><code>ElasticSearch</code>是一个基于<code>Lucene</code>的搜索服务器，它提供了一个分布式多用户的全文搜索引擎。</p>
</blockquote>
<h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><blockquote>
<p>首先用户将数据提交到<code>ElasticSearch </code>数据库中，再通过分词控制器去将对应的语句分词，将其权重和分词结果一并存入数据，当用户搜索数据时候，再根据权重将结果排名，打分，再将返回结果呈现给用户。</p>
</blockquote>
<h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ol>
<li>免费开源的搜索引擎</li>
<li>分布式的实时文件存储，每个字段都被索引并可被搜索</li>
<li>实时分析的分布式搜索引擎</li>
<li>可以扩展到上百台服务器，处理 PB 级结构化或非结构化数据</li>
</ol>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
</search>
